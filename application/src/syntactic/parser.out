Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    ANDEQUAL
    COLON
    DIVEQUAL
    EXP
    LBRACKET
    LSHIFT
    LSHIFTEQUAL
    MINUSEQUAL
    MODEQUAL
    NO
    OR
    OREQUAL
    PERIOD
    PLUSEQUAL
    Q
    QQ
    QR
    QW
    QX
    RBRACKET
    RSHIFT
    RSHIFTEQUAL
    S
    TERNARY
    TIMESEQUAL
    TR
    UNLESS
    UNTIL
    XOREQUAL

Grammar

Rule 0     S' -> init
Rule 1     init -> blockcode init
Rule 2     init -> function init
Rule 3     init -> blockcode
Rule 4     init -> function
Rule 5     blockcode -> command
Rule 6     blockcode -> command blockcode
Rule 7     command -> interations
Rule 8     command -> if
Rule 9     command -> exp_assignment
Rule 10    command -> call
Rule 11    command -> RETURN return SEMICOLON
Rule 12    command -> BREAK SEMICOLON
Rule 13    command -> CONTINUE SEMICOLON
Rule 14    if -> IF LPAREN exp_condition RPAREN if_statement
Rule 15    if_statement -> LBRACE blockcode RBRACE
Rule 16    if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE
Rule 17    if_statement -> LBRACE blockcode RBRACE elsif
Rule 18    elsif -> ELSIF LPAREN exp_condition RPAREN LBRACE blockcode RBRACE
Rule 19    elsif -> ELSIF LPAREN exp_condition RPAREN LBRACE blockcode RBRACE elsif2
Rule 20    elsif2 -> elsif
Rule 21    elsif2 -> ELSE LBRACE blockcode RBRACE
Rule 22    interations -> for
Rule 23    interations -> dowhile
Rule 24    interations -> while
Rule 25    for -> FOR LPAREN for_assignments SEMICOLON exp_condition SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
Rule 26    for_assignments -> exp_assignment
Rule 27    for_assignments -> exp_assignment COMMA for_assignments
Rule 28    dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp_condition RPAREN
Rule 29    while -> WHILE LPAREN exp_condition RPAREN LBRACE blockcode RBRACE
Rule 30    while -> WHILE LPAREN exp_condition RPAREN LBRACE RBRACE
Rule 31    function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE
Rule 32    function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE
Rule 33    function_assignments -> exp_assignment
Rule 34    function_assignments -> exp_assignment COMMA function_assignments
Rule 35    exp_condition -> exp_condition GT exp_condition_2
Rule 36    exp_condition -> exp_condition LT exp_condition_2
Rule 37    exp_condition -> exp_condition_2
Rule 38    exp_condition_2 -> exp_condition_2 GE exp_condition_3
Rule 39    exp_condition_2 -> exp_condition_2 LE exp_condition_3
Rule 40    exp_condition_2 -> exp_condition_3
Rule 41    exp_condition_3 -> exp_condition_3 EQ exp_condition_4
Rule 42    exp_condition_3 -> exp_condition_3 NE exp_condition_4
Rule 43    exp_condition_3 -> exp_condition_4
Rule 44    exp_condition_4 -> exp_condition_4 SGT exp_condition_5
Rule 45    exp_condition_4 -> exp_condition_4 SLT exp_condition_5
Rule 46    exp_condition_4 -> exp_condition_5
Rule 47    exp_condition_5 -> exp_condition_5 SGE exp_condition_6
Rule 48    exp_condition_5 -> exp_condition_5 SLE exp_condition_6
Rule 49    exp_condition_5 -> exp_condition_6
Rule 50    exp_condition_6 -> exp_condition_6 SEQ exp_condition_7
Rule 51    exp_condition_6 -> exp_condition_6 SNE exp_condition_7
Rule 52    exp_condition_6 -> exp_condition_7
Rule 53    exp_condition_7 -> exp_condition_7 CMP exp_condition_8
Rule 54    exp_condition_7 -> exp_condition_8
Rule 55    exp_condition_8 -> attcond
Rule 56    exp_condition_8 -> LPAREN exp_condition RPAREN logic exp_condition_logic
Rule 57    exp_condition_logic -> LPAREN exp_condition RPAREN
Rule 58    exp_condition_logic -> LPAREN exp_condition RPAREN logic LPAREN exp_condition RPAREN
Rule 59    logic -> LAND
Rule 60    logic -> LOR
Rule 61    logic -> LNOT
Rule 62    exp_assignment -> ID_SC EQUALS arithmetic
Rule 63    exp_assignment -> ID_LI EQUALS arithmetic
Rule 64    exp_assignment -> ID_SC
Rule 65    exp_assignment -> ID_LI
Rule 66    exp_assignment -> INCREMENT ID_SC
Rule 67    exp_assignment -> DECREMENT ID_SC
Rule 68    exp_assignment -> ID_SC INCREMENT
Rule 69    exp_assignment -> ID_SC DECREMENT
Rule 70    arithmetic -> exp
Rule 71    exp -> exp PLUS exp1
Rule 72    exp -> exp MINUS exp1
Rule 73    exp -> exp1
Rule 74    exp1 -> exp1 TIMES exp2
Rule 75    exp1 -> exp1 DIVIDE exp2
Rule 76    exp1 -> exp1 MODULO exp2
Rule 77    exp1 -> exp2
Rule 78    exp2 -> exp3 XOR exp2
Rule 79    exp2 -> exp3
Rule 80    exp3 -> LPAREN arithmetic RPAREN
Rule 81    exp3 -> NUMBER
Rule 82    exp3 -> exp_assignment
Rule 83    exp3 -> exp_condition
Rule 84    exp3 -> call
Rule 85    exp3 -> exp
Rule 86    exp3 -> TRUE
Rule 87    exp3 -> FALSE
Rule 88    attcond -> exp_assignment
Rule 89    attcond -> NUMBER
Rule 90    attcond -> TRUE
Rule 91    attcond -> FALSE
Rule 92    call -> ID LPAREN RPAREN
Rule 93    call -> ID LPAREN function_assignments RPAREN
Rule 94    return -> attcond
Rule 95    return -> arithmetic

Terminals, with rules where they appear

AND                  : 
ANDEQUAL             : 
BREAK                : 12
CMP                  : 53
COLON                : 
COMMA                : 27 34
CONTINUE             : 13
DECREMENT            : 67 69
DIVEQUAL             : 
DIVIDE               : 75
DO                   : 28
ELSE                 : 16 21
ELSIF                : 18 19
EQ                   : 41
EQUALS               : 62 63
EXP                  : 
FALSE                : 87 91
FOR                  : 25
GE                   : 38
GT                   : 35
ID                   : 31 32 92 93
ID_LI                : 63 65
ID_SC                : 62 64 66 67 68 69
IF                   : 14
INCREMENT            : 66 68
LAND                 : 59
LBRACE               : 15 16 16 17 18 19 21 25 28 29 30 31 32
LBRACKET             : 
LE                   : 39
LNOT                 : 61
LOR                  : 60
LPAREN               : 14 18 19 25 28 29 30 31 32 56 57 58 58 80 92 93
LSHIFT               : 
LSHIFTEQUAL          : 
LT                   : 36
MINUS                : 72
MINUSEQUAL           : 
MODEQUAL             : 
MODULO               : 76
NE                   : 42
NO                   : 
NUMBER               : 81 89
OR                   : 
OREQUAL              : 
PERIOD               : 
PLUS                 : 71
PLUSEQUAL            : 
Q                    : 
QQ                   : 
QR                   : 
QW                   : 
QX                   : 
RBRACE               : 15 16 16 17 18 19 21 25 28 29 30 31 32
RBRACKET             : 
RETURN               : 11
RPAREN               : 14 18 19 25 28 29 30 31 32 56 57 58 58 80 92 93
RSHIFT               : 
RSHIFTEQUAL          : 
S                    : 
SEMICOLON            : 11 12 13 25 25
SEQ                  : 50
SGE                  : 47
SGT                  : 44
SLE                  : 48
SLT                  : 45
SNE                  : 51
SUB                  : 31 32
TERNARY              : 
TIMES                : 74
TIMESEQUAL           : 
TR                   : 
TRUE                 : 86 90
UNLESS               : 
UNTIL                : 
WHILE                : 28 29 30
XOR                  : 78
XOREQUAL             : 
error                : 

Nonterminals, with rules where they appear

arithmetic           : 62 63 80 95
attcond              : 55 94
blockcode            : 1 3 6 15 16 16 17 18 19 21 25 28 29 31 32
call                 : 10 84
command              : 5 6
dowhile              : 23
elsif                : 17 20
elsif2               : 19
exp                  : 70 71 72 85
exp1                 : 71 72 73 74 75 76
exp2                 : 74 75 76 77 78
exp3                 : 78 79
exp_assignment       : 9 26 27 33 34 82 88
exp_condition        : 14 18 19 25 28 29 30 35 36 56 57 58 58 83
exp_condition_2      : 35 36 37 38 39
exp_condition_3      : 38 39 40 41 42
exp_condition_4      : 41 42 43 44 45
exp_condition_5      : 44 45 46 47 48
exp_condition_6      : 47 48 49 50 51
exp_condition_7      : 50 51 52 53
exp_condition_8      : 53 54
exp_condition_logic  : 56
for                  : 22
for_assignments      : 25 25 27
function             : 2 4
function_assignments : 32 34 93
if                   : 8
if_statement         : 14
init                 : 1 2 0
interations          : 7
logic                : 56 58
return               : 11
while                : 24

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . blockcode init
    (2) init -> . function init
    (3) init -> . blockcode
    (4) init -> . function
    (5) blockcode -> . command
    (6) blockcode -> . command blockcode
    (31) function -> . SUB ID LPAREN RPAREN LBRACE blockcode RBRACE
    (32) function -> . SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE
    (7) command -> . interations
    (8) command -> . if
    (9) command -> . exp_assignment
    (10) command -> . call
    (11) command -> . RETURN return SEMICOLON
    (12) command -> . BREAK SEMICOLON
    (13) command -> . CONTINUE SEMICOLON
    (22) interations -> . for
    (23) interations -> . dowhile
    (24) interations -> . while
    (14) if -> . IF LPAREN exp_condition RPAREN if_statement
    (62) exp_assignment -> . ID_SC EQUALS arithmetic
    (63) exp_assignment -> . ID_LI EQUALS arithmetic
    (64) exp_assignment -> . ID_SC
    (65) exp_assignment -> . ID_LI
    (66) exp_assignment -> . INCREMENT ID_SC
    (67) exp_assignment -> . DECREMENT ID_SC
    (68) exp_assignment -> . ID_SC INCREMENT
    (69) exp_assignment -> . ID_SC DECREMENT
    (92) call -> . ID LPAREN RPAREN
    (93) call -> . ID LPAREN function_assignments RPAREN
    (25) for -> . FOR LPAREN for_assignments SEMICOLON exp_condition SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (28) dowhile -> . DO LBRACE blockcode RBRACE WHILE LPAREN exp_condition RPAREN
    (29) while -> . WHILE LPAREN exp_condition RPAREN LBRACE blockcode RBRACE
    (30) while -> . WHILE LPAREN exp_condition RPAREN LBRACE RBRACE

    SUB             shift and go to state 5
    RETURN          shift and go to state 11
    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    IF              shift and go to state 17
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 21
    ID              shift and go to state 6
    FOR             shift and go to state 22
    DO              shift and go to state 23
    WHILE           shift and go to state 24

    init                           shift and go to state 1
    blockcode                      shift and go to state 2
    function                       shift and go to state 3
    command                        shift and go to state 4
    interations                    shift and go to state 7
    if                             shift and go to state 8
    exp_assignment                 shift and go to state 9
    call                           shift and go to state 10
    for                            shift and go to state 14
    dowhile                        shift and go to state 15
    while                          shift and go to state 16

state 1

    (0) S' -> init .



state 2

    (1) init -> blockcode . init
    (3) init -> blockcode .
    (1) init -> . blockcode init
    (2) init -> . function init
    (3) init -> . blockcode
    (4) init -> . function
    (5) blockcode -> . command
    (6) blockcode -> . command blockcode
    (31) function -> . SUB ID LPAREN RPAREN LBRACE blockcode RBRACE
    (32) function -> . SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE
    (7) command -> . interations
    (8) command -> . if
    (9) command -> . exp_assignment
    (10) command -> . call
    (11) command -> . RETURN return SEMICOLON
    (12) command -> . BREAK SEMICOLON
    (13) command -> . CONTINUE SEMICOLON
    (22) interations -> . for
    (23) interations -> . dowhile
    (24) interations -> . while
    (14) if -> . IF LPAREN exp_condition RPAREN if_statement
    (62) exp_assignment -> . ID_SC EQUALS arithmetic
    (63) exp_assignment -> . ID_LI EQUALS arithmetic
    (64) exp_assignment -> . ID_SC
    (65) exp_assignment -> . ID_LI
    (66) exp_assignment -> . INCREMENT ID_SC
    (67) exp_assignment -> . DECREMENT ID_SC
    (68) exp_assignment -> . ID_SC INCREMENT
    (69) exp_assignment -> . ID_SC DECREMENT
    (92) call -> . ID LPAREN RPAREN
    (93) call -> . ID LPAREN function_assignments RPAREN
    (25) for -> . FOR LPAREN for_assignments SEMICOLON exp_condition SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (28) dowhile -> . DO LBRACE blockcode RBRACE WHILE LPAREN exp_condition RPAREN
    (29) while -> . WHILE LPAREN exp_condition RPAREN LBRACE blockcode RBRACE
    (30) while -> . WHILE LPAREN exp_condition RPAREN LBRACE RBRACE

    $end            reduce using rule 3 (init -> blockcode .)
    SUB             shift and go to state 5
    RETURN          shift and go to state 11
    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    IF              shift and go to state 17
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 21
    ID              shift and go to state 6
    FOR             shift and go to state 22
    DO              shift and go to state 23
    WHILE           shift and go to state 24

    blockcode                      shift and go to state 2
    init                           shift and go to state 25
    function                       shift and go to state 3
    command                        shift and go to state 4
    interations                    shift and go to state 7
    if                             shift and go to state 8
    exp_assignment                 shift and go to state 9
    call                           shift and go to state 10
    for                            shift and go to state 14
    dowhile                        shift and go to state 15
    while                          shift and go to state 16

state 3

    (2) init -> function . init
    (4) init -> function .
    (1) init -> . blockcode init
    (2) init -> . function init
    (3) init -> . blockcode
    (4) init -> . function
    (5) blockcode -> . command
    (6) blockcode -> . command blockcode
    (31) function -> . SUB ID LPAREN RPAREN LBRACE blockcode RBRACE
    (32) function -> . SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE
    (7) command -> . interations
    (8) command -> . if
    (9) command -> . exp_assignment
    (10) command -> . call
    (11) command -> . RETURN return SEMICOLON
    (12) command -> . BREAK SEMICOLON
    (13) command -> . CONTINUE SEMICOLON
    (22) interations -> . for
    (23) interations -> . dowhile
    (24) interations -> . while
    (14) if -> . IF LPAREN exp_condition RPAREN if_statement
    (62) exp_assignment -> . ID_SC EQUALS arithmetic
    (63) exp_assignment -> . ID_LI EQUALS arithmetic
    (64) exp_assignment -> . ID_SC
    (65) exp_assignment -> . ID_LI
    (66) exp_assignment -> . INCREMENT ID_SC
    (67) exp_assignment -> . DECREMENT ID_SC
    (68) exp_assignment -> . ID_SC INCREMENT
    (69) exp_assignment -> . ID_SC DECREMENT
    (92) call -> . ID LPAREN RPAREN
    (93) call -> . ID LPAREN function_assignments RPAREN
    (25) for -> . FOR LPAREN for_assignments SEMICOLON exp_condition SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (28) dowhile -> . DO LBRACE blockcode RBRACE WHILE LPAREN exp_condition RPAREN
    (29) while -> . WHILE LPAREN exp_condition RPAREN LBRACE blockcode RBRACE
    (30) while -> . WHILE LPAREN exp_condition RPAREN LBRACE RBRACE

    $end            reduce using rule 4 (init -> function .)
    SUB             shift and go to state 5
    RETURN          shift and go to state 11
    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    IF              shift and go to state 17
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 21
    ID              shift and go to state 6
    FOR             shift and go to state 22
    DO              shift and go to state 23
    WHILE           shift and go to state 24

    function                       shift and go to state 3
    init                           shift and go to state 26
    blockcode                      shift and go to state 2
    command                        shift and go to state 4
    interations                    shift and go to state 7
    if                             shift and go to state 8
    exp_assignment                 shift and go to state 9
    call                           shift and go to state 10
    for                            shift and go to state 14
    dowhile                        shift and go to state 15
    while                          shift and go to state 16

state 4

    (5) blockcode -> command .
    (6) blockcode -> command . blockcode
    (5) blockcode -> . command
    (6) blockcode -> . command blockcode
    (7) command -> . interations
    (8) command -> . if
    (9) command -> . exp_assignment
    (10) command -> . call
    (11) command -> . RETURN return SEMICOLON
    (12) command -> . BREAK SEMICOLON
    (13) command -> . CONTINUE SEMICOLON
    (22) interations -> . for
    (23) interations -> . dowhile
    (24) interations -> . while
    (14) if -> . IF LPAREN exp_condition RPAREN if_statement
    (62) exp_assignment -> . ID_SC EQUALS arithmetic
    (63) exp_assignment -> . ID_LI EQUALS arithmetic
    (64) exp_assignment -> . ID_SC
    (65) exp_assignment -> . ID_LI
    (66) exp_assignment -> . INCREMENT ID_SC
    (67) exp_assignment -> . DECREMENT ID_SC
    (68) exp_assignment -> . ID_SC INCREMENT
    (69) exp_assignment -> . ID_SC DECREMENT
    (92) call -> . ID LPAREN RPAREN
    (93) call -> . ID LPAREN function_assignments RPAREN
    (25) for -> . FOR LPAREN for_assignments SEMICOLON exp_condition SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (28) dowhile -> . DO LBRACE blockcode RBRACE WHILE LPAREN exp_condition RPAREN
    (29) while -> . WHILE LPAREN exp_condition RPAREN LBRACE blockcode RBRACE
    (30) while -> . WHILE LPAREN exp_condition RPAREN LBRACE RBRACE

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID_SC resolved as shift
  ! shift/reduce conflict for ID_LI resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    SUB             reduce using rule 5 (blockcode -> command .)
    $end            reduce using rule 5 (blockcode -> command .)
    RBRACE          reduce using rule 5 (blockcode -> command .)
    RETURN          shift and go to state 11
    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    IF              shift and go to state 17
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 21
    ID              shift and go to state 6
    FOR             shift and go to state 22
    DO              shift and go to state 23
    WHILE           shift and go to state 24

  ! RETURN          [ reduce using rule 5 (blockcode -> command .) ]
  ! BREAK           [ reduce using rule 5 (blockcode -> command .) ]
  ! CONTINUE        [ reduce using rule 5 (blockcode -> command .) ]
  ! IF              [ reduce using rule 5 (blockcode -> command .) ]
  ! ID_SC           [ reduce using rule 5 (blockcode -> command .) ]
  ! ID_LI           [ reduce using rule 5 (blockcode -> command .) ]
  ! INCREMENT       [ reduce using rule 5 (blockcode -> command .) ]
  ! DECREMENT       [ reduce using rule 5 (blockcode -> command .) ]
  ! ID              [ reduce using rule 5 (blockcode -> command .) ]
  ! FOR             [ reduce using rule 5 (blockcode -> command .) ]
  ! DO              [ reduce using rule 5 (blockcode -> command .) ]
  ! WHILE           [ reduce using rule 5 (blockcode -> command .) ]

    command                        shift and go to state 4
    blockcode                      shift and go to state 27
    interations                    shift and go to state 7
    if                             shift and go to state 8
    exp_assignment                 shift and go to state 9
    call                           shift and go to state 10
    for                            shift and go to state 14
    dowhile                        shift and go to state 15
    while                          shift and go to state 16

state 5

    (31) function -> SUB . ID LPAREN RPAREN LBRACE blockcode RBRACE
    (32) function -> SUB . ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE

    ID              shift and go to state 28


state 6

    (92) call -> ID . LPAREN RPAREN
    (93) call -> ID . LPAREN function_assignments RPAREN

    LPAREN          shift and go to state 29


state 7

    (7) command -> interations .

    RETURN          reduce using rule 7 (command -> interations .)
    BREAK           reduce using rule 7 (command -> interations .)
    CONTINUE        reduce using rule 7 (command -> interations .)
    IF              reduce using rule 7 (command -> interations .)
    ID_SC           reduce using rule 7 (command -> interations .)
    ID_LI           reduce using rule 7 (command -> interations .)
    INCREMENT       reduce using rule 7 (command -> interations .)
    DECREMENT       reduce using rule 7 (command -> interations .)
    ID              reduce using rule 7 (command -> interations .)
    FOR             reduce using rule 7 (command -> interations .)
    DO              reduce using rule 7 (command -> interations .)
    WHILE           reduce using rule 7 (command -> interations .)
    SUB             reduce using rule 7 (command -> interations .)
    $end            reduce using rule 7 (command -> interations .)
    RBRACE          reduce using rule 7 (command -> interations .)


state 8

    (8) command -> if .

    RETURN          reduce using rule 8 (command -> if .)
    BREAK           reduce using rule 8 (command -> if .)
    CONTINUE        reduce using rule 8 (command -> if .)
    IF              reduce using rule 8 (command -> if .)
    ID_SC           reduce using rule 8 (command -> if .)
    ID_LI           reduce using rule 8 (command -> if .)
    INCREMENT       reduce using rule 8 (command -> if .)
    DECREMENT       reduce using rule 8 (command -> if .)
    ID              reduce using rule 8 (command -> if .)
    FOR             reduce using rule 8 (command -> if .)
    DO              reduce using rule 8 (command -> if .)
    WHILE           reduce using rule 8 (command -> if .)
    SUB             reduce using rule 8 (command -> if .)
    $end            reduce using rule 8 (command -> if .)
    RBRACE          reduce using rule 8 (command -> if .)


state 9

    (9) command -> exp_assignment .

    RETURN          reduce using rule 9 (command -> exp_assignment .)
    BREAK           reduce using rule 9 (command -> exp_assignment .)
    CONTINUE        reduce using rule 9 (command -> exp_assignment .)
    IF              reduce using rule 9 (command -> exp_assignment .)
    ID_SC           reduce using rule 9 (command -> exp_assignment .)
    ID_LI           reduce using rule 9 (command -> exp_assignment .)
    INCREMENT       reduce using rule 9 (command -> exp_assignment .)
    DECREMENT       reduce using rule 9 (command -> exp_assignment .)
    ID              reduce using rule 9 (command -> exp_assignment .)
    FOR             reduce using rule 9 (command -> exp_assignment .)
    DO              reduce using rule 9 (command -> exp_assignment .)
    WHILE           reduce using rule 9 (command -> exp_assignment .)
    SUB             reduce using rule 9 (command -> exp_assignment .)
    $end            reduce using rule 9 (command -> exp_assignment .)
    RBRACE          reduce using rule 9 (command -> exp_assignment .)


state 10

    (10) command -> call .

    RETURN          reduce using rule 10 (command -> call .)
    BREAK           reduce using rule 10 (command -> call .)
    CONTINUE        reduce using rule 10 (command -> call .)
    IF              reduce using rule 10 (command -> call .)
    ID_SC           reduce using rule 10 (command -> call .)
    ID_LI           reduce using rule 10 (command -> call .)
    INCREMENT       reduce using rule 10 (command -> call .)
    DECREMENT       reduce using rule 10 (command -> call .)
    ID              reduce using rule 10 (command -> call .)
    FOR             reduce using rule 10 (command -> call .)
    DO              reduce using rule 10 (command -> call .)
    WHILE           reduce using rule 10 (command -> call .)
    SUB             reduce using rule 10 (command -> call .)
    $end            reduce using rule 10 (command -> call .)
    RBRACE          reduce using rule 10 (command -> call .)


state 11

    (11) command -> RETURN . return SEMICOLON
    (94) return -> . attcond
    (95) return -> . arithmetic
    (88) attcond -> . exp_assignment
    (89) attcond -> . NUMBER
    (90) attcond -> . TRUE
    (91) attcond -> . FALSE
    (70) arithmetic -> . exp
    (62) exp_assignment -> . ID_SC EQUALS arithmetic
    (63) exp_assignment -> . ID_LI EQUALS arithmetic
    (64) exp_assignment -> . ID_SC
    (65) exp_assignment -> . ID_LI
    (66) exp_assignment -> . INCREMENT ID_SC
    (67) exp_assignment -> . DECREMENT ID_SC
    (68) exp_assignment -> . ID_SC INCREMENT
    (69) exp_assignment -> . ID_SC DECREMENT
    (71) exp -> . exp PLUS exp1
    (72) exp -> . exp MINUS exp1
    (73) exp -> . exp1
    (74) exp1 -> . exp1 TIMES exp2
    (75) exp1 -> . exp1 DIVIDE exp2
    (76) exp1 -> . exp1 MODULO exp2
    (77) exp1 -> . exp2
    (78) exp2 -> . exp3 XOR exp2
    (79) exp2 -> . exp3
    (80) exp3 -> . LPAREN arithmetic RPAREN
    (81) exp3 -> . NUMBER
    (82) exp3 -> . exp_assignment
    (83) exp3 -> . exp_condition
    (84) exp3 -> . call
    (85) exp3 -> . exp
    (86) exp3 -> . TRUE
    (87) exp3 -> . FALSE
    (35) exp_condition -> . exp_condition GT exp_condition_2
    (36) exp_condition -> . exp_condition LT exp_condition_2
    (37) exp_condition -> . exp_condition_2
    (92) call -> . ID LPAREN RPAREN
    (93) call -> . ID LPAREN function_assignments RPAREN
    (38) exp_condition_2 -> . exp_condition_2 GE exp_condition_3
    (39) exp_condition_2 -> . exp_condition_2 LE exp_condition_3
    (40) exp_condition_2 -> . exp_condition_3
    (41) exp_condition_3 -> . exp_condition_3 EQ exp_condition_4
    (42) exp_condition_3 -> . exp_condition_3 NE exp_condition_4
    (43) exp_condition_3 -> . exp_condition_4
    (44) exp_condition_4 -> . exp_condition_4 SGT exp_condition_5
    (45) exp_condition_4 -> . exp_condition_4 SLT exp_condition_5
    (46) exp_condition_4 -> . exp_condition_5
    (47) exp_condition_5 -> . exp_condition_5 SGE exp_condition_6
    (48) exp_condition_5 -> . exp_condition_5 SLE exp_condition_6
    (49) exp_condition_5 -> . exp_condition_6
    (50) exp_condition_6 -> . exp_condition_6 SEQ exp_condition_7
    (51) exp_condition_6 -> . exp_condition_6 SNE exp_condition_7
    (52) exp_condition_6 -> . exp_condition_7
    (53) exp_condition_7 -> . exp_condition_7 CMP exp_condition_8
    (54) exp_condition_7 -> . exp_condition_8
    (55) exp_condition_8 -> . attcond
    (56) exp_condition_8 -> . LPAREN exp_condition RPAREN logic exp_condition_logic

    NUMBER          shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 21
    LPAREN          shift and go to state 41
    ID              shift and go to state 6

    return                         shift and go to state 30
    attcond                        shift and go to state 31
    arithmetic                     shift and go to state 32
    exp_assignment                 shift and go to state 33
    exp                            shift and go to state 37
    exp1                           shift and go to state 38
    exp2                           shift and go to state 39
    exp3                           shift and go to state 40
    exp_condition                  shift and go to state 42
    call                           shift and go to state 43
    exp_condition_2                shift and go to state 44
    exp_condition_3                shift and go to state 45
    exp_condition_4                shift and go to state 46
    exp_condition_5                shift and go to state 47
    exp_condition_6                shift and go to state 48
    exp_condition_7                shift and go to state 49
    exp_condition_8                shift and go to state 50

state 12

    (12) command -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 51


state 13

    (13) command -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 52


state 14

    (22) interations -> for .

    RETURN          reduce using rule 22 (interations -> for .)
    BREAK           reduce using rule 22 (interations -> for .)
    CONTINUE        reduce using rule 22 (interations -> for .)
    IF              reduce using rule 22 (interations -> for .)
    ID_SC           reduce using rule 22 (interations -> for .)
    ID_LI           reduce using rule 22 (interations -> for .)
    INCREMENT       reduce using rule 22 (interations -> for .)
    DECREMENT       reduce using rule 22 (interations -> for .)
    ID              reduce using rule 22 (interations -> for .)
    FOR             reduce using rule 22 (interations -> for .)
    DO              reduce using rule 22 (interations -> for .)
    WHILE           reduce using rule 22 (interations -> for .)
    SUB             reduce using rule 22 (interations -> for .)
    $end            reduce using rule 22 (interations -> for .)
    RBRACE          reduce using rule 22 (interations -> for .)


state 15

    (23) interations -> dowhile .

    RETURN          reduce using rule 23 (interations -> dowhile .)
    BREAK           reduce using rule 23 (interations -> dowhile .)
    CONTINUE        reduce using rule 23 (interations -> dowhile .)
    IF              reduce using rule 23 (interations -> dowhile .)
    ID_SC           reduce using rule 23 (interations -> dowhile .)
    ID_LI           reduce using rule 23 (interations -> dowhile .)
    INCREMENT       reduce using rule 23 (interations -> dowhile .)
    DECREMENT       reduce using rule 23 (interations -> dowhile .)
    ID              reduce using rule 23 (interations -> dowhile .)
    FOR             reduce using rule 23 (interations -> dowhile .)
    DO              reduce using rule 23 (interations -> dowhile .)
    WHILE           reduce using rule 23 (interations -> dowhile .)
    SUB             reduce using rule 23 (interations -> dowhile .)
    $end            reduce using rule 23 (interations -> dowhile .)
    RBRACE          reduce using rule 23 (interations -> dowhile .)


state 16

    (24) interations -> while .

    RETURN          reduce using rule 24 (interations -> while .)
    BREAK           reduce using rule 24 (interations -> while .)
    CONTINUE        reduce using rule 24 (interations -> while .)
    IF              reduce using rule 24 (interations -> while .)
    ID_SC           reduce using rule 24 (interations -> while .)
    ID_LI           reduce using rule 24 (interations -> while .)
    INCREMENT       reduce using rule 24 (interations -> while .)
    DECREMENT       reduce using rule 24 (interations -> while .)
    ID              reduce using rule 24 (interations -> while .)
    FOR             reduce using rule 24 (interations -> while .)
    DO              reduce using rule 24 (interations -> while .)
    WHILE           reduce using rule 24 (interations -> while .)
    SUB             reduce using rule 24 (interations -> while .)
    $end            reduce using rule 24 (interations -> while .)
    RBRACE          reduce using rule 24 (interations -> while .)


state 17

    (14) if -> IF . LPAREN exp_condition RPAREN if_statement

    LPAREN          shift and go to state 53


state 18

    (62) exp_assignment -> ID_SC . EQUALS arithmetic
    (64) exp_assignment -> ID_SC .
    (68) exp_assignment -> ID_SC . INCREMENT
    (69) exp_assignment -> ID_SC . DECREMENT

  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
    EQUALS          shift and go to state 54
    RETURN          reduce using rule 64 (exp_assignment -> ID_SC .)
    BREAK           reduce using rule 64 (exp_assignment -> ID_SC .)
    CONTINUE        reduce using rule 64 (exp_assignment -> ID_SC .)
    IF              reduce using rule 64 (exp_assignment -> ID_SC .)
    ID_SC           reduce using rule 64 (exp_assignment -> ID_SC .)
    ID_LI           reduce using rule 64 (exp_assignment -> ID_SC .)
    ID              reduce using rule 64 (exp_assignment -> ID_SC .)
    FOR             reduce using rule 64 (exp_assignment -> ID_SC .)
    DO              reduce using rule 64 (exp_assignment -> ID_SC .)
    WHILE           reduce using rule 64 (exp_assignment -> ID_SC .)
    SUB             reduce using rule 64 (exp_assignment -> ID_SC .)
    $end            reduce using rule 64 (exp_assignment -> ID_SC .)
    RBRACE          reduce using rule 64 (exp_assignment -> ID_SC .)
    SEMICOLON       reduce using rule 64 (exp_assignment -> ID_SC .)
    CMP             reduce using rule 64 (exp_assignment -> ID_SC .)
    SEQ             reduce using rule 64 (exp_assignment -> ID_SC .)
    SNE             reduce using rule 64 (exp_assignment -> ID_SC .)
    SGE             reduce using rule 64 (exp_assignment -> ID_SC .)
    SLE             reduce using rule 64 (exp_assignment -> ID_SC .)
    SGT             reduce using rule 64 (exp_assignment -> ID_SC .)
    SLT             reduce using rule 64 (exp_assignment -> ID_SC .)
    EQ              reduce using rule 64 (exp_assignment -> ID_SC .)
    NE              reduce using rule 64 (exp_assignment -> ID_SC .)
    GE              reduce using rule 64 (exp_assignment -> ID_SC .)
    LE              reduce using rule 64 (exp_assignment -> ID_SC .)
    GT              reduce using rule 64 (exp_assignment -> ID_SC .)
    LT              reduce using rule 64 (exp_assignment -> ID_SC .)
    XOR             reduce using rule 64 (exp_assignment -> ID_SC .)
    TIMES           reduce using rule 64 (exp_assignment -> ID_SC .)
    DIVIDE          reduce using rule 64 (exp_assignment -> ID_SC .)
    MODULO          reduce using rule 64 (exp_assignment -> ID_SC .)
    PLUS            reduce using rule 64 (exp_assignment -> ID_SC .)
    MINUS           reduce using rule 64 (exp_assignment -> ID_SC .)
    COMMA           reduce using rule 64 (exp_assignment -> ID_SC .)
    RPAREN          reduce using rule 64 (exp_assignment -> ID_SC .)
    INCREMENT       shift and go to state 55
    DECREMENT       shift and go to state 56

  ! INCREMENT       [ reduce using rule 64 (exp_assignment -> ID_SC .) ]
  ! DECREMENT       [ reduce using rule 64 (exp_assignment -> ID_SC .) ]


state 19

    (63) exp_assignment -> ID_LI . EQUALS arithmetic
    (65) exp_assignment -> ID_LI .

    EQUALS          shift and go to state 57
    RETURN          reduce using rule 65 (exp_assignment -> ID_LI .)
    BREAK           reduce using rule 65 (exp_assignment -> ID_LI .)
    CONTINUE        reduce using rule 65 (exp_assignment -> ID_LI .)
    IF              reduce using rule 65 (exp_assignment -> ID_LI .)
    ID_SC           reduce using rule 65 (exp_assignment -> ID_LI .)
    ID_LI           reduce using rule 65 (exp_assignment -> ID_LI .)
    INCREMENT       reduce using rule 65 (exp_assignment -> ID_LI .)
    DECREMENT       reduce using rule 65 (exp_assignment -> ID_LI .)
    ID              reduce using rule 65 (exp_assignment -> ID_LI .)
    FOR             reduce using rule 65 (exp_assignment -> ID_LI .)
    DO              reduce using rule 65 (exp_assignment -> ID_LI .)
    WHILE           reduce using rule 65 (exp_assignment -> ID_LI .)
    SUB             reduce using rule 65 (exp_assignment -> ID_LI .)
    $end            reduce using rule 65 (exp_assignment -> ID_LI .)
    RBRACE          reduce using rule 65 (exp_assignment -> ID_LI .)
    SEMICOLON       reduce using rule 65 (exp_assignment -> ID_LI .)
    CMP             reduce using rule 65 (exp_assignment -> ID_LI .)
    SEQ             reduce using rule 65 (exp_assignment -> ID_LI .)
    SNE             reduce using rule 65 (exp_assignment -> ID_LI .)
    SGE             reduce using rule 65 (exp_assignment -> ID_LI .)
    SLE             reduce using rule 65 (exp_assignment -> ID_LI .)
    SGT             reduce using rule 65 (exp_assignment -> ID_LI .)
    SLT             reduce using rule 65 (exp_assignment -> ID_LI .)
    EQ              reduce using rule 65 (exp_assignment -> ID_LI .)
    NE              reduce using rule 65 (exp_assignment -> ID_LI .)
    GE              reduce using rule 65 (exp_assignment -> ID_LI .)
    LE              reduce using rule 65 (exp_assignment -> ID_LI .)
    GT              reduce using rule 65 (exp_assignment -> ID_LI .)
    LT              reduce using rule 65 (exp_assignment -> ID_LI .)
    XOR             reduce using rule 65 (exp_assignment -> ID_LI .)
    TIMES           reduce using rule 65 (exp_assignment -> ID_LI .)
    DIVIDE          reduce using rule 65 (exp_assignment -> ID_LI .)
    MODULO          reduce using rule 65 (exp_assignment -> ID_LI .)
    PLUS            reduce using rule 65 (exp_assignment -> ID_LI .)
    MINUS           reduce using rule 65 (exp_assignment -> ID_LI .)
    COMMA           reduce using rule 65 (exp_assignment -> ID_LI .)
    RPAREN          reduce using rule 65 (exp_assignment -> ID_LI .)


state 20

    (66) exp_assignment -> INCREMENT . ID_SC

    ID_SC           shift and go to state 58


state 21

    (67) exp_assignment -> DECREMENT . ID_SC

    ID_SC           shift and go to state 59


state 22

    (25) for -> FOR . LPAREN for_assignments SEMICOLON exp_condition SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE

    LPAREN          shift and go to state 60


state 23

    (28) dowhile -> DO . LBRACE blockcode RBRACE WHILE LPAREN exp_condition RPAREN

    LBRACE          shift and go to state 61


state 24

    (29) while -> WHILE . LPAREN exp_condition RPAREN LBRACE blockcode RBRACE
    (30) while -> WHILE . LPAREN exp_condition RPAREN LBRACE RBRACE

    LPAREN          shift and go to state 62


state 25

    (1) init -> blockcode init .

    $end            reduce using rule 1 (init -> blockcode init .)


state 26

    (2) init -> function init .

    $end            reduce using rule 2 (init -> function init .)


state 27

    (6) blockcode -> command blockcode .

    SUB             reduce using rule 6 (blockcode -> command blockcode .)
    RETURN          reduce using rule 6 (blockcode -> command blockcode .)
    BREAK           reduce using rule 6 (blockcode -> command blockcode .)
    CONTINUE        reduce using rule 6 (blockcode -> command blockcode .)
    IF              reduce using rule 6 (blockcode -> command blockcode .)
    ID_SC           reduce using rule 6 (blockcode -> command blockcode .)
    ID_LI           reduce using rule 6 (blockcode -> command blockcode .)
    INCREMENT       reduce using rule 6 (blockcode -> command blockcode .)
    DECREMENT       reduce using rule 6 (blockcode -> command blockcode .)
    ID              reduce using rule 6 (blockcode -> command blockcode .)
    FOR             reduce using rule 6 (blockcode -> command blockcode .)
    DO              reduce using rule 6 (blockcode -> command blockcode .)
    WHILE           reduce using rule 6 (blockcode -> command blockcode .)
    $end            reduce using rule 6 (blockcode -> command blockcode .)
    RBRACE          reduce using rule 6 (blockcode -> command blockcode .)


state 28

    (31) function -> SUB ID . LPAREN RPAREN LBRACE blockcode RBRACE
    (32) function -> SUB ID . LPAREN function_assignments RPAREN LBRACE blockcode RBRACE

    LPAREN          shift and go to state 63


state 29

    (92) call -> ID LPAREN . RPAREN
    (93) call -> ID LPAREN . function_assignments RPAREN
    (33) function_assignments -> . exp_assignment
    (34) function_assignments -> . exp_assignment COMMA function_assignments
    (62) exp_assignment -> . ID_SC EQUALS arithmetic
    (63) exp_assignment -> . ID_LI EQUALS arithmetic
    (64) exp_assignment -> . ID_SC
    (65) exp_assignment -> . ID_LI
    (66) exp_assignment -> . INCREMENT ID_SC
    (67) exp_assignment -> . DECREMENT ID_SC
    (68) exp_assignment -> . ID_SC INCREMENT
    (69) exp_assignment -> . ID_SC DECREMENT

    RPAREN          shift and go to state 64
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 21

    function_assignments           shift and go to state 65
    exp_assignment                 shift and go to state 66

state 30

    (11) command -> RETURN return . SEMICOLON

    SEMICOLON       shift and go to state 67


state 31

    (94) return -> attcond .
    (55) exp_condition_8 -> attcond .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 55 (exp_condition_8 -> attcond .)
    CMP             reduce using rule 55 (exp_condition_8 -> attcond .)
    SEQ             reduce using rule 55 (exp_condition_8 -> attcond .)
    SNE             reduce using rule 55 (exp_condition_8 -> attcond .)
    SGE             reduce using rule 55 (exp_condition_8 -> attcond .)
    SLE             reduce using rule 55 (exp_condition_8 -> attcond .)
    SGT             reduce using rule 55 (exp_condition_8 -> attcond .)
    SLT             reduce using rule 55 (exp_condition_8 -> attcond .)
    EQ              reduce using rule 55 (exp_condition_8 -> attcond .)
    NE              reduce using rule 55 (exp_condition_8 -> attcond .)
    GE              reduce using rule 55 (exp_condition_8 -> attcond .)
    LE              reduce using rule 55 (exp_condition_8 -> attcond .)
    GT              reduce using rule 55 (exp_condition_8 -> attcond .)
    LT              reduce using rule 55 (exp_condition_8 -> attcond .)
    XOR             reduce using rule 55 (exp_condition_8 -> attcond .)
    TIMES           reduce using rule 55 (exp_condition_8 -> attcond .)
    DIVIDE          reduce using rule 55 (exp_condition_8 -> attcond .)
    MODULO          reduce using rule 55 (exp_condition_8 -> attcond .)
    PLUS            reduce using rule 55 (exp_condition_8 -> attcond .)
    MINUS           reduce using rule 55 (exp_condition_8 -> attcond .)
    SEMICOLON       reduce using rule 55 (exp_condition_8 -> attcond .)

  ! SEMICOLON       [ reduce using rule 94 (return -> attcond .) ]


state 32

    (95) return -> arithmetic .

    SEMICOLON       reduce using rule 95 (return -> arithmetic .)


state 33

    (88) attcond -> exp_assignment .
    (82) exp3 -> exp_assignment .

  ! reduce/reduce conflict for XOR resolved using rule 82 (exp3 -> exp_assignment .)
  ! reduce/reduce conflict for TIMES resolved using rule 82 (exp3 -> exp_assignment .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 82 (exp3 -> exp_assignment .)
  ! reduce/reduce conflict for MODULO resolved using rule 82 (exp3 -> exp_assignment .)
  ! reduce/reduce conflict for PLUS resolved using rule 82 (exp3 -> exp_assignment .)
  ! reduce/reduce conflict for MINUS resolved using rule 82 (exp3 -> exp_assignment .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 82 (exp3 -> exp_assignment .)
    CMP             reduce using rule 88 (attcond -> exp_assignment .)
    SEQ             reduce using rule 88 (attcond -> exp_assignment .)
    SNE             reduce using rule 88 (attcond -> exp_assignment .)
    SGE             reduce using rule 88 (attcond -> exp_assignment .)
    SLE             reduce using rule 88 (attcond -> exp_assignment .)
    SGT             reduce using rule 88 (attcond -> exp_assignment .)
    SLT             reduce using rule 88 (attcond -> exp_assignment .)
    EQ              reduce using rule 88 (attcond -> exp_assignment .)
    NE              reduce using rule 88 (attcond -> exp_assignment .)
    GE              reduce using rule 88 (attcond -> exp_assignment .)
    LE              reduce using rule 88 (attcond -> exp_assignment .)
    GT              reduce using rule 88 (attcond -> exp_assignment .)
    LT              reduce using rule 88 (attcond -> exp_assignment .)
    XOR             reduce using rule 82 (exp3 -> exp_assignment .)
    TIMES           reduce using rule 82 (exp3 -> exp_assignment .)
    DIVIDE          reduce using rule 82 (exp3 -> exp_assignment .)
    MODULO          reduce using rule 82 (exp3 -> exp_assignment .)
    PLUS            reduce using rule 82 (exp3 -> exp_assignment .)
    MINUS           reduce using rule 82 (exp3 -> exp_assignment .)
    SEMICOLON       reduce using rule 82 (exp3 -> exp_assignment .)

  ! SEMICOLON       [ reduce using rule 88 (attcond -> exp_assignment .) ]
  ! XOR             [ reduce using rule 88 (attcond -> exp_assignment .) ]
  ! TIMES           [ reduce using rule 88 (attcond -> exp_assignment .) ]
  ! DIVIDE          [ reduce using rule 88 (attcond -> exp_assignment .) ]
  ! MODULO          [ reduce using rule 88 (attcond -> exp_assignment .) ]
  ! PLUS            [ reduce using rule 88 (attcond -> exp_assignment .) ]
  ! MINUS           [ reduce using rule 88 (attcond -> exp_assignment .) ]


state 34

    (89) attcond -> NUMBER .
    (81) exp3 -> NUMBER .

  ! reduce/reduce conflict for XOR resolved using rule 81 (exp3 -> NUMBER .)
  ! reduce/reduce conflict for TIMES resolved using rule 81 (exp3 -> NUMBER .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 81 (exp3 -> NUMBER .)
  ! reduce/reduce conflict for MODULO resolved using rule 81 (exp3 -> NUMBER .)
  ! reduce/reduce conflict for PLUS resolved using rule 81 (exp3 -> NUMBER .)
  ! reduce/reduce conflict for MINUS resolved using rule 81 (exp3 -> NUMBER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 81 (exp3 -> NUMBER .)
    CMP             reduce using rule 89 (attcond -> NUMBER .)
    SEQ             reduce using rule 89 (attcond -> NUMBER .)
    SNE             reduce using rule 89 (attcond -> NUMBER .)
    SGE             reduce using rule 89 (attcond -> NUMBER .)
    SLE             reduce using rule 89 (attcond -> NUMBER .)
    SGT             reduce using rule 89 (attcond -> NUMBER .)
    SLT             reduce using rule 89 (attcond -> NUMBER .)
    EQ              reduce using rule 89 (attcond -> NUMBER .)
    NE              reduce using rule 89 (attcond -> NUMBER .)
    GE              reduce using rule 89 (attcond -> NUMBER .)
    LE              reduce using rule 89 (attcond -> NUMBER .)
    GT              reduce using rule 89 (attcond -> NUMBER .)
    LT              reduce using rule 89 (attcond -> NUMBER .)
    XOR             reduce using rule 81 (exp3 -> NUMBER .)
    TIMES           reduce using rule 81 (exp3 -> NUMBER .)
    DIVIDE          reduce using rule 81 (exp3 -> NUMBER .)
    MODULO          reduce using rule 81 (exp3 -> NUMBER .)
    PLUS            reduce using rule 81 (exp3 -> NUMBER .)
    MINUS           reduce using rule 81 (exp3 -> NUMBER .)
    SEMICOLON       reduce using rule 81 (exp3 -> NUMBER .)

  ! SEMICOLON       [ reduce using rule 89 (attcond -> NUMBER .) ]
  ! XOR             [ reduce using rule 89 (attcond -> NUMBER .) ]
  ! TIMES           [ reduce using rule 89 (attcond -> NUMBER .) ]
  ! DIVIDE          [ reduce using rule 89 (attcond -> NUMBER .) ]
  ! MODULO          [ reduce using rule 89 (attcond -> NUMBER .) ]
  ! PLUS            [ reduce using rule 89 (attcond -> NUMBER .) ]
  ! MINUS           [ reduce using rule 89 (attcond -> NUMBER .) ]


state 35

    (90) attcond -> TRUE .
    (86) exp3 -> TRUE .

  ! reduce/reduce conflict for XOR resolved using rule 86 (exp3 -> TRUE .)
  ! reduce/reduce conflict for TIMES resolved using rule 86 (exp3 -> TRUE .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 86 (exp3 -> TRUE .)
  ! reduce/reduce conflict for MODULO resolved using rule 86 (exp3 -> TRUE .)
  ! reduce/reduce conflict for PLUS resolved using rule 86 (exp3 -> TRUE .)
  ! reduce/reduce conflict for MINUS resolved using rule 86 (exp3 -> TRUE .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 86 (exp3 -> TRUE .)
    CMP             reduce using rule 90 (attcond -> TRUE .)
    SEQ             reduce using rule 90 (attcond -> TRUE .)
    SNE             reduce using rule 90 (attcond -> TRUE .)
    SGE             reduce using rule 90 (attcond -> TRUE .)
    SLE             reduce using rule 90 (attcond -> TRUE .)
    SGT             reduce using rule 90 (attcond -> TRUE .)
    SLT             reduce using rule 90 (attcond -> TRUE .)
    EQ              reduce using rule 90 (attcond -> TRUE .)
    NE              reduce using rule 90 (attcond -> TRUE .)
    GE              reduce using rule 90 (attcond -> TRUE .)
    LE              reduce using rule 90 (attcond -> TRUE .)
    GT              reduce using rule 90 (attcond -> TRUE .)
    LT              reduce using rule 90 (attcond -> TRUE .)
    XOR             reduce using rule 86 (exp3 -> TRUE .)
    TIMES           reduce using rule 86 (exp3 -> TRUE .)
    DIVIDE          reduce using rule 86 (exp3 -> TRUE .)
    MODULO          reduce using rule 86 (exp3 -> TRUE .)
    PLUS            reduce using rule 86 (exp3 -> TRUE .)
    MINUS           reduce using rule 86 (exp3 -> TRUE .)
    SEMICOLON       reduce using rule 86 (exp3 -> TRUE .)

  ! SEMICOLON       [ reduce using rule 90 (attcond -> TRUE .) ]
  ! XOR             [ reduce using rule 90 (attcond -> TRUE .) ]
  ! TIMES           [ reduce using rule 90 (attcond -> TRUE .) ]
  ! DIVIDE          [ reduce using rule 90 (attcond -> TRUE .) ]
  ! MODULO          [ reduce using rule 90 (attcond -> TRUE .) ]
  ! PLUS            [ reduce using rule 90 (attcond -> TRUE .) ]
  ! MINUS           [ reduce using rule 90 (attcond -> TRUE .) ]


state 36

    (91) attcond -> FALSE .
    (87) exp3 -> FALSE .

  ! reduce/reduce conflict for XOR resolved using rule 87 (exp3 -> FALSE .)
  ! reduce/reduce conflict for TIMES resolved using rule 87 (exp3 -> FALSE .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 87 (exp3 -> FALSE .)
  ! reduce/reduce conflict for MODULO resolved using rule 87 (exp3 -> FALSE .)
  ! reduce/reduce conflict for PLUS resolved using rule 87 (exp3 -> FALSE .)
  ! reduce/reduce conflict for MINUS resolved using rule 87 (exp3 -> FALSE .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 87 (exp3 -> FALSE .)
    CMP             reduce using rule 91 (attcond -> FALSE .)
    SEQ             reduce using rule 91 (attcond -> FALSE .)
    SNE             reduce using rule 91 (attcond -> FALSE .)
    SGE             reduce using rule 91 (attcond -> FALSE .)
    SLE             reduce using rule 91 (attcond -> FALSE .)
    SGT             reduce using rule 91 (attcond -> FALSE .)
    SLT             reduce using rule 91 (attcond -> FALSE .)
    EQ              reduce using rule 91 (attcond -> FALSE .)
    NE              reduce using rule 91 (attcond -> FALSE .)
    GE              reduce using rule 91 (attcond -> FALSE .)
    LE              reduce using rule 91 (attcond -> FALSE .)
    GT              reduce using rule 91 (attcond -> FALSE .)
    LT              reduce using rule 91 (attcond -> FALSE .)
    XOR             reduce using rule 87 (exp3 -> FALSE .)
    TIMES           reduce using rule 87 (exp3 -> FALSE .)
    DIVIDE          reduce using rule 87 (exp3 -> FALSE .)
    MODULO          reduce using rule 87 (exp3 -> FALSE .)
    PLUS            reduce using rule 87 (exp3 -> FALSE .)
    MINUS           reduce using rule 87 (exp3 -> FALSE .)
    SEMICOLON       reduce using rule 87 (exp3 -> FALSE .)

  ! SEMICOLON       [ reduce using rule 91 (attcond -> FALSE .) ]
  ! XOR             [ reduce using rule 91 (attcond -> FALSE .) ]
  ! TIMES           [ reduce using rule 91 (attcond -> FALSE .) ]
  ! DIVIDE          [ reduce using rule 91 (attcond -> FALSE .) ]
  ! MODULO          [ reduce using rule 91 (attcond -> FALSE .) ]
  ! PLUS            [ reduce using rule 91 (attcond -> FALSE .) ]
  ! MINUS           [ reduce using rule 91 (attcond -> FALSE .) ]


state 37

    (70) arithmetic -> exp .
    (71) exp -> exp . PLUS exp1
    (72) exp -> exp . MINUS exp1
    (85) exp3 -> exp .

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! reduce/reduce conflict for XOR resolved using rule 70 (arithmetic -> exp .)
  ! reduce/reduce conflict for TIMES resolved using rule 70 (arithmetic -> exp .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 70 (arithmetic -> exp .)
  ! reduce/reduce conflict for MODULO resolved using rule 70 (arithmetic -> exp .)
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! reduce/reduce conflict for SEMICOLON resolved using rule 70 (arithmetic -> exp .)
  ! reduce/reduce conflict for RPAREN resolved using rule 70 (arithmetic -> exp .)
  ! reduce/reduce conflict for RETURN resolved using rule 70 (arithmetic -> exp .)
  ! reduce/reduce conflict for BREAK resolved using rule 70 (arithmetic -> exp .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 70 (arithmetic -> exp .)
  ! reduce/reduce conflict for IF resolved using rule 70 (arithmetic -> exp .)
  ! reduce/reduce conflict for ID_SC resolved using rule 70 (arithmetic -> exp .)
  ! reduce/reduce conflict for ID_LI resolved using rule 70 (arithmetic -> exp .)
  ! reduce/reduce conflict for INCREMENT resolved using rule 70 (arithmetic -> exp .)
  ! reduce/reduce conflict for DECREMENT resolved using rule 70 (arithmetic -> exp .)
  ! reduce/reduce conflict for ID resolved using rule 70 (arithmetic -> exp .)
  ! reduce/reduce conflict for FOR resolved using rule 70 (arithmetic -> exp .)
  ! reduce/reduce conflict for DO resolved using rule 70 (arithmetic -> exp .)
  ! reduce/reduce conflict for WHILE resolved using rule 70 (arithmetic -> exp .)
  ! reduce/reduce conflict for SUB resolved using rule 70 (arithmetic -> exp .)
  ! reduce/reduce conflict for $end resolved using rule 70 (arithmetic -> exp .)
  ! reduce/reduce conflict for RBRACE resolved using rule 70 (arithmetic -> exp .)
  ! reduce/reduce conflict for CMP resolved using rule 70 (arithmetic -> exp .)
  ! reduce/reduce conflict for SEQ resolved using rule 70 (arithmetic -> exp .)
  ! reduce/reduce conflict for SNE resolved using rule 70 (arithmetic -> exp .)
  ! reduce/reduce conflict for SGE resolved using rule 70 (arithmetic -> exp .)
  ! reduce/reduce conflict for SLE resolved using rule 70 (arithmetic -> exp .)
  ! reduce/reduce conflict for SGT resolved using rule 70 (arithmetic -> exp .)
  ! reduce/reduce conflict for SLT resolved using rule 70 (arithmetic -> exp .)
  ! reduce/reduce conflict for EQ resolved using rule 70 (arithmetic -> exp .)
  ! reduce/reduce conflict for NE resolved using rule 70 (arithmetic -> exp .)
  ! reduce/reduce conflict for GE resolved using rule 70 (arithmetic -> exp .)
  ! reduce/reduce conflict for LE resolved using rule 70 (arithmetic -> exp .)
  ! reduce/reduce conflict for GT resolved using rule 70 (arithmetic -> exp .)
  ! reduce/reduce conflict for LT resolved using rule 70 (arithmetic -> exp .)
  ! reduce/reduce conflict for COMMA resolved using rule 70 (arithmetic -> exp .)
    SEMICOLON       reduce using rule 70 (arithmetic -> exp .)
    RPAREN          reduce using rule 70 (arithmetic -> exp .)
    RETURN          reduce using rule 70 (arithmetic -> exp .)
    BREAK           reduce using rule 70 (arithmetic -> exp .)
    CONTINUE        reduce using rule 70 (arithmetic -> exp .)
    IF              reduce using rule 70 (arithmetic -> exp .)
    ID_SC           reduce using rule 70 (arithmetic -> exp .)
    ID_LI           reduce using rule 70 (arithmetic -> exp .)
    INCREMENT       reduce using rule 70 (arithmetic -> exp .)
    DECREMENT       reduce using rule 70 (arithmetic -> exp .)
    ID              reduce using rule 70 (arithmetic -> exp .)
    FOR             reduce using rule 70 (arithmetic -> exp .)
    DO              reduce using rule 70 (arithmetic -> exp .)
    WHILE           reduce using rule 70 (arithmetic -> exp .)
    SUB             reduce using rule 70 (arithmetic -> exp .)
    $end            reduce using rule 70 (arithmetic -> exp .)
    RBRACE          reduce using rule 70 (arithmetic -> exp .)
    CMP             reduce using rule 70 (arithmetic -> exp .)
    SEQ             reduce using rule 70 (arithmetic -> exp .)
    SNE             reduce using rule 70 (arithmetic -> exp .)
    SGE             reduce using rule 70 (arithmetic -> exp .)
    SLE             reduce using rule 70 (arithmetic -> exp .)
    SGT             reduce using rule 70 (arithmetic -> exp .)
    SLT             reduce using rule 70 (arithmetic -> exp .)
    EQ              reduce using rule 70 (arithmetic -> exp .)
    NE              reduce using rule 70 (arithmetic -> exp .)
    GE              reduce using rule 70 (arithmetic -> exp .)
    LE              reduce using rule 70 (arithmetic -> exp .)
    GT              reduce using rule 70 (arithmetic -> exp .)
    LT              reduce using rule 70 (arithmetic -> exp .)
    XOR             reduce using rule 70 (arithmetic -> exp .)
    TIMES           reduce using rule 70 (arithmetic -> exp .)
    DIVIDE          reduce using rule 70 (arithmetic -> exp .)
    MODULO          reduce using rule 70 (arithmetic -> exp .)
    COMMA           reduce using rule 70 (arithmetic -> exp .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69

  ! PLUS            [ reduce using rule 70 (arithmetic -> exp .) ]
  ! MINUS           [ reduce using rule 70 (arithmetic -> exp .) ]
  ! XOR             [ reduce using rule 85 (exp3 -> exp .) ]
  ! TIMES           [ reduce using rule 85 (exp3 -> exp .) ]
  ! DIVIDE          [ reduce using rule 85 (exp3 -> exp .) ]
  ! MODULO          [ reduce using rule 85 (exp3 -> exp .) ]
  ! PLUS            [ reduce using rule 85 (exp3 -> exp .) ]
  ! MINUS           [ reduce using rule 85 (exp3 -> exp .) ]
  ! SEMICOLON       [ reduce using rule 85 (exp3 -> exp .) ]
  ! RPAREN          [ reduce using rule 85 (exp3 -> exp .) ]
  ! RETURN          [ reduce using rule 85 (exp3 -> exp .) ]
  ! BREAK           [ reduce using rule 85 (exp3 -> exp .) ]
  ! CONTINUE        [ reduce using rule 85 (exp3 -> exp .) ]
  ! IF              [ reduce using rule 85 (exp3 -> exp .) ]
  ! ID_SC           [ reduce using rule 85 (exp3 -> exp .) ]
  ! ID_LI           [ reduce using rule 85 (exp3 -> exp .) ]
  ! INCREMENT       [ reduce using rule 85 (exp3 -> exp .) ]
  ! DECREMENT       [ reduce using rule 85 (exp3 -> exp .) ]
  ! ID              [ reduce using rule 85 (exp3 -> exp .) ]
  ! FOR             [ reduce using rule 85 (exp3 -> exp .) ]
  ! DO              [ reduce using rule 85 (exp3 -> exp .) ]
  ! WHILE           [ reduce using rule 85 (exp3 -> exp .) ]
  ! SUB             [ reduce using rule 85 (exp3 -> exp .) ]
  ! $end            [ reduce using rule 85 (exp3 -> exp .) ]
  ! RBRACE          [ reduce using rule 85 (exp3 -> exp .) ]
  ! CMP             [ reduce using rule 85 (exp3 -> exp .) ]
  ! SEQ             [ reduce using rule 85 (exp3 -> exp .) ]
  ! SNE             [ reduce using rule 85 (exp3 -> exp .) ]
  ! SGE             [ reduce using rule 85 (exp3 -> exp .) ]
  ! SLE             [ reduce using rule 85 (exp3 -> exp .) ]
  ! SGT             [ reduce using rule 85 (exp3 -> exp .) ]
  ! SLT             [ reduce using rule 85 (exp3 -> exp .) ]
  ! EQ              [ reduce using rule 85 (exp3 -> exp .) ]
  ! NE              [ reduce using rule 85 (exp3 -> exp .) ]
  ! GE              [ reduce using rule 85 (exp3 -> exp .) ]
  ! LE              [ reduce using rule 85 (exp3 -> exp .) ]
  ! GT              [ reduce using rule 85 (exp3 -> exp .) ]
  ! LT              [ reduce using rule 85 (exp3 -> exp .) ]
  ! COMMA           [ reduce using rule 85 (exp3 -> exp .) ]


state 38

    (73) exp -> exp1 .
    (74) exp1 -> exp1 . TIMES exp2
    (75) exp1 -> exp1 . DIVIDE exp2
    (76) exp1 -> exp1 . MODULO exp2

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    XOR             reduce using rule 73 (exp -> exp1 .)
    PLUS            reduce using rule 73 (exp -> exp1 .)
    MINUS           reduce using rule 73 (exp -> exp1 .)
    SEMICOLON       reduce using rule 73 (exp -> exp1 .)
    RPAREN          reduce using rule 73 (exp -> exp1 .)
    RETURN          reduce using rule 73 (exp -> exp1 .)
    BREAK           reduce using rule 73 (exp -> exp1 .)
    CONTINUE        reduce using rule 73 (exp -> exp1 .)
    IF              reduce using rule 73 (exp -> exp1 .)
    ID_SC           reduce using rule 73 (exp -> exp1 .)
    ID_LI           reduce using rule 73 (exp -> exp1 .)
    INCREMENT       reduce using rule 73 (exp -> exp1 .)
    DECREMENT       reduce using rule 73 (exp -> exp1 .)
    ID              reduce using rule 73 (exp -> exp1 .)
    FOR             reduce using rule 73 (exp -> exp1 .)
    DO              reduce using rule 73 (exp -> exp1 .)
    WHILE           reduce using rule 73 (exp -> exp1 .)
    SUB             reduce using rule 73 (exp -> exp1 .)
    $end            reduce using rule 73 (exp -> exp1 .)
    RBRACE          reduce using rule 73 (exp -> exp1 .)
    CMP             reduce using rule 73 (exp -> exp1 .)
    SEQ             reduce using rule 73 (exp -> exp1 .)
    SNE             reduce using rule 73 (exp -> exp1 .)
    SGE             reduce using rule 73 (exp -> exp1 .)
    SLE             reduce using rule 73 (exp -> exp1 .)
    SGT             reduce using rule 73 (exp -> exp1 .)
    SLT             reduce using rule 73 (exp -> exp1 .)
    EQ              reduce using rule 73 (exp -> exp1 .)
    NE              reduce using rule 73 (exp -> exp1 .)
    GE              reduce using rule 73 (exp -> exp1 .)
    LE              reduce using rule 73 (exp -> exp1 .)
    GT              reduce using rule 73 (exp -> exp1 .)
    LT              reduce using rule 73 (exp -> exp1 .)
    COMMA           reduce using rule 73 (exp -> exp1 .)
    TIMES           shift and go to state 70
    DIVIDE          shift and go to state 71
    MODULO          shift and go to state 72

  ! TIMES           [ reduce using rule 73 (exp -> exp1 .) ]
  ! DIVIDE          [ reduce using rule 73 (exp -> exp1 .) ]
  ! MODULO          [ reduce using rule 73 (exp -> exp1 .) ]


state 39

    (77) exp1 -> exp2 .

    XOR             reduce using rule 77 (exp1 -> exp2 .)
    TIMES           reduce using rule 77 (exp1 -> exp2 .)
    DIVIDE          reduce using rule 77 (exp1 -> exp2 .)
    MODULO          reduce using rule 77 (exp1 -> exp2 .)
    PLUS            reduce using rule 77 (exp1 -> exp2 .)
    MINUS           reduce using rule 77 (exp1 -> exp2 .)
    SEMICOLON       reduce using rule 77 (exp1 -> exp2 .)
    RPAREN          reduce using rule 77 (exp1 -> exp2 .)
    RETURN          reduce using rule 77 (exp1 -> exp2 .)
    BREAK           reduce using rule 77 (exp1 -> exp2 .)
    CONTINUE        reduce using rule 77 (exp1 -> exp2 .)
    IF              reduce using rule 77 (exp1 -> exp2 .)
    ID_SC           reduce using rule 77 (exp1 -> exp2 .)
    ID_LI           reduce using rule 77 (exp1 -> exp2 .)
    INCREMENT       reduce using rule 77 (exp1 -> exp2 .)
    DECREMENT       reduce using rule 77 (exp1 -> exp2 .)
    ID              reduce using rule 77 (exp1 -> exp2 .)
    FOR             reduce using rule 77 (exp1 -> exp2 .)
    DO              reduce using rule 77 (exp1 -> exp2 .)
    WHILE           reduce using rule 77 (exp1 -> exp2 .)
    SUB             reduce using rule 77 (exp1 -> exp2 .)
    $end            reduce using rule 77 (exp1 -> exp2 .)
    RBRACE          reduce using rule 77 (exp1 -> exp2 .)
    CMP             reduce using rule 77 (exp1 -> exp2 .)
    SEQ             reduce using rule 77 (exp1 -> exp2 .)
    SNE             reduce using rule 77 (exp1 -> exp2 .)
    SGE             reduce using rule 77 (exp1 -> exp2 .)
    SLE             reduce using rule 77 (exp1 -> exp2 .)
    SGT             reduce using rule 77 (exp1 -> exp2 .)
    SLT             reduce using rule 77 (exp1 -> exp2 .)
    EQ              reduce using rule 77 (exp1 -> exp2 .)
    NE              reduce using rule 77 (exp1 -> exp2 .)
    GE              reduce using rule 77 (exp1 -> exp2 .)
    LE              reduce using rule 77 (exp1 -> exp2 .)
    GT              reduce using rule 77 (exp1 -> exp2 .)
    LT              reduce using rule 77 (exp1 -> exp2 .)
    COMMA           reduce using rule 77 (exp1 -> exp2 .)


state 40

    (78) exp2 -> exp3 . XOR exp2
    (79) exp2 -> exp3 .

  ! shift/reduce conflict for XOR resolved as shift
    XOR             shift and go to state 73
    TIMES           reduce using rule 79 (exp2 -> exp3 .)
    DIVIDE          reduce using rule 79 (exp2 -> exp3 .)
    MODULO          reduce using rule 79 (exp2 -> exp3 .)
    PLUS            reduce using rule 79 (exp2 -> exp3 .)
    MINUS           reduce using rule 79 (exp2 -> exp3 .)
    SEMICOLON       reduce using rule 79 (exp2 -> exp3 .)
    RPAREN          reduce using rule 79 (exp2 -> exp3 .)
    RETURN          reduce using rule 79 (exp2 -> exp3 .)
    BREAK           reduce using rule 79 (exp2 -> exp3 .)
    CONTINUE        reduce using rule 79 (exp2 -> exp3 .)
    IF              reduce using rule 79 (exp2 -> exp3 .)
    ID_SC           reduce using rule 79 (exp2 -> exp3 .)
    ID_LI           reduce using rule 79 (exp2 -> exp3 .)
    INCREMENT       reduce using rule 79 (exp2 -> exp3 .)
    DECREMENT       reduce using rule 79 (exp2 -> exp3 .)
    ID              reduce using rule 79 (exp2 -> exp3 .)
    FOR             reduce using rule 79 (exp2 -> exp3 .)
    DO              reduce using rule 79 (exp2 -> exp3 .)
    WHILE           reduce using rule 79 (exp2 -> exp3 .)
    SUB             reduce using rule 79 (exp2 -> exp3 .)
    $end            reduce using rule 79 (exp2 -> exp3 .)
    RBRACE          reduce using rule 79 (exp2 -> exp3 .)
    CMP             reduce using rule 79 (exp2 -> exp3 .)
    SEQ             reduce using rule 79 (exp2 -> exp3 .)
    SNE             reduce using rule 79 (exp2 -> exp3 .)
    SGE             reduce using rule 79 (exp2 -> exp3 .)
    SLE             reduce using rule 79 (exp2 -> exp3 .)
    SGT             reduce using rule 79 (exp2 -> exp3 .)
    SLT             reduce using rule 79 (exp2 -> exp3 .)
    EQ              reduce using rule 79 (exp2 -> exp3 .)
    NE              reduce using rule 79 (exp2 -> exp3 .)
    GE              reduce using rule 79 (exp2 -> exp3 .)
    LE              reduce using rule 79 (exp2 -> exp3 .)
    GT              reduce using rule 79 (exp2 -> exp3 .)
    LT              reduce using rule 79 (exp2 -> exp3 .)
    COMMA           reduce using rule 79 (exp2 -> exp3 .)

  ! XOR             [ reduce using rule 79 (exp2 -> exp3 .) ]


state 41

    (80) exp3 -> LPAREN . arithmetic RPAREN
    (56) exp_condition_8 -> LPAREN . exp_condition RPAREN logic exp_condition_logic
    (70) arithmetic -> . exp
    (35) exp_condition -> . exp_condition GT exp_condition_2
    (36) exp_condition -> . exp_condition LT exp_condition_2
    (37) exp_condition -> . exp_condition_2
    (71) exp -> . exp PLUS exp1
    (72) exp -> . exp MINUS exp1
    (73) exp -> . exp1
    (38) exp_condition_2 -> . exp_condition_2 GE exp_condition_3
    (39) exp_condition_2 -> . exp_condition_2 LE exp_condition_3
    (40) exp_condition_2 -> . exp_condition_3
    (74) exp1 -> . exp1 TIMES exp2
    (75) exp1 -> . exp1 DIVIDE exp2
    (76) exp1 -> . exp1 MODULO exp2
    (77) exp1 -> . exp2
    (41) exp_condition_3 -> . exp_condition_3 EQ exp_condition_4
    (42) exp_condition_3 -> . exp_condition_3 NE exp_condition_4
    (43) exp_condition_3 -> . exp_condition_4
    (78) exp2 -> . exp3 XOR exp2
    (79) exp2 -> . exp3
    (44) exp_condition_4 -> . exp_condition_4 SGT exp_condition_5
    (45) exp_condition_4 -> . exp_condition_4 SLT exp_condition_5
    (46) exp_condition_4 -> . exp_condition_5
    (80) exp3 -> . LPAREN arithmetic RPAREN
    (81) exp3 -> . NUMBER
    (82) exp3 -> . exp_assignment
    (83) exp3 -> . exp_condition
    (84) exp3 -> . call
    (85) exp3 -> . exp
    (86) exp3 -> . TRUE
    (87) exp3 -> . FALSE
    (47) exp_condition_5 -> . exp_condition_5 SGE exp_condition_6
    (48) exp_condition_5 -> . exp_condition_5 SLE exp_condition_6
    (49) exp_condition_5 -> . exp_condition_6
    (62) exp_assignment -> . ID_SC EQUALS arithmetic
    (63) exp_assignment -> . ID_LI EQUALS arithmetic
    (64) exp_assignment -> . ID_SC
    (65) exp_assignment -> . ID_LI
    (66) exp_assignment -> . INCREMENT ID_SC
    (67) exp_assignment -> . DECREMENT ID_SC
    (68) exp_assignment -> . ID_SC INCREMENT
    (69) exp_assignment -> . ID_SC DECREMENT
    (92) call -> . ID LPAREN RPAREN
    (93) call -> . ID LPAREN function_assignments RPAREN
    (50) exp_condition_6 -> . exp_condition_6 SEQ exp_condition_7
    (51) exp_condition_6 -> . exp_condition_6 SNE exp_condition_7
    (52) exp_condition_6 -> . exp_condition_7
    (53) exp_condition_7 -> . exp_condition_7 CMP exp_condition_8
    (54) exp_condition_7 -> . exp_condition_8
    (55) exp_condition_8 -> . attcond
    (56) exp_condition_8 -> . LPAREN exp_condition RPAREN logic exp_condition_logic
    (88) attcond -> . exp_assignment
    (89) attcond -> . NUMBER
    (90) attcond -> . TRUE
    (91) attcond -> . FALSE

    LPAREN          shift and go to state 41
    NUMBER          shift and go to state 76
    TRUE            shift and go to state 78
    FALSE           shift and go to state 79
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 21
    ID              shift and go to state 6

    arithmetic                     shift and go to state 74
    exp_condition                  shift and go to state 75
    exp                            shift and go to state 37
    exp_condition_2                shift and go to state 44
    exp1                           shift and go to state 38
    exp_condition_3                shift and go to state 45
    exp2                           shift and go to state 39
    exp_condition_4                shift and go to state 46
    exp3                           shift and go to state 40
    exp_condition_5                shift and go to state 47
    exp_assignment                 shift and go to state 77
    call                           shift and go to state 43
    exp_condition_6                shift and go to state 48
    exp_condition_7                shift and go to state 49
    exp_condition_8                shift and go to state 50
    attcond                        shift and go to state 80

state 42

    (83) exp3 -> exp_condition .
    (35) exp_condition -> exp_condition . GT exp_condition_2
    (36) exp_condition -> exp_condition . LT exp_condition_2

  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
    XOR             reduce using rule 83 (exp3 -> exp_condition .)
    TIMES           reduce using rule 83 (exp3 -> exp_condition .)
    DIVIDE          reduce using rule 83 (exp3 -> exp_condition .)
    MODULO          reduce using rule 83 (exp3 -> exp_condition .)
    PLUS            reduce using rule 83 (exp3 -> exp_condition .)
    MINUS           reduce using rule 83 (exp3 -> exp_condition .)
    SEMICOLON       reduce using rule 83 (exp3 -> exp_condition .)
    RETURN          reduce using rule 83 (exp3 -> exp_condition .)
    BREAK           reduce using rule 83 (exp3 -> exp_condition .)
    CONTINUE        reduce using rule 83 (exp3 -> exp_condition .)
    IF              reduce using rule 83 (exp3 -> exp_condition .)
    ID_SC           reduce using rule 83 (exp3 -> exp_condition .)
    ID_LI           reduce using rule 83 (exp3 -> exp_condition .)
    INCREMENT       reduce using rule 83 (exp3 -> exp_condition .)
    DECREMENT       reduce using rule 83 (exp3 -> exp_condition .)
    ID              reduce using rule 83 (exp3 -> exp_condition .)
    FOR             reduce using rule 83 (exp3 -> exp_condition .)
    DO              reduce using rule 83 (exp3 -> exp_condition .)
    WHILE           reduce using rule 83 (exp3 -> exp_condition .)
    SUB             reduce using rule 83 (exp3 -> exp_condition .)
    $end            reduce using rule 83 (exp3 -> exp_condition .)
    RBRACE          reduce using rule 83 (exp3 -> exp_condition .)
    CMP             reduce using rule 83 (exp3 -> exp_condition .)
    SEQ             reduce using rule 83 (exp3 -> exp_condition .)
    SNE             reduce using rule 83 (exp3 -> exp_condition .)
    SGE             reduce using rule 83 (exp3 -> exp_condition .)
    SLE             reduce using rule 83 (exp3 -> exp_condition .)
    SGT             reduce using rule 83 (exp3 -> exp_condition .)
    SLT             reduce using rule 83 (exp3 -> exp_condition .)
    EQ              reduce using rule 83 (exp3 -> exp_condition .)
    NE              reduce using rule 83 (exp3 -> exp_condition .)
    GE              reduce using rule 83 (exp3 -> exp_condition .)
    LE              reduce using rule 83 (exp3 -> exp_condition .)
    COMMA           reduce using rule 83 (exp3 -> exp_condition .)
    RPAREN          reduce using rule 83 (exp3 -> exp_condition .)
    GT              shift and go to state 81
    LT              shift and go to state 82

  ! GT              [ reduce using rule 83 (exp3 -> exp_condition .) ]
  ! LT              [ reduce using rule 83 (exp3 -> exp_condition .) ]


state 43

    (84) exp3 -> call .

    XOR             reduce using rule 84 (exp3 -> call .)
    TIMES           reduce using rule 84 (exp3 -> call .)
    DIVIDE          reduce using rule 84 (exp3 -> call .)
    MODULO          reduce using rule 84 (exp3 -> call .)
    PLUS            reduce using rule 84 (exp3 -> call .)
    MINUS           reduce using rule 84 (exp3 -> call .)
    SEMICOLON       reduce using rule 84 (exp3 -> call .)
    RPAREN          reduce using rule 84 (exp3 -> call .)
    RETURN          reduce using rule 84 (exp3 -> call .)
    BREAK           reduce using rule 84 (exp3 -> call .)
    CONTINUE        reduce using rule 84 (exp3 -> call .)
    IF              reduce using rule 84 (exp3 -> call .)
    ID_SC           reduce using rule 84 (exp3 -> call .)
    ID_LI           reduce using rule 84 (exp3 -> call .)
    INCREMENT       reduce using rule 84 (exp3 -> call .)
    DECREMENT       reduce using rule 84 (exp3 -> call .)
    ID              reduce using rule 84 (exp3 -> call .)
    FOR             reduce using rule 84 (exp3 -> call .)
    DO              reduce using rule 84 (exp3 -> call .)
    WHILE           reduce using rule 84 (exp3 -> call .)
    SUB             reduce using rule 84 (exp3 -> call .)
    $end            reduce using rule 84 (exp3 -> call .)
    RBRACE          reduce using rule 84 (exp3 -> call .)
    CMP             reduce using rule 84 (exp3 -> call .)
    SEQ             reduce using rule 84 (exp3 -> call .)
    SNE             reduce using rule 84 (exp3 -> call .)
    SGE             reduce using rule 84 (exp3 -> call .)
    SLE             reduce using rule 84 (exp3 -> call .)
    SGT             reduce using rule 84 (exp3 -> call .)
    SLT             reduce using rule 84 (exp3 -> call .)
    EQ              reduce using rule 84 (exp3 -> call .)
    NE              reduce using rule 84 (exp3 -> call .)
    GE              reduce using rule 84 (exp3 -> call .)
    LE              reduce using rule 84 (exp3 -> call .)
    GT              reduce using rule 84 (exp3 -> call .)
    LT              reduce using rule 84 (exp3 -> call .)
    COMMA           reduce using rule 84 (exp3 -> call .)


state 44

    (37) exp_condition -> exp_condition_2 .
    (38) exp_condition_2 -> exp_condition_2 . GE exp_condition_3
    (39) exp_condition_2 -> exp_condition_2 . LE exp_condition_3

  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
    GT              reduce using rule 37 (exp_condition -> exp_condition_2 .)
    LT              reduce using rule 37 (exp_condition -> exp_condition_2 .)
    XOR             reduce using rule 37 (exp_condition -> exp_condition_2 .)
    TIMES           reduce using rule 37 (exp_condition -> exp_condition_2 .)
    DIVIDE          reduce using rule 37 (exp_condition -> exp_condition_2 .)
    MODULO          reduce using rule 37 (exp_condition -> exp_condition_2 .)
    PLUS            reduce using rule 37 (exp_condition -> exp_condition_2 .)
    MINUS           reduce using rule 37 (exp_condition -> exp_condition_2 .)
    SEMICOLON       reduce using rule 37 (exp_condition -> exp_condition_2 .)
    RPAREN          reduce using rule 37 (exp_condition -> exp_condition_2 .)
    RETURN          reduce using rule 37 (exp_condition -> exp_condition_2 .)
    BREAK           reduce using rule 37 (exp_condition -> exp_condition_2 .)
    CONTINUE        reduce using rule 37 (exp_condition -> exp_condition_2 .)
    IF              reduce using rule 37 (exp_condition -> exp_condition_2 .)
    ID_SC           reduce using rule 37 (exp_condition -> exp_condition_2 .)
    ID_LI           reduce using rule 37 (exp_condition -> exp_condition_2 .)
    INCREMENT       reduce using rule 37 (exp_condition -> exp_condition_2 .)
    DECREMENT       reduce using rule 37 (exp_condition -> exp_condition_2 .)
    ID              reduce using rule 37 (exp_condition -> exp_condition_2 .)
    FOR             reduce using rule 37 (exp_condition -> exp_condition_2 .)
    DO              reduce using rule 37 (exp_condition -> exp_condition_2 .)
    WHILE           reduce using rule 37 (exp_condition -> exp_condition_2 .)
    SUB             reduce using rule 37 (exp_condition -> exp_condition_2 .)
    $end            reduce using rule 37 (exp_condition -> exp_condition_2 .)
    RBRACE          reduce using rule 37 (exp_condition -> exp_condition_2 .)
    CMP             reduce using rule 37 (exp_condition -> exp_condition_2 .)
    SEQ             reduce using rule 37 (exp_condition -> exp_condition_2 .)
    SNE             reduce using rule 37 (exp_condition -> exp_condition_2 .)
    SGE             reduce using rule 37 (exp_condition -> exp_condition_2 .)
    SLE             reduce using rule 37 (exp_condition -> exp_condition_2 .)
    SGT             reduce using rule 37 (exp_condition -> exp_condition_2 .)
    SLT             reduce using rule 37 (exp_condition -> exp_condition_2 .)
    EQ              reduce using rule 37 (exp_condition -> exp_condition_2 .)
    NE              reduce using rule 37 (exp_condition -> exp_condition_2 .)
    COMMA           reduce using rule 37 (exp_condition -> exp_condition_2 .)
    GE              shift and go to state 83
    LE              shift and go to state 84

  ! GE              [ reduce using rule 37 (exp_condition -> exp_condition_2 .) ]
  ! LE              [ reduce using rule 37 (exp_condition -> exp_condition_2 .) ]


state 45

    (40) exp_condition_2 -> exp_condition_3 .
    (41) exp_condition_3 -> exp_condition_3 . EQ exp_condition_4
    (42) exp_condition_3 -> exp_condition_3 . NE exp_condition_4

  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    GE              reduce using rule 40 (exp_condition_2 -> exp_condition_3 .)
    LE              reduce using rule 40 (exp_condition_2 -> exp_condition_3 .)
    GT              reduce using rule 40 (exp_condition_2 -> exp_condition_3 .)
    LT              reduce using rule 40 (exp_condition_2 -> exp_condition_3 .)
    XOR             reduce using rule 40 (exp_condition_2 -> exp_condition_3 .)
    TIMES           reduce using rule 40 (exp_condition_2 -> exp_condition_3 .)
    DIVIDE          reduce using rule 40 (exp_condition_2 -> exp_condition_3 .)
    MODULO          reduce using rule 40 (exp_condition_2 -> exp_condition_3 .)
    PLUS            reduce using rule 40 (exp_condition_2 -> exp_condition_3 .)
    MINUS           reduce using rule 40 (exp_condition_2 -> exp_condition_3 .)
    SEMICOLON       reduce using rule 40 (exp_condition_2 -> exp_condition_3 .)
    RPAREN          reduce using rule 40 (exp_condition_2 -> exp_condition_3 .)
    RETURN          reduce using rule 40 (exp_condition_2 -> exp_condition_3 .)
    BREAK           reduce using rule 40 (exp_condition_2 -> exp_condition_3 .)
    CONTINUE        reduce using rule 40 (exp_condition_2 -> exp_condition_3 .)
    IF              reduce using rule 40 (exp_condition_2 -> exp_condition_3 .)
    ID_SC           reduce using rule 40 (exp_condition_2 -> exp_condition_3 .)
    ID_LI           reduce using rule 40 (exp_condition_2 -> exp_condition_3 .)
    INCREMENT       reduce using rule 40 (exp_condition_2 -> exp_condition_3 .)
    DECREMENT       reduce using rule 40 (exp_condition_2 -> exp_condition_3 .)
    ID              reduce using rule 40 (exp_condition_2 -> exp_condition_3 .)
    FOR             reduce using rule 40 (exp_condition_2 -> exp_condition_3 .)
    DO              reduce using rule 40 (exp_condition_2 -> exp_condition_3 .)
    WHILE           reduce using rule 40 (exp_condition_2 -> exp_condition_3 .)
    SUB             reduce using rule 40 (exp_condition_2 -> exp_condition_3 .)
    $end            reduce using rule 40 (exp_condition_2 -> exp_condition_3 .)
    RBRACE          reduce using rule 40 (exp_condition_2 -> exp_condition_3 .)
    CMP             reduce using rule 40 (exp_condition_2 -> exp_condition_3 .)
    SEQ             reduce using rule 40 (exp_condition_2 -> exp_condition_3 .)
    SNE             reduce using rule 40 (exp_condition_2 -> exp_condition_3 .)
    SGE             reduce using rule 40 (exp_condition_2 -> exp_condition_3 .)
    SLE             reduce using rule 40 (exp_condition_2 -> exp_condition_3 .)
    SGT             reduce using rule 40 (exp_condition_2 -> exp_condition_3 .)
    SLT             reduce using rule 40 (exp_condition_2 -> exp_condition_3 .)
    COMMA           reduce using rule 40 (exp_condition_2 -> exp_condition_3 .)
    EQ              shift and go to state 85
    NE              shift and go to state 86

  ! EQ              [ reduce using rule 40 (exp_condition_2 -> exp_condition_3 .) ]
  ! NE              [ reduce using rule 40 (exp_condition_2 -> exp_condition_3 .) ]


state 46

    (43) exp_condition_3 -> exp_condition_4 .
    (44) exp_condition_4 -> exp_condition_4 . SGT exp_condition_5
    (45) exp_condition_4 -> exp_condition_4 . SLT exp_condition_5

  ! shift/reduce conflict for SGT resolved as shift
  ! shift/reduce conflict for SLT resolved as shift
    EQ              reduce using rule 43 (exp_condition_3 -> exp_condition_4 .)
    NE              reduce using rule 43 (exp_condition_3 -> exp_condition_4 .)
    GE              reduce using rule 43 (exp_condition_3 -> exp_condition_4 .)
    LE              reduce using rule 43 (exp_condition_3 -> exp_condition_4 .)
    GT              reduce using rule 43 (exp_condition_3 -> exp_condition_4 .)
    LT              reduce using rule 43 (exp_condition_3 -> exp_condition_4 .)
    XOR             reduce using rule 43 (exp_condition_3 -> exp_condition_4 .)
    TIMES           reduce using rule 43 (exp_condition_3 -> exp_condition_4 .)
    DIVIDE          reduce using rule 43 (exp_condition_3 -> exp_condition_4 .)
    MODULO          reduce using rule 43 (exp_condition_3 -> exp_condition_4 .)
    PLUS            reduce using rule 43 (exp_condition_3 -> exp_condition_4 .)
    MINUS           reduce using rule 43 (exp_condition_3 -> exp_condition_4 .)
    SEMICOLON       reduce using rule 43 (exp_condition_3 -> exp_condition_4 .)
    RPAREN          reduce using rule 43 (exp_condition_3 -> exp_condition_4 .)
    RETURN          reduce using rule 43 (exp_condition_3 -> exp_condition_4 .)
    BREAK           reduce using rule 43 (exp_condition_3 -> exp_condition_4 .)
    CONTINUE        reduce using rule 43 (exp_condition_3 -> exp_condition_4 .)
    IF              reduce using rule 43 (exp_condition_3 -> exp_condition_4 .)
    ID_SC           reduce using rule 43 (exp_condition_3 -> exp_condition_4 .)
    ID_LI           reduce using rule 43 (exp_condition_3 -> exp_condition_4 .)
    INCREMENT       reduce using rule 43 (exp_condition_3 -> exp_condition_4 .)
    DECREMENT       reduce using rule 43 (exp_condition_3 -> exp_condition_4 .)
    ID              reduce using rule 43 (exp_condition_3 -> exp_condition_4 .)
    FOR             reduce using rule 43 (exp_condition_3 -> exp_condition_4 .)
    DO              reduce using rule 43 (exp_condition_3 -> exp_condition_4 .)
    WHILE           reduce using rule 43 (exp_condition_3 -> exp_condition_4 .)
    SUB             reduce using rule 43 (exp_condition_3 -> exp_condition_4 .)
    $end            reduce using rule 43 (exp_condition_3 -> exp_condition_4 .)
    RBRACE          reduce using rule 43 (exp_condition_3 -> exp_condition_4 .)
    CMP             reduce using rule 43 (exp_condition_3 -> exp_condition_4 .)
    SEQ             reduce using rule 43 (exp_condition_3 -> exp_condition_4 .)
    SNE             reduce using rule 43 (exp_condition_3 -> exp_condition_4 .)
    SGE             reduce using rule 43 (exp_condition_3 -> exp_condition_4 .)
    SLE             reduce using rule 43 (exp_condition_3 -> exp_condition_4 .)
    COMMA           reduce using rule 43 (exp_condition_3 -> exp_condition_4 .)
    SGT             shift and go to state 87
    SLT             shift and go to state 88

  ! SGT             [ reduce using rule 43 (exp_condition_3 -> exp_condition_4 .) ]
  ! SLT             [ reduce using rule 43 (exp_condition_3 -> exp_condition_4 .) ]


state 47

    (46) exp_condition_4 -> exp_condition_5 .
    (47) exp_condition_5 -> exp_condition_5 . SGE exp_condition_6
    (48) exp_condition_5 -> exp_condition_5 . SLE exp_condition_6

  ! shift/reduce conflict for SGE resolved as shift
  ! shift/reduce conflict for SLE resolved as shift
    SGT             reduce using rule 46 (exp_condition_4 -> exp_condition_5 .)
    SLT             reduce using rule 46 (exp_condition_4 -> exp_condition_5 .)
    EQ              reduce using rule 46 (exp_condition_4 -> exp_condition_5 .)
    NE              reduce using rule 46 (exp_condition_4 -> exp_condition_5 .)
    GE              reduce using rule 46 (exp_condition_4 -> exp_condition_5 .)
    LE              reduce using rule 46 (exp_condition_4 -> exp_condition_5 .)
    GT              reduce using rule 46 (exp_condition_4 -> exp_condition_5 .)
    LT              reduce using rule 46 (exp_condition_4 -> exp_condition_5 .)
    XOR             reduce using rule 46 (exp_condition_4 -> exp_condition_5 .)
    TIMES           reduce using rule 46 (exp_condition_4 -> exp_condition_5 .)
    DIVIDE          reduce using rule 46 (exp_condition_4 -> exp_condition_5 .)
    MODULO          reduce using rule 46 (exp_condition_4 -> exp_condition_5 .)
    PLUS            reduce using rule 46 (exp_condition_4 -> exp_condition_5 .)
    MINUS           reduce using rule 46 (exp_condition_4 -> exp_condition_5 .)
    SEMICOLON       reduce using rule 46 (exp_condition_4 -> exp_condition_5 .)
    RPAREN          reduce using rule 46 (exp_condition_4 -> exp_condition_5 .)
    RETURN          reduce using rule 46 (exp_condition_4 -> exp_condition_5 .)
    BREAK           reduce using rule 46 (exp_condition_4 -> exp_condition_5 .)
    CONTINUE        reduce using rule 46 (exp_condition_4 -> exp_condition_5 .)
    IF              reduce using rule 46 (exp_condition_4 -> exp_condition_5 .)
    ID_SC           reduce using rule 46 (exp_condition_4 -> exp_condition_5 .)
    ID_LI           reduce using rule 46 (exp_condition_4 -> exp_condition_5 .)
    INCREMENT       reduce using rule 46 (exp_condition_4 -> exp_condition_5 .)
    DECREMENT       reduce using rule 46 (exp_condition_4 -> exp_condition_5 .)
    ID              reduce using rule 46 (exp_condition_4 -> exp_condition_5 .)
    FOR             reduce using rule 46 (exp_condition_4 -> exp_condition_5 .)
    DO              reduce using rule 46 (exp_condition_4 -> exp_condition_5 .)
    WHILE           reduce using rule 46 (exp_condition_4 -> exp_condition_5 .)
    SUB             reduce using rule 46 (exp_condition_4 -> exp_condition_5 .)
    $end            reduce using rule 46 (exp_condition_4 -> exp_condition_5 .)
    RBRACE          reduce using rule 46 (exp_condition_4 -> exp_condition_5 .)
    CMP             reduce using rule 46 (exp_condition_4 -> exp_condition_5 .)
    SEQ             reduce using rule 46 (exp_condition_4 -> exp_condition_5 .)
    SNE             reduce using rule 46 (exp_condition_4 -> exp_condition_5 .)
    COMMA           reduce using rule 46 (exp_condition_4 -> exp_condition_5 .)
    SGE             shift and go to state 89
    SLE             shift and go to state 90

  ! SGE             [ reduce using rule 46 (exp_condition_4 -> exp_condition_5 .) ]
  ! SLE             [ reduce using rule 46 (exp_condition_4 -> exp_condition_5 .) ]


state 48

    (49) exp_condition_5 -> exp_condition_6 .
    (50) exp_condition_6 -> exp_condition_6 . SEQ exp_condition_7
    (51) exp_condition_6 -> exp_condition_6 . SNE exp_condition_7

  ! shift/reduce conflict for SEQ resolved as shift
  ! shift/reduce conflict for SNE resolved as shift
    SGE             reduce using rule 49 (exp_condition_5 -> exp_condition_6 .)
    SLE             reduce using rule 49 (exp_condition_5 -> exp_condition_6 .)
    SGT             reduce using rule 49 (exp_condition_5 -> exp_condition_6 .)
    SLT             reduce using rule 49 (exp_condition_5 -> exp_condition_6 .)
    EQ              reduce using rule 49 (exp_condition_5 -> exp_condition_6 .)
    NE              reduce using rule 49 (exp_condition_5 -> exp_condition_6 .)
    GE              reduce using rule 49 (exp_condition_5 -> exp_condition_6 .)
    LE              reduce using rule 49 (exp_condition_5 -> exp_condition_6 .)
    GT              reduce using rule 49 (exp_condition_5 -> exp_condition_6 .)
    LT              reduce using rule 49 (exp_condition_5 -> exp_condition_6 .)
    XOR             reduce using rule 49 (exp_condition_5 -> exp_condition_6 .)
    TIMES           reduce using rule 49 (exp_condition_5 -> exp_condition_6 .)
    DIVIDE          reduce using rule 49 (exp_condition_5 -> exp_condition_6 .)
    MODULO          reduce using rule 49 (exp_condition_5 -> exp_condition_6 .)
    PLUS            reduce using rule 49 (exp_condition_5 -> exp_condition_6 .)
    MINUS           reduce using rule 49 (exp_condition_5 -> exp_condition_6 .)
    SEMICOLON       reduce using rule 49 (exp_condition_5 -> exp_condition_6 .)
    RPAREN          reduce using rule 49 (exp_condition_5 -> exp_condition_6 .)
    RETURN          reduce using rule 49 (exp_condition_5 -> exp_condition_6 .)
    BREAK           reduce using rule 49 (exp_condition_5 -> exp_condition_6 .)
    CONTINUE        reduce using rule 49 (exp_condition_5 -> exp_condition_6 .)
    IF              reduce using rule 49 (exp_condition_5 -> exp_condition_6 .)
    ID_SC           reduce using rule 49 (exp_condition_5 -> exp_condition_6 .)
    ID_LI           reduce using rule 49 (exp_condition_5 -> exp_condition_6 .)
    INCREMENT       reduce using rule 49 (exp_condition_5 -> exp_condition_6 .)
    DECREMENT       reduce using rule 49 (exp_condition_5 -> exp_condition_6 .)
    ID              reduce using rule 49 (exp_condition_5 -> exp_condition_6 .)
    FOR             reduce using rule 49 (exp_condition_5 -> exp_condition_6 .)
    DO              reduce using rule 49 (exp_condition_5 -> exp_condition_6 .)
    WHILE           reduce using rule 49 (exp_condition_5 -> exp_condition_6 .)
    SUB             reduce using rule 49 (exp_condition_5 -> exp_condition_6 .)
    $end            reduce using rule 49 (exp_condition_5 -> exp_condition_6 .)
    RBRACE          reduce using rule 49 (exp_condition_5 -> exp_condition_6 .)
    CMP             reduce using rule 49 (exp_condition_5 -> exp_condition_6 .)
    COMMA           reduce using rule 49 (exp_condition_5 -> exp_condition_6 .)
    SEQ             shift and go to state 91
    SNE             shift and go to state 92

  ! SEQ             [ reduce using rule 49 (exp_condition_5 -> exp_condition_6 .) ]
  ! SNE             [ reduce using rule 49 (exp_condition_5 -> exp_condition_6 .) ]


state 49

    (52) exp_condition_6 -> exp_condition_7 .
    (53) exp_condition_7 -> exp_condition_7 . CMP exp_condition_8

  ! shift/reduce conflict for CMP resolved as shift
    SEQ             reduce using rule 52 (exp_condition_6 -> exp_condition_7 .)
    SNE             reduce using rule 52 (exp_condition_6 -> exp_condition_7 .)
    SGE             reduce using rule 52 (exp_condition_6 -> exp_condition_7 .)
    SLE             reduce using rule 52 (exp_condition_6 -> exp_condition_7 .)
    SGT             reduce using rule 52 (exp_condition_6 -> exp_condition_7 .)
    SLT             reduce using rule 52 (exp_condition_6 -> exp_condition_7 .)
    EQ              reduce using rule 52 (exp_condition_6 -> exp_condition_7 .)
    NE              reduce using rule 52 (exp_condition_6 -> exp_condition_7 .)
    GE              reduce using rule 52 (exp_condition_6 -> exp_condition_7 .)
    LE              reduce using rule 52 (exp_condition_6 -> exp_condition_7 .)
    GT              reduce using rule 52 (exp_condition_6 -> exp_condition_7 .)
    LT              reduce using rule 52 (exp_condition_6 -> exp_condition_7 .)
    XOR             reduce using rule 52 (exp_condition_6 -> exp_condition_7 .)
    TIMES           reduce using rule 52 (exp_condition_6 -> exp_condition_7 .)
    DIVIDE          reduce using rule 52 (exp_condition_6 -> exp_condition_7 .)
    MODULO          reduce using rule 52 (exp_condition_6 -> exp_condition_7 .)
    PLUS            reduce using rule 52 (exp_condition_6 -> exp_condition_7 .)
    MINUS           reduce using rule 52 (exp_condition_6 -> exp_condition_7 .)
    SEMICOLON       reduce using rule 52 (exp_condition_6 -> exp_condition_7 .)
    RPAREN          reduce using rule 52 (exp_condition_6 -> exp_condition_7 .)
    RETURN          reduce using rule 52 (exp_condition_6 -> exp_condition_7 .)
    BREAK           reduce using rule 52 (exp_condition_6 -> exp_condition_7 .)
    CONTINUE        reduce using rule 52 (exp_condition_6 -> exp_condition_7 .)
    IF              reduce using rule 52 (exp_condition_6 -> exp_condition_7 .)
    ID_SC           reduce using rule 52 (exp_condition_6 -> exp_condition_7 .)
    ID_LI           reduce using rule 52 (exp_condition_6 -> exp_condition_7 .)
    INCREMENT       reduce using rule 52 (exp_condition_6 -> exp_condition_7 .)
    DECREMENT       reduce using rule 52 (exp_condition_6 -> exp_condition_7 .)
    ID              reduce using rule 52 (exp_condition_6 -> exp_condition_7 .)
    FOR             reduce using rule 52 (exp_condition_6 -> exp_condition_7 .)
    DO              reduce using rule 52 (exp_condition_6 -> exp_condition_7 .)
    WHILE           reduce using rule 52 (exp_condition_6 -> exp_condition_7 .)
    SUB             reduce using rule 52 (exp_condition_6 -> exp_condition_7 .)
    $end            reduce using rule 52 (exp_condition_6 -> exp_condition_7 .)
    RBRACE          reduce using rule 52 (exp_condition_6 -> exp_condition_7 .)
    COMMA           reduce using rule 52 (exp_condition_6 -> exp_condition_7 .)
    CMP             shift and go to state 93

  ! CMP             [ reduce using rule 52 (exp_condition_6 -> exp_condition_7 .) ]


state 50

    (54) exp_condition_7 -> exp_condition_8 .

    CMP             reduce using rule 54 (exp_condition_7 -> exp_condition_8 .)
    SEQ             reduce using rule 54 (exp_condition_7 -> exp_condition_8 .)
    SNE             reduce using rule 54 (exp_condition_7 -> exp_condition_8 .)
    SGE             reduce using rule 54 (exp_condition_7 -> exp_condition_8 .)
    SLE             reduce using rule 54 (exp_condition_7 -> exp_condition_8 .)
    SGT             reduce using rule 54 (exp_condition_7 -> exp_condition_8 .)
    SLT             reduce using rule 54 (exp_condition_7 -> exp_condition_8 .)
    EQ              reduce using rule 54 (exp_condition_7 -> exp_condition_8 .)
    NE              reduce using rule 54 (exp_condition_7 -> exp_condition_8 .)
    GE              reduce using rule 54 (exp_condition_7 -> exp_condition_8 .)
    LE              reduce using rule 54 (exp_condition_7 -> exp_condition_8 .)
    GT              reduce using rule 54 (exp_condition_7 -> exp_condition_8 .)
    LT              reduce using rule 54 (exp_condition_7 -> exp_condition_8 .)
    XOR             reduce using rule 54 (exp_condition_7 -> exp_condition_8 .)
    TIMES           reduce using rule 54 (exp_condition_7 -> exp_condition_8 .)
    DIVIDE          reduce using rule 54 (exp_condition_7 -> exp_condition_8 .)
    MODULO          reduce using rule 54 (exp_condition_7 -> exp_condition_8 .)
    PLUS            reduce using rule 54 (exp_condition_7 -> exp_condition_8 .)
    MINUS           reduce using rule 54 (exp_condition_7 -> exp_condition_8 .)
    SEMICOLON       reduce using rule 54 (exp_condition_7 -> exp_condition_8 .)
    RPAREN          reduce using rule 54 (exp_condition_7 -> exp_condition_8 .)
    RETURN          reduce using rule 54 (exp_condition_7 -> exp_condition_8 .)
    BREAK           reduce using rule 54 (exp_condition_7 -> exp_condition_8 .)
    CONTINUE        reduce using rule 54 (exp_condition_7 -> exp_condition_8 .)
    IF              reduce using rule 54 (exp_condition_7 -> exp_condition_8 .)
    ID_SC           reduce using rule 54 (exp_condition_7 -> exp_condition_8 .)
    ID_LI           reduce using rule 54 (exp_condition_7 -> exp_condition_8 .)
    INCREMENT       reduce using rule 54 (exp_condition_7 -> exp_condition_8 .)
    DECREMENT       reduce using rule 54 (exp_condition_7 -> exp_condition_8 .)
    ID              reduce using rule 54 (exp_condition_7 -> exp_condition_8 .)
    FOR             reduce using rule 54 (exp_condition_7 -> exp_condition_8 .)
    DO              reduce using rule 54 (exp_condition_7 -> exp_condition_8 .)
    WHILE           reduce using rule 54 (exp_condition_7 -> exp_condition_8 .)
    SUB             reduce using rule 54 (exp_condition_7 -> exp_condition_8 .)
    $end            reduce using rule 54 (exp_condition_7 -> exp_condition_8 .)
    RBRACE          reduce using rule 54 (exp_condition_7 -> exp_condition_8 .)
    COMMA           reduce using rule 54 (exp_condition_7 -> exp_condition_8 .)


state 51

    (12) command -> BREAK SEMICOLON .

    RETURN          reduce using rule 12 (command -> BREAK SEMICOLON .)
    BREAK           reduce using rule 12 (command -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 12 (command -> BREAK SEMICOLON .)
    IF              reduce using rule 12 (command -> BREAK SEMICOLON .)
    ID_SC           reduce using rule 12 (command -> BREAK SEMICOLON .)
    ID_LI           reduce using rule 12 (command -> BREAK SEMICOLON .)
    INCREMENT       reduce using rule 12 (command -> BREAK SEMICOLON .)
    DECREMENT       reduce using rule 12 (command -> BREAK SEMICOLON .)
    ID              reduce using rule 12 (command -> BREAK SEMICOLON .)
    FOR             reduce using rule 12 (command -> BREAK SEMICOLON .)
    DO              reduce using rule 12 (command -> BREAK SEMICOLON .)
    WHILE           reduce using rule 12 (command -> BREAK SEMICOLON .)
    SUB             reduce using rule 12 (command -> BREAK SEMICOLON .)
    $end            reduce using rule 12 (command -> BREAK SEMICOLON .)
    RBRACE          reduce using rule 12 (command -> BREAK SEMICOLON .)


state 52

    (13) command -> CONTINUE SEMICOLON .

    RETURN          reduce using rule 13 (command -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 13 (command -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 13 (command -> CONTINUE SEMICOLON .)
    IF              reduce using rule 13 (command -> CONTINUE SEMICOLON .)
    ID_SC           reduce using rule 13 (command -> CONTINUE SEMICOLON .)
    ID_LI           reduce using rule 13 (command -> CONTINUE SEMICOLON .)
    INCREMENT       reduce using rule 13 (command -> CONTINUE SEMICOLON .)
    DECREMENT       reduce using rule 13 (command -> CONTINUE SEMICOLON .)
    ID              reduce using rule 13 (command -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 13 (command -> CONTINUE SEMICOLON .)
    DO              reduce using rule 13 (command -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 13 (command -> CONTINUE SEMICOLON .)
    SUB             reduce using rule 13 (command -> CONTINUE SEMICOLON .)
    $end            reduce using rule 13 (command -> CONTINUE SEMICOLON .)
    RBRACE          reduce using rule 13 (command -> CONTINUE SEMICOLON .)


state 53

    (14) if -> IF LPAREN . exp_condition RPAREN if_statement
    (35) exp_condition -> . exp_condition GT exp_condition_2
    (36) exp_condition -> . exp_condition LT exp_condition_2
    (37) exp_condition -> . exp_condition_2
    (38) exp_condition_2 -> . exp_condition_2 GE exp_condition_3
    (39) exp_condition_2 -> . exp_condition_2 LE exp_condition_3
    (40) exp_condition_2 -> . exp_condition_3
    (41) exp_condition_3 -> . exp_condition_3 EQ exp_condition_4
    (42) exp_condition_3 -> . exp_condition_3 NE exp_condition_4
    (43) exp_condition_3 -> . exp_condition_4
    (44) exp_condition_4 -> . exp_condition_4 SGT exp_condition_5
    (45) exp_condition_4 -> . exp_condition_4 SLT exp_condition_5
    (46) exp_condition_4 -> . exp_condition_5
    (47) exp_condition_5 -> . exp_condition_5 SGE exp_condition_6
    (48) exp_condition_5 -> . exp_condition_5 SLE exp_condition_6
    (49) exp_condition_5 -> . exp_condition_6
    (50) exp_condition_6 -> . exp_condition_6 SEQ exp_condition_7
    (51) exp_condition_6 -> . exp_condition_6 SNE exp_condition_7
    (52) exp_condition_6 -> . exp_condition_7
    (53) exp_condition_7 -> . exp_condition_7 CMP exp_condition_8
    (54) exp_condition_7 -> . exp_condition_8
    (55) exp_condition_8 -> . attcond
    (56) exp_condition_8 -> . LPAREN exp_condition RPAREN logic exp_condition_logic
    (88) attcond -> . exp_assignment
    (89) attcond -> . NUMBER
    (90) attcond -> . TRUE
    (91) attcond -> . FALSE
    (62) exp_assignment -> . ID_SC EQUALS arithmetic
    (63) exp_assignment -> . ID_LI EQUALS arithmetic
    (64) exp_assignment -> . ID_SC
    (65) exp_assignment -> . ID_LI
    (66) exp_assignment -> . INCREMENT ID_SC
    (67) exp_assignment -> . DECREMENT ID_SC
    (68) exp_assignment -> . ID_SC INCREMENT
    (69) exp_assignment -> . ID_SC DECREMENT

    LPAREN          shift and go to state 94
    NUMBER          shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 21

    exp_condition                  shift and go to state 95
    exp_condition_2                shift and go to state 44
    exp_condition_3                shift and go to state 45
    exp_condition_4                shift and go to state 46
    exp_condition_5                shift and go to state 47
    exp_condition_6                shift and go to state 48
    exp_condition_7                shift and go to state 49
    exp_condition_8                shift and go to state 50
    attcond                        shift and go to state 80
    exp_assignment                 shift and go to state 96

state 54

    (62) exp_assignment -> ID_SC EQUALS . arithmetic
    (70) arithmetic -> . exp
    (71) exp -> . exp PLUS exp1
    (72) exp -> . exp MINUS exp1
    (73) exp -> . exp1
    (74) exp1 -> . exp1 TIMES exp2
    (75) exp1 -> . exp1 DIVIDE exp2
    (76) exp1 -> . exp1 MODULO exp2
    (77) exp1 -> . exp2
    (78) exp2 -> . exp3 XOR exp2
    (79) exp2 -> . exp3
    (80) exp3 -> . LPAREN arithmetic RPAREN
    (81) exp3 -> . NUMBER
    (82) exp3 -> . exp_assignment
    (83) exp3 -> . exp_condition
    (84) exp3 -> . call
    (85) exp3 -> . exp
    (86) exp3 -> . TRUE
    (87) exp3 -> . FALSE
    (62) exp_assignment -> . ID_SC EQUALS arithmetic
    (63) exp_assignment -> . ID_LI EQUALS arithmetic
    (64) exp_assignment -> . ID_SC
    (65) exp_assignment -> . ID_LI
    (66) exp_assignment -> . INCREMENT ID_SC
    (67) exp_assignment -> . DECREMENT ID_SC
    (68) exp_assignment -> . ID_SC INCREMENT
    (69) exp_assignment -> . ID_SC DECREMENT
    (35) exp_condition -> . exp_condition GT exp_condition_2
    (36) exp_condition -> . exp_condition LT exp_condition_2
    (37) exp_condition -> . exp_condition_2
    (92) call -> . ID LPAREN RPAREN
    (93) call -> . ID LPAREN function_assignments RPAREN
    (38) exp_condition_2 -> . exp_condition_2 GE exp_condition_3
    (39) exp_condition_2 -> . exp_condition_2 LE exp_condition_3
    (40) exp_condition_2 -> . exp_condition_3
    (41) exp_condition_3 -> . exp_condition_3 EQ exp_condition_4
    (42) exp_condition_3 -> . exp_condition_3 NE exp_condition_4
    (43) exp_condition_3 -> . exp_condition_4
    (44) exp_condition_4 -> . exp_condition_4 SGT exp_condition_5
    (45) exp_condition_4 -> . exp_condition_4 SLT exp_condition_5
    (46) exp_condition_4 -> . exp_condition_5
    (47) exp_condition_5 -> . exp_condition_5 SGE exp_condition_6
    (48) exp_condition_5 -> . exp_condition_5 SLE exp_condition_6
    (49) exp_condition_5 -> . exp_condition_6
    (50) exp_condition_6 -> . exp_condition_6 SEQ exp_condition_7
    (51) exp_condition_6 -> . exp_condition_6 SNE exp_condition_7
    (52) exp_condition_6 -> . exp_condition_7
    (53) exp_condition_7 -> . exp_condition_7 CMP exp_condition_8
    (54) exp_condition_7 -> . exp_condition_8
    (55) exp_condition_8 -> . attcond
    (56) exp_condition_8 -> . LPAREN exp_condition RPAREN logic exp_condition_logic
    (88) attcond -> . exp_assignment
    (89) attcond -> . NUMBER
    (90) attcond -> . TRUE
    (91) attcond -> . FALSE

    LPAREN          shift and go to state 41
    NUMBER          shift and go to state 76
    TRUE            shift and go to state 78
    FALSE           shift and go to state 79
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 21
    ID              shift and go to state 6

    arithmetic                     shift and go to state 100
    exp                            shift and go to state 37
    exp1                           shift and go to state 38
    exp2                           shift and go to state 39
    exp3                           shift and go to state 40
    exp_assignment                 shift and go to state 77
    exp_condition                  shift and go to state 42
    call                           shift and go to state 43
    exp_condition_2                shift and go to state 44
    exp_condition_3                shift and go to state 45
    exp_condition_4                shift and go to state 46
    exp_condition_5                shift and go to state 47
    exp_condition_6                shift and go to state 48
    exp_condition_7                shift and go to state 49
    exp_condition_8                shift and go to state 50
    attcond                        shift and go to state 80

state 55

    (68) exp_assignment -> ID_SC INCREMENT .

    RETURN          reduce using rule 68 (exp_assignment -> ID_SC INCREMENT .)
    BREAK           reduce using rule 68 (exp_assignment -> ID_SC INCREMENT .)
    CONTINUE        reduce using rule 68 (exp_assignment -> ID_SC INCREMENT .)
    IF              reduce using rule 68 (exp_assignment -> ID_SC INCREMENT .)
    ID_SC           reduce using rule 68 (exp_assignment -> ID_SC INCREMENT .)
    ID_LI           reduce using rule 68 (exp_assignment -> ID_SC INCREMENT .)
    INCREMENT       reduce using rule 68 (exp_assignment -> ID_SC INCREMENT .)
    DECREMENT       reduce using rule 68 (exp_assignment -> ID_SC INCREMENT .)
    ID              reduce using rule 68 (exp_assignment -> ID_SC INCREMENT .)
    FOR             reduce using rule 68 (exp_assignment -> ID_SC INCREMENT .)
    DO              reduce using rule 68 (exp_assignment -> ID_SC INCREMENT .)
    WHILE           reduce using rule 68 (exp_assignment -> ID_SC INCREMENT .)
    SUB             reduce using rule 68 (exp_assignment -> ID_SC INCREMENT .)
    $end            reduce using rule 68 (exp_assignment -> ID_SC INCREMENT .)
    RBRACE          reduce using rule 68 (exp_assignment -> ID_SC INCREMENT .)
    SEMICOLON       reduce using rule 68 (exp_assignment -> ID_SC INCREMENT .)
    CMP             reduce using rule 68 (exp_assignment -> ID_SC INCREMENT .)
    SEQ             reduce using rule 68 (exp_assignment -> ID_SC INCREMENT .)
    SNE             reduce using rule 68 (exp_assignment -> ID_SC INCREMENT .)
    SGE             reduce using rule 68 (exp_assignment -> ID_SC INCREMENT .)
    SLE             reduce using rule 68 (exp_assignment -> ID_SC INCREMENT .)
    SGT             reduce using rule 68 (exp_assignment -> ID_SC INCREMENT .)
    SLT             reduce using rule 68 (exp_assignment -> ID_SC INCREMENT .)
    EQ              reduce using rule 68 (exp_assignment -> ID_SC INCREMENT .)
    NE              reduce using rule 68 (exp_assignment -> ID_SC INCREMENT .)
    GE              reduce using rule 68 (exp_assignment -> ID_SC INCREMENT .)
    LE              reduce using rule 68 (exp_assignment -> ID_SC INCREMENT .)
    GT              reduce using rule 68 (exp_assignment -> ID_SC INCREMENT .)
    LT              reduce using rule 68 (exp_assignment -> ID_SC INCREMENT .)
    XOR             reduce using rule 68 (exp_assignment -> ID_SC INCREMENT .)
    TIMES           reduce using rule 68 (exp_assignment -> ID_SC INCREMENT .)
    DIVIDE          reduce using rule 68 (exp_assignment -> ID_SC INCREMENT .)
    MODULO          reduce using rule 68 (exp_assignment -> ID_SC INCREMENT .)
    PLUS            reduce using rule 68 (exp_assignment -> ID_SC INCREMENT .)
    MINUS           reduce using rule 68 (exp_assignment -> ID_SC INCREMENT .)
    COMMA           reduce using rule 68 (exp_assignment -> ID_SC INCREMENT .)
    RPAREN          reduce using rule 68 (exp_assignment -> ID_SC INCREMENT .)


state 56

    (69) exp_assignment -> ID_SC DECREMENT .

    RETURN          reduce using rule 69 (exp_assignment -> ID_SC DECREMENT .)
    BREAK           reduce using rule 69 (exp_assignment -> ID_SC DECREMENT .)
    CONTINUE        reduce using rule 69 (exp_assignment -> ID_SC DECREMENT .)
    IF              reduce using rule 69 (exp_assignment -> ID_SC DECREMENT .)
    ID_SC           reduce using rule 69 (exp_assignment -> ID_SC DECREMENT .)
    ID_LI           reduce using rule 69 (exp_assignment -> ID_SC DECREMENT .)
    INCREMENT       reduce using rule 69 (exp_assignment -> ID_SC DECREMENT .)
    DECREMENT       reduce using rule 69 (exp_assignment -> ID_SC DECREMENT .)
    ID              reduce using rule 69 (exp_assignment -> ID_SC DECREMENT .)
    FOR             reduce using rule 69 (exp_assignment -> ID_SC DECREMENT .)
    DO              reduce using rule 69 (exp_assignment -> ID_SC DECREMENT .)
    WHILE           reduce using rule 69 (exp_assignment -> ID_SC DECREMENT .)
    SUB             reduce using rule 69 (exp_assignment -> ID_SC DECREMENT .)
    $end            reduce using rule 69 (exp_assignment -> ID_SC DECREMENT .)
    RBRACE          reduce using rule 69 (exp_assignment -> ID_SC DECREMENT .)
    SEMICOLON       reduce using rule 69 (exp_assignment -> ID_SC DECREMENT .)
    CMP             reduce using rule 69 (exp_assignment -> ID_SC DECREMENT .)
    SEQ             reduce using rule 69 (exp_assignment -> ID_SC DECREMENT .)
    SNE             reduce using rule 69 (exp_assignment -> ID_SC DECREMENT .)
    SGE             reduce using rule 69 (exp_assignment -> ID_SC DECREMENT .)
    SLE             reduce using rule 69 (exp_assignment -> ID_SC DECREMENT .)
    SGT             reduce using rule 69 (exp_assignment -> ID_SC DECREMENT .)
    SLT             reduce using rule 69 (exp_assignment -> ID_SC DECREMENT .)
    EQ              reduce using rule 69 (exp_assignment -> ID_SC DECREMENT .)
    NE              reduce using rule 69 (exp_assignment -> ID_SC DECREMENT .)
    GE              reduce using rule 69 (exp_assignment -> ID_SC DECREMENT .)
    LE              reduce using rule 69 (exp_assignment -> ID_SC DECREMENT .)
    GT              reduce using rule 69 (exp_assignment -> ID_SC DECREMENT .)
    LT              reduce using rule 69 (exp_assignment -> ID_SC DECREMENT .)
    XOR             reduce using rule 69 (exp_assignment -> ID_SC DECREMENT .)
    TIMES           reduce using rule 69 (exp_assignment -> ID_SC DECREMENT .)
    DIVIDE          reduce using rule 69 (exp_assignment -> ID_SC DECREMENT .)
    MODULO          reduce using rule 69 (exp_assignment -> ID_SC DECREMENT .)
    PLUS            reduce using rule 69 (exp_assignment -> ID_SC DECREMENT .)
    MINUS           reduce using rule 69 (exp_assignment -> ID_SC DECREMENT .)
    COMMA           reduce using rule 69 (exp_assignment -> ID_SC DECREMENT .)
    RPAREN          reduce using rule 69 (exp_assignment -> ID_SC DECREMENT .)


state 57

    (63) exp_assignment -> ID_LI EQUALS . arithmetic
    (70) arithmetic -> . exp
    (71) exp -> . exp PLUS exp1
    (72) exp -> . exp MINUS exp1
    (73) exp -> . exp1
    (74) exp1 -> . exp1 TIMES exp2
    (75) exp1 -> . exp1 DIVIDE exp2
    (76) exp1 -> . exp1 MODULO exp2
    (77) exp1 -> . exp2
    (78) exp2 -> . exp3 XOR exp2
    (79) exp2 -> . exp3
    (80) exp3 -> . LPAREN arithmetic RPAREN
    (81) exp3 -> . NUMBER
    (82) exp3 -> . exp_assignment
    (83) exp3 -> . exp_condition
    (84) exp3 -> . call
    (85) exp3 -> . exp
    (86) exp3 -> . TRUE
    (87) exp3 -> . FALSE
    (62) exp_assignment -> . ID_SC EQUALS arithmetic
    (63) exp_assignment -> . ID_LI EQUALS arithmetic
    (64) exp_assignment -> . ID_SC
    (65) exp_assignment -> . ID_LI
    (66) exp_assignment -> . INCREMENT ID_SC
    (67) exp_assignment -> . DECREMENT ID_SC
    (68) exp_assignment -> . ID_SC INCREMENT
    (69) exp_assignment -> . ID_SC DECREMENT
    (35) exp_condition -> . exp_condition GT exp_condition_2
    (36) exp_condition -> . exp_condition LT exp_condition_2
    (37) exp_condition -> . exp_condition_2
    (92) call -> . ID LPAREN RPAREN
    (93) call -> . ID LPAREN function_assignments RPAREN
    (38) exp_condition_2 -> . exp_condition_2 GE exp_condition_3
    (39) exp_condition_2 -> . exp_condition_2 LE exp_condition_3
    (40) exp_condition_2 -> . exp_condition_3
    (41) exp_condition_3 -> . exp_condition_3 EQ exp_condition_4
    (42) exp_condition_3 -> . exp_condition_3 NE exp_condition_4
    (43) exp_condition_3 -> . exp_condition_4
    (44) exp_condition_4 -> . exp_condition_4 SGT exp_condition_5
    (45) exp_condition_4 -> . exp_condition_4 SLT exp_condition_5
    (46) exp_condition_4 -> . exp_condition_5
    (47) exp_condition_5 -> . exp_condition_5 SGE exp_condition_6
    (48) exp_condition_5 -> . exp_condition_5 SLE exp_condition_6
    (49) exp_condition_5 -> . exp_condition_6
    (50) exp_condition_6 -> . exp_condition_6 SEQ exp_condition_7
    (51) exp_condition_6 -> . exp_condition_6 SNE exp_condition_7
    (52) exp_condition_6 -> . exp_condition_7
    (53) exp_condition_7 -> . exp_condition_7 CMP exp_condition_8
    (54) exp_condition_7 -> . exp_condition_8
    (55) exp_condition_8 -> . attcond
    (56) exp_condition_8 -> . LPAREN exp_condition RPAREN logic exp_condition_logic
    (88) attcond -> . exp_assignment
    (89) attcond -> . NUMBER
    (90) attcond -> . TRUE
    (91) attcond -> . FALSE

    LPAREN          shift and go to state 41
    NUMBER          shift and go to state 76
    TRUE            shift and go to state 78
    FALSE           shift and go to state 79
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 21
    ID              shift and go to state 6

    arithmetic                     shift and go to state 101
    exp                            shift and go to state 37
    exp1                           shift and go to state 38
    exp2                           shift and go to state 39
    exp3                           shift and go to state 40
    exp_assignment                 shift and go to state 77
    exp_condition                  shift and go to state 42
    call                           shift and go to state 43
    exp_condition_2                shift and go to state 44
    exp_condition_3                shift and go to state 45
    exp_condition_4                shift and go to state 46
    exp_condition_5                shift and go to state 47
    exp_condition_6                shift and go to state 48
    exp_condition_7                shift and go to state 49
    exp_condition_8                shift and go to state 50
    attcond                        shift and go to state 80

state 58

    (66) exp_assignment -> INCREMENT ID_SC .

    RETURN          reduce using rule 66 (exp_assignment -> INCREMENT ID_SC .)
    BREAK           reduce using rule 66 (exp_assignment -> INCREMENT ID_SC .)
    CONTINUE        reduce using rule 66 (exp_assignment -> INCREMENT ID_SC .)
    IF              reduce using rule 66 (exp_assignment -> INCREMENT ID_SC .)
    ID_SC           reduce using rule 66 (exp_assignment -> INCREMENT ID_SC .)
    ID_LI           reduce using rule 66 (exp_assignment -> INCREMENT ID_SC .)
    INCREMENT       reduce using rule 66 (exp_assignment -> INCREMENT ID_SC .)
    DECREMENT       reduce using rule 66 (exp_assignment -> INCREMENT ID_SC .)
    ID              reduce using rule 66 (exp_assignment -> INCREMENT ID_SC .)
    FOR             reduce using rule 66 (exp_assignment -> INCREMENT ID_SC .)
    DO              reduce using rule 66 (exp_assignment -> INCREMENT ID_SC .)
    WHILE           reduce using rule 66 (exp_assignment -> INCREMENT ID_SC .)
    SUB             reduce using rule 66 (exp_assignment -> INCREMENT ID_SC .)
    $end            reduce using rule 66 (exp_assignment -> INCREMENT ID_SC .)
    RBRACE          reduce using rule 66 (exp_assignment -> INCREMENT ID_SC .)
    SEMICOLON       reduce using rule 66 (exp_assignment -> INCREMENT ID_SC .)
    CMP             reduce using rule 66 (exp_assignment -> INCREMENT ID_SC .)
    SEQ             reduce using rule 66 (exp_assignment -> INCREMENT ID_SC .)
    SNE             reduce using rule 66 (exp_assignment -> INCREMENT ID_SC .)
    SGE             reduce using rule 66 (exp_assignment -> INCREMENT ID_SC .)
    SLE             reduce using rule 66 (exp_assignment -> INCREMENT ID_SC .)
    SGT             reduce using rule 66 (exp_assignment -> INCREMENT ID_SC .)
    SLT             reduce using rule 66 (exp_assignment -> INCREMENT ID_SC .)
    EQ              reduce using rule 66 (exp_assignment -> INCREMENT ID_SC .)
    NE              reduce using rule 66 (exp_assignment -> INCREMENT ID_SC .)
    GE              reduce using rule 66 (exp_assignment -> INCREMENT ID_SC .)
    LE              reduce using rule 66 (exp_assignment -> INCREMENT ID_SC .)
    GT              reduce using rule 66 (exp_assignment -> INCREMENT ID_SC .)
    LT              reduce using rule 66 (exp_assignment -> INCREMENT ID_SC .)
    XOR             reduce using rule 66 (exp_assignment -> INCREMENT ID_SC .)
    TIMES           reduce using rule 66 (exp_assignment -> INCREMENT ID_SC .)
    DIVIDE          reduce using rule 66 (exp_assignment -> INCREMENT ID_SC .)
    MODULO          reduce using rule 66 (exp_assignment -> INCREMENT ID_SC .)
    PLUS            reduce using rule 66 (exp_assignment -> INCREMENT ID_SC .)
    MINUS           reduce using rule 66 (exp_assignment -> INCREMENT ID_SC .)
    COMMA           reduce using rule 66 (exp_assignment -> INCREMENT ID_SC .)
    RPAREN          reduce using rule 66 (exp_assignment -> INCREMENT ID_SC .)


state 59

    (67) exp_assignment -> DECREMENT ID_SC .

    RETURN          reduce using rule 67 (exp_assignment -> DECREMENT ID_SC .)
    BREAK           reduce using rule 67 (exp_assignment -> DECREMENT ID_SC .)
    CONTINUE        reduce using rule 67 (exp_assignment -> DECREMENT ID_SC .)
    IF              reduce using rule 67 (exp_assignment -> DECREMENT ID_SC .)
    ID_SC           reduce using rule 67 (exp_assignment -> DECREMENT ID_SC .)
    ID_LI           reduce using rule 67 (exp_assignment -> DECREMENT ID_SC .)
    INCREMENT       reduce using rule 67 (exp_assignment -> DECREMENT ID_SC .)
    DECREMENT       reduce using rule 67 (exp_assignment -> DECREMENT ID_SC .)
    ID              reduce using rule 67 (exp_assignment -> DECREMENT ID_SC .)
    FOR             reduce using rule 67 (exp_assignment -> DECREMENT ID_SC .)
    DO              reduce using rule 67 (exp_assignment -> DECREMENT ID_SC .)
    WHILE           reduce using rule 67 (exp_assignment -> DECREMENT ID_SC .)
    SUB             reduce using rule 67 (exp_assignment -> DECREMENT ID_SC .)
    $end            reduce using rule 67 (exp_assignment -> DECREMENT ID_SC .)
    RBRACE          reduce using rule 67 (exp_assignment -> DECREMENT ID_SC .)
    SEMICOLON       reduce using rule 67 (exp_assignment -> DECREMENT ID_SC .)
    CMP             reduce using rule 67 (exp_assignment -> DECREMENT ID_SC .)
    SEQ             reduce using rule 67 (exp_assignment -> DECREMENT ID_SC .)
    SNE             reduce using rule 67 (exp_assignment -> DECREMENT ID_SC .)
    SGE             reduce using rule 67 (exp_assignment -> DECREMENT ID_SC .)
    SLE             reduce using rule 67 (exp_assignment -> DECREMENT ID_SC .)
    SGT             reduce using rule 67 (exp_assignment -> DECREMENT ID_SC .)
    SLT             reduce using rule 67 (exp_assignment -> DECREMENT ID_SC .)
    EQ              reduce using rule 67 (exp_assignment -> DECREMENT ID_SC .)
    NE              reduce using rule 67 (exp_assignment -> DECREMENT ID_SC .)
    GE              reduce using rule 67 (exp_assignment -> DECREMENT ID_SC .)
    LE              reduce using rule 67 (exp_assignment -> DECREMENT ID_SC .)
    GT              reduce using rule 67 (exp_assignment -> DECREMENT ID_SC .)
    LT              reduce using rule 67 (exp_assignment -> DECREMENT ID_SC .)
    XOR             reduce using rule 67 (exp_assignment -> DECREMENT ID_SC .)
    TIMES           reduce using rule 67 (exp_assignment -> DECREMENT ID_SC .)
    DIVIDE          reduce using rule 67 (exp_assignment -> DECREMENT ID_SC .)
    MODULO          reduce using rule 67 (exp_assignment -> DECREMENT ID_SC .)
    PLUS            reduce using rule 67 (exp_assignment -> DECREMENT ID_SC .)
    MINUS           reduce using rule 67 (exp_assignment -> DECREMENT ID_SC .)
    COMMA           reduce using rule 67 (exp_assignment -> DECREMENT ID_SC .)
    RPAREN          reduce using rule 67 (exp_assignment -> DECREMENT ID_SC .)


state 60

    (25) for -> FOR LPAREN . for_assignments SEMICOLON exp_condition SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (26) for_assignments -> . exp_assignment
    (27) for_assignments -> . exp_assignment COMMA for_assignments
    (62) exp_assignment -> . ID_SC EQUALS arithmetic
    (63) exp_assignment -> . ID_LI EQUALS arithmetic
    (64) exp_assignment -> . ID_SC
    (65) exp_assignment -> . ID_LI
    (66) exp_assignment -> . INCREMENT ID_SC
    (67) exp_assignment -> . DECREMENT ID_SC
    (68) exp_assignment -> . ID_SC INCREMENT
    (69) exp_assignment -> . ID_SC DECREMENT

    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 21

    for_assignments                shift and go to state 102
    exp_assignment                 shift and go to state 103

state 61

    (28) dowhile -> DO LBRACE . blockcode RBRACE WHILE LPAREN exp_condition RPAREN
    (5) blockcode -> . command
    (6) blockcode -> . command blockcode
    (7) command -> . interations
    (8) command -> . if
    (9) command -> . exp_assignment
    (10) command -> . call
    (11) command -> . RETURN return SEMICOLON
    (12) command -> . BREAK SEMICOLON
    (13) command -> . CONTINUE SEMICOLON
    (22) interations -> . for
    (23) interations -> . dowhile
    (24) interations -> . while
    (14) if -> . IF LPAREN exp_condition RPAREN if_statement
    (62) exp_assignment -> . ID_SC EQUALS arithmetic
    (63) exp_assignment -> . ID_LI EQUALS arithmetic
    (64) exp_assignment -> . ID_SC
    (65) exp_assignment -> . ID_LI
    (66) exp_assignment -> . INCREMENT ID_SC
    (67) exp_assignment -> . DECREMENT ID_SC
    (68) exp_assignment -> . ID_SC INCREMENT
    (69) exp_assignment -> . ID_SC DECREMENT
    (92) call -> . ID LPAREN RPAREN
    (93) call -> . ID LPAREN function_assignments RPAREN
    (25) for -> . FOR LPAREN for_assignments SEMICOLON exp_condition SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (28) dowhile -> . DO LBRACE blockcode RBRACE WHILE LPAREN exp_condition RPAREN
    (29) while -> . WHILE LPAREN exp_condition RPAREN LBRACE blockcode RBRACE
    (30) while -> . WHILE LPAREN exp_condition RPAREN LBRACE RBRACE

    RETURN          shift and go to state 11
    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    IF              shift and go to state 17
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 21
    ID              shift and go to state 6
    FOR             shift and go to state 22
    DO              shift and go to state 23
    WHILE           shift and go to state 24

    blockcode                      shift and go to state 104
    command                        shift and go to state 4
    interations                    shift and go to state 7
    if                             shift and go to state 8
    exp_assignment                 shift and go to state 9
    call                           shift and go to state 10
    for                            shift and go to state 14
    dowhile                        shift and go to state 15
    while                          shift and go to state 16

state 62

    (29) while -> WHILE LPAREN . exp_condition RPAREN LBRACE blockcode RBRACE
    (30) while -> WHILE LPAREN . exp_condition RPAREN LBRACE RBRACE
    (35) exp_condition -> . exp_condition GT exp_condition_2
    (36) exp_condition -> . exp_condition LT exp_condition_2
    (37) exp_condition -> . exp_condition_2
    (38) exp_condition_2 -> . exp_condition_2 GE exp_condition_3
    (39) exp_condition_2 -> . exp_condition_2 LE exp_condition_3
    (40) exp_condition_2 -> . exp_condition_3
    (41) exp_condition_3 -> . exp_condition_3 EQ exp_condition_4
    (42) exp_condition_3 -> . exp_condition_3 NE exp_condition_4
    (43) exp_condition_3 -> . exp_condition_4
    (44) exp_condition_4 -> . exp_condition_4 SGT exp_condition_5
    (45) exp_condition_4 -> . exp_condition_4 SLT exp_condition_5
    (46) exp_condition_4 -> . exp_condition_5
    (47) exp_condition_5 -> . exp_condition_5 SGE exp_condition_6
    (48) exp_condition_5 -> . exp_condition_5 SLE exp_condition_6
    (49) exp_condition_5 -> . exp_condition_6
    (50) exp_condition_6 -> . exp_condition_6 SEQ exp_condition_7
    (51) exp_condition_6 -> . exp_condition_6 SNE exp_condition_7
    (52) exp_condition_6 -> . exp_condition_7
    (53) exp_condition_7 -> . exp_condition_7 CMP exp_condition_8
    (54) exp_condition_7 -> . exp_condition_8
    (55) exp_condition_8 -> . attcond
    (56) exp_condition_8 -> . LPAREN exp_condition RPAREN logic exp_condition_logic
    (88) attcond -> . exp_assignment
    (89) attcond -> . NUMBER
    (90) attcond -> . TRUE
    (91) attcond -> . FALSE
    (62) exp_assignment -> . ID_SC EQUALS arithmetic
    (63) exp_assignment -> . ID_LI EQUALS arithmetic
    (64) exp_assignment -> . ID_SC
    (65) exp_assignment -> . ID_LI
    (66) exp_assignment -> . INCREMENT ID_SC
    (67) exp_assignment -> . DECREMENT ID_SC
    (68) exp_assignment -> . ID_SC INCREMENT
    (69) exp_assignment -> . ID_SC DECREMENT

    LPAREN          shift and go to state 94
    NUMBER          shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 21

    exp_condition                  shift and go to state 105
    exp_condition_2                shift and go to state 44
    exp_condition_3                shift and go to state 45
    exp_condition_4                shift and go to state 46
    exp_condition_5                shift and go to state 47
    exp_condition_6                shift and go to state 48
    exp_condition_7                shift and go to state 49
    exp_condition_8                shift and go to state 50
    attcond                        shift and go to state 80
    exp_assignment                 shift and go to state 96

state 63

    (31) function -> SUB ID LPAREN . RPAREN LBRACE blockcode RBRACE
    (32) function -> SUB ID LPAREN . function_assignments RPAREN LBRACE blockcode RBRACE
    (33) function_assignments -> . exp_assignment
    (34) function_assignments -> . exp_assignment COMMA function_assignments
    (62) exp_assignment -> . ID_SC EQUALS arithmetic
    (63) exp_assignment -> . ID_LI EQUALS arithmetic
    (64) exp_assignment -> . ID_SC
    (65) exp_assignment -> . ID_LI
    (66) exp_assignment -> . INCREMENT ID_SC
    (67) exp_assignment -> . DECREMENT ID_SC
    (68) exp_assignment -> . ID_SC INCREMENT
    (69) exp_assignment -> . ID_SC DECREMENT

    RPAREN          shift and go to state 106
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 21

    function_assignments           shift and go to state 107
    exp_assignment                 shift and go to state 66

state 64

    (92) call -> ID LPAREN RPAREN .

    RETURN          reduce using rule 92 (call -> ID LPAREN RPAREN .)
    BREAK           reduce using rule 92 (call -> ID LPAREN RPAREN .)
    CONTINUE        reduce using rule 92 (call -> ID LPAREN RPAREN .)
    IF              reduce using rule 92 (call -> ID LPAREN RPAREN .)
    ID_SC           reduce using rule 92 (call -> ID LPAREN RPAREN .)
    ID_LI           reduce using rule 92 (call -> ID LPAREN RPAREN .)
    INCREMENT       reduce using rule 92 (call -> ID LPAREN RPAREN .)
    DECREMENT       reduce using rule 92 (call -> ID LPAREN RPAREN .)
    ID              reduce using rule 92 (call -> ID LPAREN RPAREN .)
    FOR             reduce using rule 92 (call -> ID LPAREN RPAREN .)
    DO              reduce using rule 92 (call -> ID LPAREN RPAREN .)
    WHILE           reduce using rule 92 (call -> ID LPAREN RPAREN .)
    SUB             reduce using rule 92 (call -> ID LPAREN RPAREN .)
    $end            reduce using rule 92 (call -> ID LPAREN RPAREN .)
    RBRACE          reduce using rule 92 (call -> ID LPAREN RPAREN .)
    XOR             reduce using rule 92 (call -> ID LPAREN RPAREN .)
    TIMES           reduce using rule 92 (call -> ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 92 (call -> ID LPAREN RPAREN .)
    MODULO          reduce using rule 92 (call -> ID LPAREN RPAREN .)
    PLUS            reduce using rule 92 (call -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 92 (call -> ID LPAREN RPAREN .)
    SEMICOLON       reduce using rule 92 (call -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 92 (call -> ID LPAREN RPAREN .)
    CMP             reduce using rule 92 (call -> ID LPAREN RPAREN .)
    SEQ             reduce using rule 92 (call -> ID LPAREN RPAREN .)
    SNE             reduce using rule 92 (call -> ID LPAREN RPAREN .)
    SGE             reduce using rule 92 (call -> ID LPAREN RPAREN .)
    SLE             reduce using rule 92 (call -> ID LPAREN RPAREN .)
    SGT             reduce using rule 92 (call -> ID LPAREN RPAREN .)
    SLT             reduce using rule 92 (call -> ID LPAREN RPAREN .)
    EQ              reduce using rule 92 (call -> ID LPAREN RPAREN .)
    NE              reduce using rule 92 (call -> ID LPAREN RPAREN .)
    GE              reduce using rule 92 (call -> ID LPAREN RPAREN .)
    LE              reduce using rule 92 (call -> ID LPAREN RPAREN .)
    GT              reduce using rule 92 (call -> ID LPAREN RPAREN .)
    LT              reduce using rule 92 (call -> ID LPAREN RPAREN .)
    COMMA           reduce using rule 92 (call -> ID LPAREN RPAREN .)


state 65

    (93) call -> ID LPAREN function_assignments . RPAREN

    RPAREN          shift and go to state 108


state 66

    (33) function_assignments -> exp_assignment .
    (34) function_assignments -> exp_assignment . COMMA function_assignments

    RPAREN          reduce using rule 33 (function_assignments -> exp_assignment .)
    COMMA           shift and go to state 109


state 67

    (11) command -> RETURN return SEMICOLON .

    RETURN          reduce using rule 11 (command -> RETURN return SEMICOLON .)
    BREAK           reduce using rule 11 (command -> RETURN return SEMICOLON .)
    CONTINUE        reduce using rule 11 (command -> RETURN return SEMICOLON .)
    IF              reduce using rule 11 (command -> RETURN return SEMICOLON .)
    ID_SC           reduce using rule 11 (command -> RETURN return SEMICOLON .)
    ID_LI           reduce using rule 11 (command -> RETURN return SEMICOLON .)
    INCREMENT       reduce using rule 11 (command -> RETURN return SEMICOLON .)
    DECREMENT       reduce using rule 11 (command -> RETURN return SEMICOLON .)
    ID              reduce using rule 11 (command -> RETURN return SEMICOLON .)
    FOR             reduce using rule 11 (command -> RETURN return SEMICOLON .)
    DO              reduce using rule 11 (command -> RETURN return SEMICOLON .)
    WHILE           reduce using rule 11 (command -> RETURN return SEMICOLON .)
    SUB             reduce using rule 11 (command -> RETURN return SEMICOLON .)
    $end            reduce using rule 11 (command -> RETURN return SEMICOLON .)
    RBRACE          reduce using rule 11 (command -> RETURN return SEMICOLON .)


state 68

    (71) exp -> exp PLUS . exp1
    (74) exp1 -> . exp1 TIMES exp2
    (75) exp1 -> . exp1 DIVIDE exp2
    (76) exp1 -> . exp1 MODULO exp2
    (77) exp1 -> . exp2
    (78) exp2 -> . exp3 XOR exp2
    (79) exp2 -> . exp3
    (80) exp3 -> . LPAREN arithmetic RPAREN
    (81) exp3 -> . NUMBER
    (82) exp3 -> . exp_assignment
    (83) exp3 -> . exp_condition
    (84) exp3 -> . call
    (85) exp3 -> . exp
    (86) exp3 -> . TRUE
    (87) exp3 -> . FALSE
    (62) exp_assignment -> . ID_SC EQUALS arithmetic
    (63) exp_assignment -> . ID_LI EQUALS arithmetic
    (64) exp_assignment -> . ID_SC
    (65) exp_assignment -> . ID_LI
    (66) exp_assignment -> . INCREMENT ID_SC
    (67) exp_assignment -> . DECREMENT ID_SC
    (68) exp_assignment -> . ID_SC INCREMENT
    (69) exp_assignment -> . ID_SC DECREMENT
    (35) exp_condition -> . exp_condition GT exp_condition_2
    (36) exp_condition -> . exp_condition LT exp_condition_2
    (37) exp_condition -> . exp_condition_2
    (92) call -> . ID LPAREN RPAREN
    (93) call -> . ID LPAREN function_assignments RPAREN
    (71) exp -> . exp PLUS exp1
    (72) exp -> . exp MINUS exp1
    (73) exp -> . exp1
    (38) exp_condition_2 -> . exp_condition_2 GE exp_condition_3
    (39) exp_condition_2 -> . exp_condition_2 LE exp_condition_3
    (40) exp_condition_2 -> . exp_condition_3
    (41) exp_condition_3 -> . exp_condition_3 EQ exp_condition_4
    (42) exp_condition_3 -> . exp_condition_3 NE exp_condition_4
    (43) exp_condition_3 -> . exp_condition_4
    (44) exp_condition_4 -> . exp_condition_4 SGT exp_condition_5
    (45) exp_condition_4 -> . exp_condition_4 SLT exp_condition_5
    (46) exp_condition_4 -> . exp_condition_5
    (47) exp_condition_5 -> . exp_condition_5 SGE exp_condition_6
    (48) exp_condition_5 -> . exp_condition_5 SLE exp_condition_6
    (49) exp_condition_5 -> . exp_condition_6
    (50) exp_condition_6 -> . exp_condition_6 SEQ exp_condition_7
    (51) exp_condition_6 -> . exp_condition_6 SNE exp_condition_7
    (52) exp_condition_6 -> . exp_condition_7
    (53) exp_condition_7 -> . exp_condition_7 CMP exp_condition_8
    (54) exp_condition_7 -> . exp_condition_8
    (55) exp_condition_8 -> . attcond
    (56) exp_condition_8 -> . LPAREN exp_condition RPAREN logic exp_condition_logic
    (88) attcond -> . exp_assignment
    (89) attcond -> . NUMBER
    (90) attcond -> . TRUE
    (91) attcond -> . FALSE

    LPAREN          shift and go to state 41
    NUMBER          shift and go to state 76
    TRUE            shift and go to state 78
    FALSE           shift and go to state 79
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 21
    ID              shift and go to state 6

    exp                            shift and go to state 110
    exp1                           shift and go to state 111
    exp2                           shift and go to state 39
    exp3                           shift and go to state 40
    exp_assignment                 shift and go to state 77
    exp_condition                  shift and go to state 42
    call                           shift and go to state 43
    exp_condition_2                shift and go to state 44
    exp_condition_3                shift and go to state 45
    exp_condition_4                shift and go to state 46
    exp_condition_5                shift and go to state 47
    exp_condition_6                shift and go to state 48
    exp_condition_7                shift and go to state 49
    exp_condition_8                shift and go to state 50
    attcond                        shift and go to state 80

state 69

    (72) exp -> exp MINUS . exp1
    (74) exp1 -> . exp1 TIMES exp2
    (75) exp1 -> . exp1 DIVIDE exp2
    (76) exp1 -> . exp1 MODULO exp2
    (77) exp1 -> . exp2
    (78) exp2 -> . exp3 XOR exp2
    (79) exp2 -> . exp3
    (80) exp3 -> . LPAREN arithmetic RPAREN
    (81) exp3 -> . NUMBER
    (82) exp3 -> . exp_assignment
    (83) exp3 -> . exp_condition
    (84) exp3 -> . call
    (85) exp3 -> . exp
    (86) exp3 -> . TRUE
    (87) exp3 -> . FALSE
    (62) exp_assignment -> . ID_SC EQUALS arithmetic
    (63) exp_assignment -> . ID_LI EQUALS arithmetic
    (64) exp_assignment -> . ID_SC
    (65) exp_assignment -> . ID_LI
    (66) exp_assignment -> . INCREMENT ID_SC
    (67) exp_assignment -> . DECREMENT ID_SC
    (68) exp_assignment -> . ID_SC INCREMENT
    (69) exp_assignment -> . ID_SC DECREMENT
    (35) exp_condition -> . exp_condition GT exp_condition_2
    (36) exp_condition -> . exp_condition LT exp_condition_2
    (37) exp_condition -> . exp_condition_2
    (92) call -> . ID LPAREN RPAREN
    (93) call -> . ID LPAREN function_assignments RPAREN
    (71) exp -> . exp PLUS exp1
    (72) exp -> . exp MINUS exp1
    (73) exp -> . exp1
    (38) exp_condition_2 -> . exp_condition_2 GE exp_condition_3
    (39) exp_condition_2 -> . exp_condition_2 LE exp_condition_3
    (40) exp_condition_2 -> . exp_condition_3
    (41) exp_condition_3 -> . exp_condition_3 EQ exp_condition_4
    (42) exp_condition_3 -> . exp_condition_3 NE exp_condition_4
    (43) exp_condition_3 -> . exp_condition_4
    (44) exp_condition_4 -> . exp_condition_4 SGT exp_condition_5
    (45) exp_condition_4 -> . exp_condition_4 SLT exp_condition_5
    (46) exp_condition_4 -> . exp_condition_5
    (47) exp_condition_5 -> . exp_condition_5 SGE exp_condition_6
    (48) exp_condition_5 -> . exp_condition_5 SLE exp_condition_6
    (49) exp_condition_5 -> . exp_condition_6
    (50) exp_condition_6 -> . exp_condition_6 SEQ exp_condition_7
    (51) exp_condition_6 -> . exp_condition_6 SNE exp_condition_7
    (52) exp_condition_6 -> . exp_condition_7
    (53) exp_condition_7 -> . exp_condition_7 CMP exp_condition_8
    (54) exp_condition_7 -> . exp_condition_8
    (55) exp_condition_8 -> . attcond
    (56) exp_condition_8 -> . LPAREN exp_condition RPAREN logic exp_condition_logic
    (88) attcond -> . exp_assignment
    (89) attcond -> . NUMBER
    (90) attcond -> . TRUE
    (91) attcond -> . FALSE

    LPAREN          shift and go to state 41
    NUMBER          shift and go to state 76
    TRUE            shift and go to state 78
    FALSE           shift and go to state 79
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 21
    ID              shift and go to state 6

    exp                            shift and go to state 110
    exp1                           shift and go to state 112
    exp2                           shift and go to state 39
    exp3                           shift and go to state 40
    exp_assignment                 shift and go to state 77
    exp_condition                  shift and go to state 42
    call                           shift and go to state 43
    exp_condition_2                shift and go to state 44
    exp_condition_3                shift and go to state 45
    exp_condition_4                shift and go to state 46
    exp_condition_5                shift and go to state 47
    exp_condition_6                shift and go to state 48
    exp_condition_7                shift and go to state 49
    exp_condition_8                shift and go to state 50
    attcond                        shift and go to state 80

state 70

    (74) exp1 -> exp1 TIMES . exp2
    (78) exp2 -> . exp3 XOR exp2
    (79) exp2 -> . exp3
    (80) exp3 -> . LPAREN arithmetic RPAREN
    (81) exp3 -> . NUMBER
    (82) exp3 -> . exp_assignment
    (83) exp3 -> . exp_condition
    (84) exp3 -> . call
    (85) exp3 -> . exp
    (86) exp3 -> . TRUE
    (87) exp3 -> . FALSE
    (62) exp_assignment -> . ID_SC EQUALS arithmetic
    (63) exp_assignment -> . ID_LI EQUALS arithmetic
    (64) exp_assignment -> . ID_SC
    (65) exp_assignment -> . ID_LI
    (66) exp_assignment -> . INCREMENT ID_SC
    (67) exp_assignment -> . DECREMENT ID_SC
    (68) exp_assignment -> . ID_SC INCREMENT
    (69) exp_assignment -> . ID_SC DECREMENT
    (35) exp_condition -> . exp_condition GT exp_condition_2
    (36) exp_condition -> . exp_condition LT exp_condition_2
    (37) exp_condition -> . exp_condition_2
    (92) call -> . ID LPAREN RPAREN
    (93) call -> . ID LPAREN function_assignments RPAREN
    (71) exp -> . exp PLUS exp1
    (72) exp -> . exp MINUS exp1
    (73) exp -> . exp1
    (38) exp_condition_2 -> . exp_condition_2 GE exp_condition_3
    (39) exp_condition_2 -> . exp_condition_2 LE exp_condition_3
    (40) exp_condition_2 -> . exp_condition_3
    (74) exp1 -> . exp1 TIMES exp2
    (75) exp1 -> . exp1 DIVIDE exp2
    (76) exp1 -> . exp1 MODULO exp2
    (77) exp1 -> . exp2
    (41) exp_condition_3 -> . exp_condition_3 EQ exp_condition_4
    (42) exp_condition_3 -> . exp_condition_3 NE exp_condition_4
    (43) exp_condition_3 -> . exp_condition_4
    (44) exp_condition_4 -> . exp_condition_4 SGT exp_condition_5
    (45) exp_condition_4 -> . exp_condition_4 SLT exp_condition_5
    (46) exp_condition_4 -> . exp_condition_5
    (47) exp_condition_5 -> . exp_condition_5 SGE exp_condition_6
    (48) exp_condition_5 -> . exp_condition_5 SLE exp_condition_6
    (49) exp_condition_5 -> . exp_condition_6
    (50) exp_condition_6 -> . exp_condition_6 SEQ exp_condition_7
    (51) exp_condition_6 -> . exp_condition_6 SNE exp_condition_7
    (52) exp_condition_6 -> . exp_condition_7
    (53) exp_condition_7 -> . exp_condition_7 CMP exp_condition_8
    (54) exp_condition_7 -> . exp_condition_8
    (55) exp_condition_8 -> . attcond
    (56) exp_condition_8 -> . LPAREN exp_condition RPAREN logic exp_condition_logic
    (88) attcond -> . exp_assignment
    (89) attcond -> . NUMBER
    (90) attcond -> . TRUE
    (91) attcond -> . FALSE

    LPAREN          shift and go to state 41
    NUMBER          shift and go to state 76
    TRUE            shift and go to state 78
    FALSE           shift and go to state 79
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 21
    ID              shift and go to state 6

    exp1                           shift and go to state 38
    exp2                           shift and go to state 113
    exp3                           shift and go to state 40
    exp_assignment                 shift and go to state 77
    exp_condition                  shift and go to state 42
    call                           shift and go to state 43
    exp                            shift and go to state 110
    exp_condition_2                shift and go to state 44
    exp_condition_3                shift and go to state 45
    exp_condition_4                shift and go to state 46
    exp_condition_5                shift and go to state 47
    exp_condition_6                shift and go to state 48
    exp_condition_7                shift and go to state 49
    exp_condition_8                shift and go to state 50
    attcond                        shift and go to state 80

state 71

    (75) exp1 -> exp1 DIVIDE . exp2
    (78) exp2 -> . exp3 XOR exp2
    (79) exp2 -> . exp3
    (80) exp3 -> . LPAREN arithmetic RPAREN
    (81) exp3 -> . NUMBER
    (82) exp3 -> . exp_assignment
    (83) exp3 -> . exp_condition
    (84) exp3 -> . call
    (85) exp3 -> . exp
    (86) exp3 -> . TRUE
    (87) exp3 -> . FALSE
    (62) exp_assignment -> . ID_SC EQUALS arithmetic
    (63) exp_assignment -> . ID_LI EQUALS arithmetic
    (64) exp_assignment -> . ID_SC
    (65) exp_assignment -> . ID_LI
    (66) exp_assignment -> . INCREMENT ID_SC
    (67) exp_assignment -> . DECREMENT ID_SC
    (68) exp_assignment -> . ID_SC INCREMENT
    (69) exp_assignment -> . ID_SC DECREMENT
    (35) exp_condition -> . exp_condition GT exp_condition_2
    (36) exp_condition -> . exp_condition LT exp_condition_2
    (37) exp_condition -> . exp_condition_2
    (92) call -> . ID LPAREN RPAREN
    (93) call -> . ID LPAREN function_assignments RPAREN
    (71) exp -> . exp PLUS exp1
    (72) exp -> . exp MINUS exp1
    (73) exp -> . exp1
    (38) exp_condition_2 -> . exp_condition_2 GE exp_condition_3
    (39) exp_condition_2 -> . exp_condition_2 LE exp_condition_3
    (40) exp_condition_2 -> . exp_condition_3
    (74) exp1 -> . exp1 TIMES exp2
    (75) exp1 -> . exp1 DIVIDE exp2
    (76) exp1 -> . exp1 MODULO exp2
    (77) exp1 -> . exp2
    (41) exp_condition_3 -> . exp_condition_3 EQ exp_condition_4
    (42) exp_condition_3 -> . exp_condition_3 NE exp_condition_4
    (43) exp_condition_3 -> . exp_condition_4
    (44) exp_condition_4 -> . exp_condition_4 SGT exp_condition_5
    (45) exp_condition_4 -> . exp_condition_4 SLT exp_condition_5
    (46) exp_condition_4 -> . exp_condition_5
    (47) exp_condition_5 -> . exp_condition_5 SGE exp_condition_6
    (48) exp_condition_5 -> . exp_condition_5 SLE exp_condition_6
    (49) exp_condition_5 -> . exp_condition_6
    (50) exp_condition_6 -> . exp_condition_6 SEQ exp_condition_7
    (51) exp_condition_6 -> . exp_condition_6 SNE exp_condition_7
    (52) exp_condition_6 -> . exp_condition_7
    (53) exp_condition_7 -> . exp_condition_7 CMP exp_condition_8
    (54) exp_condition_7 -> . exp_condition_8
    (55) exp_condition_8 -> . attcond
    (56) exp_condition_8 -> . LPAREN exp_condition RPAREN logic exp_condition_logic
    (88) attcond -> . exp_assignment
    (89) attcond -> . NUMBER
    (90) attcond -> . TRUE
    (91) attcond -> . FALSE

    LPAREN          shift and go to state 41
    NUMBER          shift and go to state 76
    TRUE            shift and go to state 78
    FALSE           shift and go to state 79
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 21
    ID              shift and go to state 6

    exp1                           shift and go to state 38
    exp2                           shift and go to state 114
    exp3                           shift and go to state 40
    exp_assignment                 shift and go to state 77
    exp_condition                  shift and go to state 42
    call                           shift and go to state 43
    exp                            shift and go to state 110
    exp_condition_2                shift and go to state 44
    exp_condition_3                shift and go to state 45
    exp_condition_4                shift and go to state 46
    exp_condition_5                shift and go to state 47
    exp_condition_6                shift and go to state 48
    exp_condition_7                shift and go to state 49
    exp_condition_8                shift and go to state 50
    attcond                        shift and go to state 80

state 72

    (76) exp1 -> exp1 MODULO . exp2
    (78) exp2 -> . exp3 XOR exp2
    (79) exp2 -> . exp3
    (80) exp3 -> . LPAREN arithmetic RPAREN
    (81) exp3 -> . NUMBER
    (82) exp3 -> . exp_assignment
    (83) exp3 -> . exp_condition
    (84) exp3 -> . call
    (85) exp3 -> . exp
    (86) exp3 -> . TRUE
    (87) exp3 -> . FALSE
    (62) exp_assignment -> . ID_SC EQUALS arithmetic
    (63) exp_assignment -> . ID_LI EQUALS arithmetic
    (64) exp_assignment -> . ID_SC
    (65) exp_assignment -> . ID_LI
    (66) exp_assignment -> . INCREMENT ID_SC
    (67) exp_assignment -> . DECREMENT ID_SC
    (68) exp_assignment -> . ID_SC INCREMENT
    (69) exp_assignment -> . ID_SC DECREMENT
    (35) exp_condition -> . exp_condition GT exp_condition_2
    (36) exp_condition -> . exp_condition LT exp_condition_2
    (37) exp_condition -> . exp_condition_2
    (92) call -> . ID LPAREN RPAREN
    (93) call -> . ID LPAREN function_assignments RPAREN
    (71) exp -> . exp PLUS exp1
    (72) exp -> . exp MINUS exp1
    (73) exp -> . exp1
    (38) exp_condition_2 -> . exp_condition_2 GE exp_condition_3
    (39) exp_condition_2 -> . exp_condition_2 LE exp_condition_3
    (40) exp_condition_2 -> . exp_condition_3
    (74) exp1 -> . exp1 TIMES exp2
    (75) exp1 -> . exp1 DIVIDE exp2
    (76) exp1 -> . exp1 MODULO exp2
    (77) exp1 -> . exp2
    (41) exp_condition_3 -> . exp_condition_3 EQ exp_condition_4
    (42) exp_condition_3 -> . exp_condition_3 NE exp_condition_4
    (43) exp_condition_3 -> . exp_condition_4
    (44) exp_condition_4 -> . exp_condition_4 SGT exp_condition_5
    (45) exp_condition_4 -> . exp_condition_4 SLT exp_condition_5
    (46) exp_condition_4 -> . exp_condition_5
    (47) exp_condition_5 -> . exp_condition_5 SGE exp_condition_6
    (48) exp_condition_5 -> . exp_condition_5 SLE exp_condition_6
    (49) exp_condition_5 -> . exp_condition_6
    (50) exp_condition_6 -> . exp_condition_6 SEQ exp_condition_7
    (51) exp_condition_6 -> . exp_condition_6 SNE exp_condition_7
    (52) exp_condition_6 -> . exp_condition_7
    (53) exp_condition_7 -> . exp_condition_7 CMP exp_condition_8
    (54) exp_condition_7 -> . exp_condition_8
    (55) exp_condition_8 -> . attcond
    (56) exp_condition_8 -> . LPAREN exp_condition RPAREN logic exp_condition_logic
    (88) attcond -> . exp_assignment
    (89) attcond -> . NUMBER
    (90) attcond -> . TRUE
    (91) attcond -> . FALSE

    LPAREN          shift and go to state 41
    NUMBER          shift and go to state 76
    TRUE            shift and go to state 78
    FALSE           shift and go to state 79
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 21
    ID              shift and go to state 6

    exp1                           shift and go to state 38
    exp2                           shift and go to state 115
    exp3                           shift and go to state 40
    exp_assignment                 shift and go to state 77
    exp_condition                  shift and go to state 42
    call                           shift and go to state 43
    exp                            shift and go to state 110
    exp_condition_2                shift and go to state 44
    exp_condition_3                shift and go to state 45
    exp_condition_4                shift and go to state 46
    exp_condition_5                shift and go to state 47
    exp_condition_6                shift and go to state 48
    exp_condition_7                shift and go to state 49
    exp_condition_8                shift and go to state 50
    attcond                        shift and go to state 80

state 73

    (78) exp2 -> exp3 XOR . exp2
    (78) exp2 -> . exp3 XOR exp2
    (79) exp2 -> . exp3
    (80) exp3 -> . LPAREN arithmetic RPAREN
    (81) exp3 -> . NUMBER
    (82) exp3 -> . exp_assignment
    (83) exp3 -> . exp_condition
    (84) exp3 -> . call
    (85) exp3 -> . exp
    (86) exp3 -> . TRUE
    (87) exp3 -> . FALSE
    (62) exp_assignment -> . ID_SC EQUALS arithmetic
    (63) exp_assignment -> . ID_LI EQUALS arithmetic
    (64) exp_assignment -> . ID_SC
    (65) exp_assignment -> . ID_LI
    (66) exp_assignment -> . INCREMENT ID_SC
    (67) exp_assignment -> . DECREMENT ID_SC
    (68) exp_assignment -> . ID_SC INCREMENT
    (69) exp_assignment -> . ID_SC DECREMENT
    (35) exp_condition -> . exp_condition GT exp_condition_2
    (36) exp_condition -> . exp_condition LT exp_condition_2
    (37) exp_condition -> . exp_condition_2
    (92) call -> . ID LPAREN RPAREN
    (93) call -> . ID LPAREN function_assignments RPAREN
    (71) exp -> . exp PLUS exp1
    (72) exp -> . exp MINUS exp1
    (73) exp -> . exp1
    (38) exp_condition_2 -> . exp_condition_2 GE exp_condition_3
    (39) exp_condition_2 -> . exp_condition_2 LE exp_condition_3
    (40) exp_condition_2 -> . exp_condition_3
    (74) exp1 -> . exp1 TIMES exp2
    (75) exp1 -> . exp1 DIVIDE exp2
    (76) exp1 -> . exp1 MODULO exp2
    (77) exp1 -> . exp2
    (41) exp_condition_3 -> . exp_condition_3 EQ exp_condition_4
    (42) exp_condition_3 -> . exp_condition_3 NE exp_condition_4
    (43) exp_condition_3 -> . exp_condition_4
    (44) exp_condition_4 -> . exp_condition_4 SGT exp_condition_5
    (45) exp_condition_4 -> . exp_condition_4 SLT exp_condition_5
    (46) exp_condition_4 -> . exp_condition_5
    (47) exp_condition_5 -> . exp_condition_5 SGE exp_condition_6
    (48) exp_condition_5 -> . exp_condition_5 SLE exp_condition_6
    (49) exp_condition_5 -> . exp_condition_6
    (50) exp_condition_6 -> . exp_condition_6 SEQ exp_condition_7
    (51) exp_condition_6 -> . exp_condition_6 SNE exp_condition_7
    (52) exp_condition_6 -> . exp_condition_7
    (53) exp_condition_7 -> . exp_condition_7 CMP exp_condition_8
    (54) exp_condition_7 -> . exp_condition_8
    (55) exp_condition_8 -> . attcond
    (56) exp_condition_8 -> . LPAREN exp_condition RPAREN logic exp_condition_logic
    (88) attcond -> . exp_assignment
    (89) attcond -> . NUMBER
    (90) attcond -> . TRUE
    (91) attcond -> . FALSE

    LPAREN          shift and go to state 41
    NUMBER          shift and go to state 76
    TRUE            shift and go to state 78
    FALSE           shift and go to state 79
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 21
    ID              shift and go to state 6

    exp3                           shift and go to state 40
    exp2                           shift and go to state 116
    exp_assignment                 shift and go to state 77
    exp_condition                  shift and go to state 42
    call                           shift and go to state 43
    exp                            shift and go to state 110
    exp_condition_2                shift and go to state 44
    exp1                           shift and go to state 38
    exp_condition_3                shift and go to state 45
    exp_condition_4                shift and go to state 46
    exp_condition_5                shift and go to state 47
    exp_condition_6                shift and go to state 48
    exp_condition_7                shift and go to state 49
    exp_condition_8                shift and go to state 50
    attcond                        shift and go to state 80

state 74

    (80) exp3 -> LPAREN arithmetic . RPAREN

    RPAREN          shift and go to state 117


state 75

    (56) exp_condition_8 -> LPAREN exp_condition . RPAREN logic exp_condition_logic
    (35) exp_condition -> exp_condition . GT exp_condition_2
    (36) exp_condition -> exp_condition . LT exp_condition_2
    (83) exp3 -> exp_condition .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 118
    GT              shift and go to state 81
    LT              shift and go to state 82
    XOR             reduce using rule 83 (exp3 -> exp_condition .)
    TIMES           reduce using rule 83 (exp3 -> exp_condition .)
    DIVIDE          reduce using rule 83 (exp3 -> exp_condition .)
    MODULO          reduce using rule 83 (exp3 -> exp_condition .)
    PLUS            reduce using rule 83 (exp3 -> exp_condition .)
    MINUS           reduce using rule 83 (exp3 -> exp_condition .)

  ! RPAREN          [ reduce using rule 83 (exp3 -> exp_condition .) ]


state 76

    (81) exp3 -> NUMBER .
    (89) attcond -> NUMBER .

  ! reduce/reduce conflict for CMP resolved using rule 81 (exp3 -> NUMBER .)
  ! reduce/reduce conflict for SEQ resolved using rule 81 (exp3 -> NUMBER .)
  ! reduce/reduce conflict for SNE resolved using rule 81 (exp3 -> NUMBER .)
  ! reduce/reduce conflict for SGE resolved using rule 81 (exp3 -> NUMBER .)
  ! reduce/reduce conflict for SLE resolved using rule 81 (exp3 -> NUMBER .)
  ! reduce/reduce conflict for SGT resolved using rule 81 (exp3 -> NUMBER .)
  ! reduce/reduce conflict for SLT resolved using rule 81 (exp3 -> NUMBER .)
  ! reduce/reduce conflict for EQ resolved using rule 81 (exp3 -> NUMBER .)
  ! reduce/reduce conflict for NE resolved using rule 81 (exp3 -> NUMBER .)
  ! reduce/reduce conflict for GE resolved using rule 81 (exp3 -> NUMBER .)
  ! reduce/reduce conflict for LE resolved using rule 81 (exp3 -> NUMBER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 81 (exp3 -> NUMBER .)
  ! reduce/reduce conflict for GT resolved using rule 81 (exp3 -> NUMBER .)
  ! reduce/reduce conflict for LT resolved using rule 81 (exp3 -> NUMBER .)
  ! reduce/reduce conflict for XOR resolved using rule 81 (exp3 -> NUMBER .)
  ! reduce/reduce conflict for TIMES resolved using rule 81 (exp3 -> NUMBER .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 81 (exp3 -> NUMBER .)
  ! reduce/reduce conflict for MODULO resolved using rule 81 (exp3 -> NUMBER .)
  ! reduce/reduce conflict for PLUS resolved using rule 81 (exp3 -> NUMBER .)
  ! reduce/reduce conflict for MINUS resolved using rule 81 (exp3 -> NUMBER .)
  ! reduce/reduce conflict for RETURN resolved using rule 81 (exp3 -> NUMBER .)
  ! reduce/reduce conflict for BREAK resolved using rule 81 (exp3 -> NUMBER .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 81 (exp3 -> NUMBER .)
  ! reduce/reduce conflict for IF resolved using rule 81 (exp3 -> NUMBER .)
  ! reduce/reduce conflict for ID_SC resolved using rule 81 (exp3 -> NUMBER .)
  ! reduce/reduce conflict for ID_LI resolved using rule 81 (exp3 -> NUMBER .)
  ! reduce/reduce conflict for INCREMENT resolved using rule 81 (exp3 -> NUMBER .)
  ! reduce/reduce conflict for DECREMENT resolved using rule 81 (exp3 -> NUMBER .)
  ! reduce/reduce conflict for ID resolved using rule 81 (exp3 -> NUMBER .)
  ! reduce/reduce conflict for FOR resolved using rule 81 (exp3 -> NUMBER .)
  ! reduce/reduce conflict for DO resolved using rule 81 (exp3 -> NUMBER .)
  ! reduce/reduce conflict for WHILE resolved using rule 81 (exp3 -> NUMBER .)
  ! reduce/reduce conflict for SUB resolved using rule 81 (exp3 -> NUMBER .)
  ! reduce/reduce conflict for $end resolved using rule 81 (exp3 -> NUMBER .)
  ! reduce/reduce conflict for RBRACE resolved using rule 81 (exp3 -> NUMBER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 81 (exp3 -> NUMBER .)
  ! reduce/reduce conflict for COMMA resolved using rule 81 (exp3 -> NUMBER .)
    XOR             reduce using rule 81 (exp3 -> NUMBER .)
    TIMES           reduce using rule 81 (exp3 -> NUMBER .)
    DIVIDE          reduce using rule 81 (exp3 -> NUMBER .)
    MODULO          reduce using rule 81 (exp3 -> NUMBER .)
    PLUS            reduce using rule 81 (exp3 -> NUMBER .)
    MINUS           reduce using rule 81 (exp3 -> NUMBER .)
    RPAREN          reduce using rule 81 (exp3 -> NUMBER .)
    RETURN          reduce using rule 81 (exp3 -> NUMBER .)
    BREAK           reduce using rule 81 (exp3 -> NUMBER .)
    CONTINUE        reduce using rule 81 (exp3 -> NUMBER .)
    IF              reduce using rule 81 (exp3 -> NUMBER .)
    ID_SC           reduce using rule 81 (exp3 -> NUMBER .)
    ID_LI           reduce using rule 81 (exp3 -> NUMBER .)
    INCREMENT       reduce using rule 81 (exp3 -> NUMBER .)
    DECREMENT       reduce using rule 81 (exp3 -> NUMBER .)
    ID              reduce using rule 81 (exp3 -> NUMBER .)
    FOR             reduce using rule 81 (exp3 -> NUMBER .)
    DO              reduce using rule 81 (exp3 -> NUMBER .)
    WHILE           reduce using rule 81 (exp3 -> NUMBER .)
    SUB             reduce using rule 81 (exp3 -> NUMBER .)
    $end            reduce using rule 81 (exp3 -> NUMBER .)
    RBRACE          reduce using rule 81 (exp3 -> NUMBER .)
    SEMICOLON       reduce using rule 81 (exp3 -> NUMBER .)
    CMP             reduce using rule 81 (exp3 -> NUMBER .)
    SEQ             reduce using rule 81 (exp3 -> NUMBER .)
    SNE             reduce using rule 81 (exp3 -> NUMBER .)
    SGE             reduce using rule 81 (exp3 -> NUMBER .)
    SLE             reduce using rule 81 (exp3 -> NUMBER .)
    SGT             reduce using rule 81 (exp3 -> NUMBER .)
    SLT             reduce using rule 81 (exp3 -> NUMBER .)
    EQ              reduce using rule 81 (exp3 -> NUMBER .)
    NE              reduce using rule 81 (exp3 -> NUMBER .)
    GE              reduce using rule 81 (exp3 -> NUMBER .)
    LE              reduce using rule 81 (exp3 -> NUMBER .)
    GT              reduce using rule 81 (exp3 -> NUMBER .)
    LT              reduce using rule 81 (exp3 -> NUMBER .)
    COMMA           reduce using rule 81 (exp3 -> NUMBER .)

  ! CMP             [ reduce using rule 89 (attcond -> NUMBER .) ]
  ! SEQ             [ reduce using rule 89 (attcond -> NUMBER .) ]
  ! SNE             [ reduce using rule 89 (attcond -> NUMBER .) ]
  ! SGE             [ reduce using rule 89 (attcond -> NUMBER .) ]
  ! SLE             [ reduce using rule 89 (attcond -> NUMBER .) ]
  ! SGT             [ reduce using rule 89 (attcond -> NUMBER .) ]
  ! SLT             [ reduce using rule 89 (attcond -> NUMBER .) ]
  ! EQ              [ reduce using rule 89 (attcond -> NUMBER .) ]
  ! NE              [ reduce using rule 89 (attcond -> NUMBER .) ]
  ! GE              [ reduce using rule 89 (attcond -> NUMBER .) ]
  ! LE              [ reduce using rule 89 (attcond -> NUMBER .) ]
  ! RPAREN          [ reduce using rule 89 (attcond -> NUMBER .) ]
  ! GT              [ reduce using rule 89 (attcond -> NUMBER .) ]
  ! LT              [ reduce using rule 89 (attcond -> NUMBER .) ]
  ! XOR             [ reduce using rule 89 (attcond -> NUMBER .) ]
  ! TIMES           [ reduce using rule 89 (attcond -> NUMBER .) ]
  ! DIVIDE          [ reduce using rule 89 (attcond -> NUMBER .) ]
  ! MODULO          [ reduce using rule 89 (attcond -> NUMBER .) ]
  ! PLUS            [ reduce using rule 89 (attcond -> NUMBER .) ]
  ! MINUS           [ reduce using rule 89 (attcond -> NUMBER .) ]
  ! RETURN          [ reduce using rule 89 (attcond -> NUMBER .) ]
  ! BREAK           [ reduce using rule 89 (attcond -> NUMBER .) ]
  ! CONTINUE        [ reduce using rule 89 (attcond -> NUMBER .) ]
  ! IF              [ reduce using rule 89 (attcond -> NUMBER .) ]
  ! ID_SC           [ reduce using rule 89 (attcond -> NUMBER .) ]
  ! ID_LI           [ reduce using rule 89 (attcond -> NUMBER .) ]
  ! INCREMENT       [ reduce using rule 89 (attcond -> NUMBER .) ]
  ! DECREMENT       [ reduce using rule 89 (attcond -> NUMBER .) ]
  ! ID              [ reduce using rule 89 (attcond -> NUMBER .) ]
  ! FOR             [ reduce using rule 89 (attcond -> NUMBER .) ]
  ! DO              [ reduce using rule 89 (attcond -> NUMBER .) ]
  ! WHILE           [ reduce using rule 89 (attcond -> NUMBER .) ]
  ! SUB             [ reduce using rule 89 (attcond -> NUMBER .) ]
  ! $end            [ reduce using rule 89 (attcond -> NUMBER .) ]
  ! RBRACE          [ reduce using rule 89 (attcond -> NUMBER .) ]
  ! SEMICOLON       [ reduce using rule 89 (attcond -> NUMBER .) ]
  ! COMMA           [ reduce using rule 89 (attcond -> NUMBER .) ]


state 77

    (82) exp3 -> exp_assignment .
    (88) attcond -> exp_assignment .

  ! reduce/reduce conflict for CMP resolved using rule 82 (exp3 -> exp_assignment .)
  ! reduce/reduce conflict for SEQ resolved using rule 82 (exp3 -> exp_assignment .)
  ! reduce/reduce conflict for SNE resolved using rule 82 (exp3 -> exp_assignment .)
  ! reduce/reduce conflict for SGE resolved using rule 82 (exp3 -> exp_assignment .)
  ! reduce/reduce conflict for SLE resolved using rule 82 (exp3 -> exp_assignment .)
  ! reduce/reduce conflict for SGT resolved using rule 82 (exp3 -> exp_assignment .)
  ! reduce/reduce conflict for SLT resolved using rule 82 (exp3 -> exp_assignment .)
  ! reduce/reduce conflict for EQ resolved using rule 82 (exp3 -> exp_assignment .)
  ! reduce/reduce conflict for NE resolved using rule 82 (exp3 -> exp_assignment .)
  ! reduce/reduce conflict for GE resolved using rule 82 (exp3 -> exp_assignment .)
  ! reduce/reduce conflict for LE resolved using rule 82 (exp3 -> exp_assignment .)
  ! reduce/reduce conflict for RPAREN resolved using rule 82 (exp3 -> exp_assignment .)
  ! reduce/reduce conflict for GT resolved using rule 82 (exp3 -> exp_assignment .)
  ! reduce/reduce conflict for LT resolved using rule 82 (exp3 -> exp_assignment .)
  ! reduce/reduce conflict for XOR resolved using rule 82 (exp3 -> exp_assignment .)
  ! reduce/reduce conflict for TIMES resolved using rule 82 (exp3 -> exp_assignment .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 82 (exp3 -> exp_assignment .)
  ! reduce/reduce conflict for MODULO resolved using rule 82 (exp3 -> exp_assignment .)
  ! reduce/reduce conflict for PLUS resolved using rule 82 (exp3 -> exp_assignment .)
  ! reduce/reduce conflict for MINUS resolved using rule 82 (exp3 -> exp_assignment .)
  ! reduce/reduce conflict for RETURN resolved using rule 82 (exp3 -> exp_assignment .)
  ! reduce/reduce conflict for BREAK resolved using rule 82 (exp3 -> exp_assignment .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 82 (exp3 -> exp_assignment .)
  ! reduce/reduce conflict for IF resolved using rule 82 (exp3 -> exp_assignment .)
  ! reduce/reduce conflict for ID_SC resolved using rule 82 (exp3 -> exp_assignment .)
  ! reduce/reduce conflict for ID_LI resolved using rule 82 (exp3 -> exp_assignment .)
  ! reduce/reduce conflict for INCREMENT resolved using rule 82 (exp3 -> exp_assignment .)
  ! reduce/reduce conflict for DECREMENT resolved using rule 82 (exp3 -> exp_assignment .)
  ! reduce/reduce conflict for ID resolved using rule 82 (exp3 -> exp_assignment .)
  ! reduce/reduce conflict for FOR resolved using rule 82 (exp3 -> exp_assignment .)
  ! reduce/reduce conflict for DO resolved using rule 82 (exp3 -> exp_assignment .)
  ! reduce/reduce conflict for WHILE resolved using rule 82 (exp3 -> exp_assignment .)
  ! reduce/reduce conflict for SUB resolved using rule 82 (exp3 -> exp_assignment .)
  ! reduce/reduce conflict for $end resolved using rule 82 (exp3 -> exp_assignment .)
  ! reduce/reduce conflict for RBRACE resolved using rule 82 (exp3 -> exp_assignment .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 82 (exp3 -> exp_assignment .)
  ! reduce/reduce conflict for COMMA resolved using rule 82 (exp3 -> exp_assignment .)
    XOR             reduce using rule 82 (exp3 -> exp_assignment .)
    TIMES           reduce using rule 82 (exp3 -> exp_assignment .)
    DIVIDE          reduce using rule 82 (exp3 -> exp_assignment .)
    MODULO          reduce using rule 82 (exp3 -> exp_assignment .)
    PLUS            reduce using rule 82 (exp3 -> exp_assignment .)
    MINUS           reduce using rule 82 (exp3 -> exp_assignment .)
    RPAREN          reduce using rule 82 (exp3 -> exp_assignment .)
    RETURN          reduce using rule 82 (exp3 -> exp_assignment .)
    BREAK           reduce using rule 82 (exp3 -> exp_assignment .)
    CONTINUE        reduce using rule 82 (exp3 -> exp_assignment .)
    IF              reduce using rule 82 (exp3 -> exp_assignment .)
    ID_SC           reduce using rule 82 (exp3 -> exp_assignment .)
    ID_LI           reduce using rule 82 (exp3 -> exp_assignment .)
    INCREMENT       reduce using rule 82 (exp3 -> exp_assignment .)
    DECREMENT       reduce using rule 82 (exp3 -> exp_assignment .)
    ID              reduce using rule 82 (exp3 -> exp_assignment .)
    FOR             reduce using rule 82 (exp3 -> exp_assignment .)
    DO              reduce using rule 82 (exp3 -> exp_assignment .)
    WHILE           reduce using rule 82 (exp3 -> exp_assignment .)
    SUB             reduce using rule 82 (exp3 -> exp_assignment .)
    $end            reduce using rule 82 (exp3 -> exp_assignment .)
    RBRACE          reduce using rule 82 (exp3 -> exp_assignment .)
    SEMICOLON       reduce using rule 82 (exp3 -> exp_assignment .)
    CMP             reduce using rule 82 (exp3 -> exp_assignment .)
    SEQ             reduce using rule 82 (exp3 -> exp_assignment .)
    SNE             reduce using rule 82 (exp3 -> exp_assignment .)
    SGE             reduce using rule 82 (exp3 -> exp_assignment .)
    SLE             reduce using rule 82 (exp3 -> exp_assignment .)
    SGT             reduce using rule 82 (exp3 -> exp_assignment .)
    SLT             reduce using rule 82 (exp3 -> exp_assignment .)
    EQ              reduce using rule 82 (exp3 -> exp_assignment .)
    NE              reduce using rule 82 (exp3 -> exp_assignment .)
    GE              reduce using rule 82 (exp3 -> exp_assignment .)
    LE              reduce using rule 82 (exp3 -> exp_assignment .)
    GT              reduce using rule 82 (exp3 -> exp_assignment .)
    LT              reduce using rule 82 (exp3 -> exp_assignment .)
    COMMA           reduce using rule 82 (exp3 -> exp_assignment .)

  ! CMP             [ reduce using rule 88 (attcond -> exp_assignment .) ]
  ! SEQ             [ reduce using rule 88 (attcond -> exp_assignment .) ]
  ! SNE             [ reduce using rule 88 (attcond -> exp_assignment .) ]
  ! SGE             [ reduce using rule 88 (attcond -> exp_assignment .) ]
  ! SLE             [ reduce using rule 88 (attcond -> exp_assignment .) ]
  ! SGT             [ reduce using rule 88 (attcond -> exp_assignment .) ]
  ! SLT             [ reduce using rule 88 (attcond -> exp_assignment .) ]
  ! EQ              [ reduce using rule 88 (attcond -> exp_assignment .) ]
  ! NE              [ reduce using rule 88 (attcond -> exp_assignment .) ]
  ! GE              [ reduce using rule 88 (attcond -> exp_assignment .) ]
  ! LE              [ reduce using rule 88 (attcond -> exp_assignment .) ]
  ! RPAREN          [ reduce using rule 88 (attcond -> exp_assignment .) ]
  ! GT              [ reduce using rule 88 (attcond -> exp_assignment .) ]
  ! LT              [ reduce using rule 88 (attcond -> exp_assignment .) ]
  ! XOR             [ reduce using rule 88 (attcond -> exp_assignment .) ]
  ! TIMES           [ reduce using rule 88 (attcond -> exp_assignment .) ]
  ! DIVIDE          [ reduce using rule 88 (attcond -> exp_assignment .) ]
  ! MODULO          [ reduce using rule 88 (attcond -> exp_assignment .) ]
  ! PLUS            [ reduce using rule 88 (attcond -> exp_assignment .) ]
  ! MINUS           [ reduce using rule 88 (attcond -> exp_assignment .) ]
  ! RETURN          [ reduce using rule 88 (attcond -> exp_assignment .) ]
  ! BREAK           [ reduce using rule 88 (attcond -> exp_assignment .) ]
  ! CONTINUE        [ reduce using rule 88 (attcond -> exp_assignment .) ]
  ! IF              [ reduce using rule 88 (attcond -> exp_assignment .) ]
  ! ID_SC           [ reduce using rule 88 (attcond -> exp_assignment .) ]
  ! ID_LI           [ reduce using rule 88 (attcond -> exp_assignment .) ]
  ! INCREMENT       [ reduce using rule 88 (attcond -> exp_assignment .) ]
  ! DECREMENT       [ reduce using rule 88 (attcond -> exp_assignment .) ]
  ! ID              [ reduce using rule 88 (attcond -> exp_assignment .) ]
  ! FOR             [ reduce using rule 88 (attcond -> exp_assignment .) ]
  ! DO              [ reduce using rule 88 (attcond -> exp_assignment .) ]
  ! WHILE           [ reduce using rule 88 (attcond -> exp_assignment .) ]
  ! SUB             [ reduce using rule 88 (attcond -> exp_assignment .) ]
  ! $end            [ reduce using rule 88 (attcond -> exp_assignment .) ]
  ! RBRACE          [ reduce using rule 88 (attcond -> exp_assignment .) ]
  ! SEMICOLON       [ reduce using rule 88 (attcond -> exp_assignment .) ]
  ! COMMA           [ reduce using rule 88 (attcond -> exp_assignment .) ]


state 78

    (86) exp3 -> TRUE .
    (90) attcond -> TRUE .

  ! reduce/reduce conflict for CMP resolved using rule 86 (exp3 -> TRUE .)
  ! reduce/reduce conflict for SEQ resolved using rule 86 (exp3 -> TRUE .)
  ! reduce/reduce conflict for SNE resolved using rule 86 (exp3 -> TRUE .)
  ! reduce/reduce conflict for SGE resolved using rule 86 (exp3 -> TRUE .)
  ! reduce/reduce conflict for SLE resolved using rule 86 (exp3 -> TRUE .)
  ! reduce/reduce conflict for SGT resolved using rule 86 (exp3 -> TRUE .)
  ! reduce/reduce conflict for SLT resolved using rule 86 (exp3 -> TRUE .)
  ! reduce/reduce conflict for EQ resolved using rule 86 (exp3 -> TRUE .)
  ! reduce/reduce conflict for NE resolved using rule 86 (exp3 -> TRUE .)
  ! reduce/reduce conflict for GE resolved using rule 86 (exp3 -> TRUE .)
  ! reduce/reduce conflict for LE resolved using rule 86 (exp3 -> TRUE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 86 (exp3 -> TRUE .)
  ! reduce/reduce conflict for GT resolved using rule 86 (exp3 -> TRUE .)
  ! reduce/reduce conflict for LT resolved using rule 86 (exp3 -> TRUE .)
  ! reduce/reduce conflict for XOR resolved using rule 86 (exp3 -> TRUE .)
  ! reduce/reduce conflict for TIMES resolved using rule 86 (exp3 -> TRUE .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 86 (exp3 -> TRUE .)
  ! reduce/reduce conflict for MODULO resolved using rule 86 (exp3 -> TRUE .)
  ! reduce/reduce conflict for PLUS resolved using rule 86 (exp3 -> TRUE .)
  ! reduce/reduce conflict for MINUS resolved using rule 86 (exp3 -> TRUE .)
  ! reduce/reduce conflict for RETURN resolved using rule 86 (exp3 -> TRUE .)
  ! reduce/reduce conflict for BREAK resolved using rule 86 (exp3 -> TRUE .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 86 (exp3 -> TRUE .)
  ! reduce/reduce conflict for IF resolved using rule 86 (exp3 -> TRUE .)
  ! reduce/reduce conflict for ID_SC resolved using rule 86 (exp3 -> TRUE .)
  ! reduce/reduce conflict for ID_LI resolved using rule 86 (exp3 -> TRUE .)
  ! reduce/reduce conflict for INCREMENT resolved using rule 86 (exp3 -> TRUE .)
  ! reduce/reduce conflict for DECREMENT resolved using rule 86 (exp3 -> TRUE .)
  ! reduce/reduce conflict for ID resolved using rule 86 (exp3 -> TRUE .)
  ! reduce/reduce conflict for FOR resolved using rule 86 (exp3 -> TRUE .)
  ! reduce/reduce conflict for DO resolved using rule 86 (exp3 -> TRUE .)
  ! reduce/reduce conflict for WHILE resolved using rule 86 (exp3 -> TRUE .)
  ! reduce/reduce conflict for SUB resolved using rule 86 (exp3 -> TRUE .)
  ! reduce/reduce conflict for $end resolved using rule 86 (exp3 -> TRUE .)
  ! reduce/reduce conflict for RBRACE resolved using rule 86 (exp3 -> TRUE .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 86 (exp3 -> TRUE .)
  ! reduce/reduce conflict for COMMA resolved using rule 86 (exp3 -> TRUE .)
    XOR             reduce using rule 86 (exp3 -> TRUE .)
    TIMES           reduce using rule 86 (exp3 -> TRUE .)
    DIVIDE          reduce using rule 86 (exp3 -> TRUE .)
    MODULO          reduce using rule 86 (exp3 -> TRUE .)
    PLUS            reduce using rule 86 (exp3 -> TRUE .)
    MINUS           reduce using rule 86 (exp3 -> TRUE .)
    RPAREN          reduce using rule 86 (exp3 -> TRUE .)
    RETURN          reduce using rule 86 (exp3 -> TRUE .)
    BREAK           reduce using rule 86 (exp3 -> TRUE .)
    CONTINUE        reduce using rule 86 (exp3 -> TRUE .)
    IF              reduce using rule 86 (exp3 -> TRUE .)
    ID_SC           reduce using rule 86 (exp3 -> TRUE .)
    ID_LI           reduce using rule 86 (exp3 -> TRUE .)
    INCREMENT       reduce using rule 86 (exp3 -> TRUE .)
    DECREMENT       reduce using rule 86 (exp3 -> TRUE .)
    ID              reduce using rule 86 (exp3 -> TRUE .)
    FOR             reduce using rule 86 (exp3 -> TRUE .)
    DO              reduce using rule 86 (exp3 -> TRUE .)
    WHILE           reduce using rule 86 (exp3 -> TRUE .)
    SUB             reduce using rule 86 (exp3 -> TRUE .)
    $end            reduce using rule 86 (exp3 -> TRUE .)
    RBRACE          reduce using rule 86 (exp3 -> TRUE .)
    SEMICOLON       reduce using rule 86 (exp3 -> TRUE .)
    CMP             reduce using rule 86 (exp3 -> TRUE .)
    SEQ             reduce using rule 86 (exp3 -> TRUE .)
    SNE             reduce using rule 86 (exp3 -> TRUE .)
    SGE             reduce using rule 86 (exp3 -> TRUE .)
    SLE             reduce using rule 86 (exp3 -> TRUE .)
    SGT             reduce using rule 86 (exp3 -> TRUE .)
    SLT             reduce using rule 86 (exp3 -> TRUE .)
    EQ              reduce using rule 86 (exp3 -> TRUE .)
    NE              reduce using rule 86 (exp3 -> TRUE .)
    GE              reduce using rule 86 (exp3 -> TRUE .)
    LE              reduce using rule 86 (exp3 -> TRUE .)
    GT              reduce using rule 86 (exp3 -> TRUE .)
    LT              reduce using rule 86 (exp3 -> TRUE .)
    COMMA           reduce using rule 86 (exp3 -> TRUE .)

  ! CMP             [ reduce using rule 90 (attcond -> TRUE .) ]
  ! SEQ             [ reduce using rule 90 (attcond -> TRUE .) ]
  ! SNE             [ reduce using rule 90 (attcond -> TRUE .) ]
  ! SGE             [ reduce using rule 90 (attcond -> TRUE .) ]
  ! SLE             [ reduce using rule 90 (attcond -> TRUE .) ]
  ! SGT             [ reduce using rule 90 (attcond -> TRUE .) ]
  ! SLT             [ reduce using rule 90 (attcond -> TRUE .) ]
  ! EQ              [ reduce using rule 90 (attcond -> TRUE .) ]
  ! NE              [ reduce using rule 90 (attcond -> TRUE .) ]
  ! GE              [ reduce using rule 90 (attcond -> TRUE .) ]
  ! LE              [ reduce using rule 90 (attcond -> TRUE .) ]
  ! RPAREN          [ reduce using rule 90 (attcond -> TRUE .) ]
  ! GT              [ reduce using rule 90 (attcond -> TRUE .) ]
  ! LT              [ reduce using rule 90 (attcond -> TRUE .) ]
  ! XOR             [ reduce using rule 90 (attcond -> TRUE .) ]
  ! TIMES           [ reduce using rule 90 (attcond -> TRUE .) ]
  ! DIVIDE          [ reduce using rule 90 (attcond -> TRUE .) ]
  ! MODULO          [ reduce using rule 90 (attcond -> TRUE .) ]
  ! PLUS            [ reduce using rule 90 (attcond -> TRUE .) ]
  ! MINUS           [ reduce using rule 90 (attcond -> TRUE .) ]
  ! RETURN          [ reduce using rule 90 (attcond -> TRUE .) ]
  ! BREAK           [ reduce using rule 90 (attcond -> TRUE .) ]
  ! CONTINUE        [ reduce using rule 90 (attcond -> TRUE .) ]
  ! IF              [ reduce using rule 90 (attcond -> TRUE .) ]
  ! ID_SC           [ reduce using rule 90 (attcond -> TRUE .) ]
  ! ID_LI           [ reduce using rule 90 (attcond -> TRUE .) ]
  ! INCREMENT       [ reduce using rule 90 (attcond -> TRUE .) ]
  ! DECREMENT       [ reduce using rule 90 (attcond -> TRUE .) ]
  ! ID              [ reduce using rule 90 (attcond -> TRUE .) ]
  ! FOR             [ reduce using rule 90 (attcond -> TRUE .) ]
  ! DO              [ reduce using rule 90 (attcond -> TRUE .) ]
  ! WHILE           [ reduce using rule 90 (attcond -> TRUE .) ]
  ! SUB             [ reduce using rule 90 (attcond -> TRUE .) ]
  ! $end            [ reduce using rule 90 (attcond -> TRUE .) ]
  ! RBRACE          [ reduce using rule 90 (attcond -> TRUE .) ]
  ! SEMICOLON       [ reduce using rule 90 (attcond -> TRUE .) ]
  ! COMMA           [ reduce using rule 90 (attcond -> TRUE .) ]


state 79

    (87) exp3 -> FALSE .
    (91) attcond -> FALSE .

  ! reduce/reduce conflict for CMP resolved using rule 87 (exp3 -> FALSE .)
  ! reduce/reduce conflict for SEQ resolved using rule 87 (exp3 -> FALSE .)
  ! reduce/reduce conflict for SNE resolved using rule 87 (exp3 -> FALSE .)
  ! reduce/reduce conflict for SGE resolved using rule 87 (exp3 -> FALSE .)
  ! reduce/reduce conflict for SLE resolved using rule 87 (exp3 -> FALSE .)
  ! reduce/reduce conflict for SGT resolved using rule 87 (exp3 -> FALSE .)
  ! reduce/reduce conflict for SLT resolved using rule 87 (exp3 -> FALSE .)
  ! reduce/reduce conflict for EQ resolved using rule 87 (exp3 -> FALSE .)
  ! reduce/reduce conflict for NE resolved using rule 87 (exp3 -> FALSE .)
  ! reduce/reduce conflict for GE resolved using rule 87 (exp3 -> FALSE .)
  ! reduce/reduce conflict for LE resolved using rule 87 (exp3 -> FALSE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 87 (exp3 -> FALSE .)
  ! reduce/reduce conflict for GT resolved using rule 87 (exp3 -> FALSE .)
  ! reduce/reduce conflict for LT resolved using rule 87 (exp3 -> FALSE .)
  ! reduce/reduce conflict for XOR resolved using rule 87 (exp3 -> FALSE .)
  ! reduce/reduce conflict for TIMES resolved using rule 87 (exp3 -> FALSE .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 87 (exp3 -> FALSE .)
  ! reduce/reduce conflict for MODULO resolved using rule 87 (exp3 -> FALSE .)
  ! reduce/reduce conflict for PLUS resolved using rule 87 (exp3 -> FALSE .)
  ! reduce/reduce conflict for MINUS resolved using rule 87 (exp3 -> FALSE .)
  ! reduce/reduce conflict for RETURN resolved using rule 87 (exp3 -> FALSE .)
  ! reduce/reduce conflict for BREAK resolved using rule 87 (exp3 -> FALSE .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 87 (exp3 -> FALSE .)
  ! reduce/reduce conflict for IF resolved using rule 87 (exp3 -> FALSE .)
  ! reduce/reduce conflict for ID_SC resolved using rule 87 (exp3 -> FALSE .)
  ! reduce/reduce conflict for ID_LI resolved using rule 87 (exp3 -> FALSE .)
  ! reduce/reduce conflict for INCREMENT resolved using rule 87 (exp3 -> FALSE .)
  ! reduce/reduce conflict for DECREMENT resolved using rule 87 (exp3 -> FALSE .)
  ! reduce/reduce conflict for ID resolved using rule 87 (exp3 -> FALSE .)
  ! reduce/reduce conflict for FOR resolved using rule 87 (exp3 -> FALSE .)
  ! reduce/reduce conflict for DO resolved using rule 87 (exp3 -> FALSE .)
  ! reduce/reduce conflict for WHILE resolved using rule 87 (exp3 -> FALSE .)
  ! reduce/reduce conflict for SUB resolved using rule 87 (exp3 -> FALSE .)
  ! reduce/reduce conflict for $end resolved using rule 87 (exp3 -> FALSE .)
  ! reduce/reduce conflict for RBRACE resolved using rule 87 (exp3 -> FALSE .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 87 (exp3 -> FALSE .)
  ! reduce/reduce conflict for COMMA resolved using rule 87 (exp3 -> FALSE .)
    XOR             reduce using rule 87 (exp3 -> FALSE .)
    TIMES           reduce using rule 87 (exp3 -> FALSE .)
    DIVIDE          reduce using rule 87 (exp3 -> FALSE .)
    MODULO          reduce using rule 87 (exp3 -> FALSE .)
    PLUS            reduce using rule 87 (exp3 -> FALSE .)
    MINUS           reduce using rule 87 (exp3 -> FALSE .)
    RPAREN          reduce using rule 87 (exp3 -> FALSE .)
    RETURN          reduce using rule 87 (exp3 -> FALSE .)
    BREAK           reduce using rule 87 (exp3 -> FALSE .)
    CONTINUE        reduce using rule 87 (exp3 -> FALSE .)
    IF              reduce using rule 87 (exp3 -> FALSE .)
    ID_SC           reduce using rule 87 (exp3 -> FALSE .)
    ID_LI           reduce using rule 87 (exp3 -> FALSE .)
    INCREMENT       reduce using rule 87 (exp3 -> FALSE .)
    DECREMENT       reduce using rule 87 (exp3 -> FALSE .)
    ID              reduce using rule 87 (exp3 -> FALSE .)
    FOR             reduce using rule 87 (exp3 -> FALSE .)
    DO              reduce using rule 87 (exp3 -> FALSE .)
    WHILE           reduce using rule 87 (exp3 -> FALSE .)
    SUB             reduce using rule 87 (exp3 -> FALSE .)
    $end            reduce using rule 87 (exp3 -> FALSE .)
    RBRACE          reduce using rule 87 (exp3 -> FALSE .)
    SEMICOLON       reduce using rule 87 (exp3 -> FALSE .)
    CMP             reduce using rule 87 (exp3 -> FALSE .)
    SEQ             reduce using rule 87 (exp3 -> FALSE .)
    SNE             reduce using rule 87 (exp3 -> FALSE .)
    SGE             reduce using rule 87 (exp3 -> FALSE .)
    SLE             reduce using rule 87 (exp3 -> FALSE .)
    SGT             reduce using rule 87 (exp3 -> FALSE .)
    SLT             reduce using rule 87 (exp3 -> FALSE .)
    EQ              reduce using rule 87 (exp3 -> FALSE .)
    NE              reduce using rule 87 (exp3 -> FALSE .)
    GE              reduce using rule 87 (exp3 -> FALSE .)
    LE              reduce using rule 87 (exp3 -> FALSE .)
    GT              reduce using rule 87 (exp3 -> FALSE .)
    LT              reduce using rule 87 (exp3 -> FALSE .)
    COMMA           reduce using rule 87 (exp3 -> FALSE .)

  ! CMP             [ reduce using rule 91 (attcond -> FALSE .) ]
  ! SEQ             [ reduce using rule 91 (attcond -> FALSE .) ]
  ! SNE             [ reduce using rule 91 (attcond -> FALSE .) ]
  ! SGE             [ reduce using rule 91 (attcond -> FALSE .) ]
  ! SLE             [ reduce using rule 91 (attcond -> FALSE .) ]
  ! SGT             [ reduce using rule 91 (attcond -> FALSE .) ]
  ! SLT             [ reduce using rule 91 (attcond -> FALSE .) ]
  ! EQ              [ reduce using rule 91 (attcond -> FALSE .) ]
  ! NE              [ reduce using rule 91 (attcond -> FALSE .) ]
  ! GE              [ reduce using rule 91 (attcond -> FALSE .) ]
  ! LE              [ reduce using rule 91 (attcond -> FALSE .) ]
  ! RPAREN          [ reduce using rule 91 (attcond -> FALSE .) ]
  ! GT              [ reduce using rule 91 (attcond -> FALSE .) ]
  ! LT              [ reduce using rule 91 (attcond -> FALSE .) ]
  ! XOR             [ reduce using rule 91 (attcond -> FALSE .) ]
  ! TIMES           [ reduce using rule 91 (attcond -> FALSE .) ]
  ! DIVIDE          [ reduce using rule 91 (attcond -> FALSE .) ]
  ! MODULO          [ reduce using rule 91 (attcond -> FALSE .) ]
  ! PLUS            [ reduce using rule 91 (attcond -> FALSE .) ]
  ! MINUS           [ reduce using rule 91 (attcond -> FALSE .) ]
  ! RETURN          [ reduce using rule 91 (attcond -> FALSE .) ]
  ! BREAK           [ reduce using rule 91 (attcond -> FALSE .) ]
  ! CONTINUE        [ reduce using rule 91 (attcond -> FALSE .) ]
  ! IF              [ reduce using rule 91 (attcond -> FALSE .) ]
  ! ID_SC           [ reduce using rule 91 (attcond -> FALSE .) ]
  ! ID_LI           [ reduce using rule 91 (attcond -> FALSE .) ]
  ! INCREMENT       [ reduce using rule 91 (attcond -> FALSE .) ]
  ! DECREMENT       [ reduce using rule 91 (attcond -> FALSE .) ]
  ! ID              [ reduce using rule 91 (attcond -> FALSE .) ]
  ! FOR             [ reduce using rule 91 (attcond -> FALSE .) ]
  ! DO              [ reduce using rule 91 (attcond -> FALSE .) ]
  ! WHILE           [ reduce using rule 91 (attcond -> FALSE .) ]
  ! SUB             [ reduce using rule 91 (attcond -> FALSE .) ]
  ! $end            [ reduce using rule 91 (attcond -> FALSE .) ]
  ! RBRACE          [ reduce using rule 91 (attcond -> FALSE .) ]
  ! SEMICOLON       [ reduce using rule 91 (attcond -> FALSE .) ]
  ! COMMA           [ reduce using rule 91 (attcond -> FALSE .) ]


state 80

    (55) exp_condition_8 -> attcond .

    CMP             reduce using rule 55 (exp_condition_8 -> attcond .)
    SEQ             reduce using rule 55 (exp_condition_8 -> attcond .)
    SNE             reduce using rule 55 (exp_condition_8 -> attcond .)
    SGE             reduce using rule 55 (exp_condition_8 -> attcond .)
    SLE             reduce using rule 55 (exp_condition_8 -> attcond .)
    SGT             reduce using rule 55 (exp_condition_8 -> attcond .)
    SLT             reduce using rule 55 (exp_condition_8 -> attcond .)
    EQ              reduce using rule 55 (exp_condition_8 -> attcond .)
    NE              reduce using rule 55 (exp_condition_8 -> attcond .)
    GE              reduce using rule 55 (exp_condition_8 -> attcond .)
    LE              reduce using rule 55 (exp_condition_8 -> attcond .)
    RPAREN          reduce using rule 55 (exp_condition_8 -> attcond .)
    GT              reduce using rule 55 (exp_condition_8 -> attcond .)
    LT              reduce using rule 55 (exp_condition_8 -> attcond .)
    XOR             reduce using rule 55 (exp_condition_8 -> attcond .)
    TIMES           reduce using rule 55 (exp_condition_8 -> attcond .)
    DIVIDE          reduce using rule 55 (exp_condition_8 -> attcond .)
    MODULO          reduce using rule 55 (exp_condition_8 -> attcond .)
    PLUS            reduce using rule 55 (exp_condition_8 -> attcond .)
    MINUS           reduce using rule 55 (exp_condition_8 -> attcond .)
    RETURN          reduce using rule 55 (exp_condition_8 -> attcond .)
    BREAK           reduce using rule 55 (exp_condition_8 -> attcond .)
    CONTINUE        reduce using rule 55 (exp_condition_8 -> attcond .)
    IF              reduce using rule 55 (exp_condition_8 -> attcond .)
    ID_SC           reduce using rule 55 (exp_condition_8 -> attcond .)
    ID_LI           reduce using rule 55 (exp_condition_8 -> attcond .)
    INCREMENT       reduce using rule 55 (exp_condition_8 -> attcond .)
    DECREMENT       reduce using rule 55 (exp_condition_8 -> attcond .)
    ID              reduce using rule 55 (exp_condition_8 -> attcond .)
    FOR             reduce using rule 55 (exp_condition_8 -> attcond .)
    DO              reduce using rule 55 (exp_condition_8 -> attcond .)
    WHILE           reduce using rule 55 (exp_condition_8 -> attcond .)
    SUB             reduce using rule 55 (exp_condition_8 -> attcond .)
    $end            reduce using rule 55 (exp_condition_8 -> attcond .)
    RBRACE          reduce using rule 55 (exp_condition_8 -> attcond .)
    SEMICOLON       reduce using rule 55 (exp_condition_8 -> attcond .)
    COMMA           reduce using rule 55 (exp_condition_8 -> attcond .)


state 81

    (35) exp_condition -> exp_condition GT . exp_condition_2
    (38) exp_condition_2 -> . exp_condition_2 GE exp_condition_3
    (39) exp_condition_2 -> . exp_condition_2 LE exp_condition_3
    (40) exp_condition_2 -> . exp_condition_3
    (41) exp_condition_3 -> . exp_condition_3 EQ exp_condition_4
    (42) exp_condition_3 -> . exp_condition_3 NE exp_condition_4
    (43) exp_condition_3 -> . exp_condition_4
    (44) exp_condition_4 -> . exp_condition_4 SGT exp_condition_5
    (45) exp_condition_4 -> . exp_condition_4 SLT exp_condition_5
    (46) exp_condition_4 -> . exp_condition_5
    (47) exp_condition_5 -> . exp_condition_5 SGE exp_condition_6
    (48) exp_condition_5 -> . exp_condition_5 SLE exp_condition_6
    (49) exp_condition_5 -> . exp_condition_6
    (50) exp_condition_6 -> . exp_condition_6 SEQ exp_condition_7
    (51) exp_condition_6 -> . exp_condition_6 SNE exp_condition_7
    (52) exp_condition_6 -> . exp_condition_7
    (53) exp_condition_7 -> . exp_condition_7 CMP exp_condition_8
    (54) exp_condition_7 -> . exp_condition_8
    (55) exp_condition_8 -> . attcond
    (56) exp_condition_8 -> . LPAREN exp_condition RPAREN logic exp_condition_logic
    (88) attcond -> . exp_assignment
    (89) attcond -> . NUMBER
    (90) attcond -> . TRUE
    (91) attcond -> . FALSE
    (62) exp_assignment -> . ID_SC EQUALS arithmetic
    (63) exp_assignment -> . ID_LI EQUALS arithmetic
    (64) exp_assignment -> . ID_SC
    (65) exp_assignment -> . ID_LI
    (66) exp_assignment -> . INCREMENT ID_SC
    (67) exp_assignment -> . DECREMENT ID_SC
    (68) exp_assignment -> . ID_SC INCREMENT
    (69) exp_assignment -> . ID_SC DECREMENT

    LPAREN          shift and go to state 94
    NUMBER          shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 21

    exp_condition_2                shift and go to state 119
    exp_condition_3                shift and go to state 45
    exp_condition_4                shift and go to state 46
    exp_condition_5                shift and go to state 47
    exp_condition_6                shift and go to state 48
    exp_condition_7                shift and go to state 49
    exp_condition_8                shift and go to state 50
    attcond                        shift and go to state 80
    exp_assignment                 shift and go to state 96

state 82

    (36) exp_condition -> exp_condition LT . exp_condition_2
    (38) exp_condition_2 -> . exp_condition_2 GE exp_condition_3
    (39) exp_condition_2 -> . exp_condition_2 LE exp_condition_3
    (40) exp_condition_2 -> . exp_condition_3
    (41) exp_condition_3 -> . exp_condition_3 EQ exp_condition_4
    (42) exp_condition_3 -> . exp_condition_3 NE exp_condition_4
    (43) exp_condition_3 -> . exp_condition_4
    (44) exp_condition_4 -> . exp_condition_4 SGT exp_condition_5
    (45) exp_condition_4 -> . exp_condition_4 SLT exp_condition_5
    (46) exp_condition_4 -> . exp_condition_5
    (47) exp_condition_5 -> . exp_condition_5 SGE exp_condition_6
    (48) exp_condition_5 -> . exp_condition_5 SLE exp_condition_6
    (49) exp_condition_5 -> . exp_condition_6
    (50) exp_condition_6 -> . exp_condition_6 SEQ exp_condition_7
    (51) exp_condition_6 -> . exp_condition_6 SNE exp_condition_7
    (52) exp_condition_6 -> . exp_condition_7
    (53) exp_condition_7 -> . exp_condition_7 CMP exp_condition_8
    (54) exp_condition_7 -> . exp_condition_8
    (55) exp_condition_8 -> . attcond
    (56) exp_condition_8 -> . LPAREN exp_condition RPAREN logic exp_condition_logic
    (88) attcond -> . exp_assignment
    (89) attcond -> . NUMBER
    (90) attcond -> . TRUE
    (91) attcond -> . FALSE
    (62) exp_assignment -> . ID_SC EQUALS arithmetic
    (63) exp_assignment -> . ID_LI EQUALS arithmetic
    (64) exp_assignment -> . ID_SC
    (65) exp_assignment -> . ID_LI
    (66) exp_assignment -> . INCREMENT ID_SC
    (67) exp_assignment -> . DECREMENT ID_SC
    (68) exp_assignment -> . ID_SC INCREMENT
    (69) exp_assignment -> . ID_SC DECREMENT

    LPAREN          shift and go to state 94
    NUMBER          shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 21

    exp_condition_2                shift and go to state 120
    exp_condition_3                shift and go to state 45
    exp_condition_4                shift and go to state 46
    exp_condition_5                shift and go to state 47
    exp_condition_6                shift and go to state 48
    exp_condition_7                shift and go to state 49
    exp_condition_8                shift and go to state 50
    attcond                        shift and go to state 80
    exp_assignment                 shift and go to state 96

state 83

    (38) exp_condition_2 -> exp_condition_2 GE . exp_condition_3
    (41) exp_condition_3 -> . exp_condition_3 EQ exp_condition_4
    (42) exp_condition_3 -> . exp_condition_3 NE exp_condition_4
    (43) exp_condition_3 -> . exp_condition_4
    (44) exp_condition_4 -> . exp_condition_4 SGT exp_condition_5
    (45) exp_condition_4 -> . exp_condition_4 SLT exp_condition_5
    (46) exp_condition_4 -> . exp_condition_5
    (47) exp_condition_5 -> . exp_condition_5 SGE exp_condition_6
    (48) exp_condition_5 -> . exp_condition_5 SLE exp_condition_6
    (49) exp_condition_5 -> . exp_condition_6
    (50) exp_condition_6 -> . exp_condition_6 SEQ exp_condition_7
    (51) exp_condition_6 -> . exp_condition_6 SNE exp_condition_7
    (52) exp_condition_6 -> . exp_condition_7
    (53) exp_condition_7 -> . exp_condition_7 CMP exp_condition_8
    (54) exp_condition_7 -> . exp_condition_8
    (55) exp_condition_8 -> . attcond
    (56) exp_condition_8 -> . LPAREN exp_condition RPAREN logic exp_condition_logic
    (88) attcond -> . exp_assignment
    (89) attcond -> . NUMBER
    (90) attcond -> . TRUE
    (91) attcond -> . FALSE
    (62) exp_assignment -> . ID_SC EQUALS arithmetic
    (63) exp_assignment -> . ID_LI EQUALS arithmetic
    (64) exp_assignment -> . ID_SC
    (65) exp_assignment -> . ID_LI
    (66) exp_assignment -> . INCREMENT ID_SC
    (67) exp_assignment -> . DECREMENT ID_SC
    (68) exp_assignment -> . ID_SC INCREMENT
    (69) exp_assignment -> . ID_SC DECREMENT

    LPAREN          shift and go to state 94
    NUMBER          shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 21

    exp_condition_3                shift and go to state 121
    exp_condition_4                shift and go to state 46
    exp_condition_5                shift and go to state 47
    exp_condition_6                shift and go to state 48
    exp_condition_7                shift and go to state 49
    exp_condition_8                shift and go to state 50
    attcond                        shift and go to state 80
    exp_assignment                 shift and go to state 96

state 84

    (39) exp_condition_2 -> exp_condition_2 LE . exp_condition_3
    (41) exp_condition_3 -> . exp_condition_3 EQ exp_condition_4
    (42) exp_condition_3 -> . exp_condition_3 NE exp_condition_4
    (43) exp_condition_3 -> . exp_condition_4
    (44) exp_condition_4 -> . exp_condition_4 SGT exp_condition_5
    (45) exp_condition_4 -> . exp_condition_4 SLT exp_condition_5
    (46) exp_condition_4 -> . exp_condition_5
    (47) exp_condition_5 -> . exp_condition_5 SGE exp_condition_6
    (48) exp_condition_5 -> . exp_condition_5 SLE exp_condition_6
    (49) exp_condition_5 -> . exp_condition_6
    (50) exp_condition_6 -> . exp_condition_6 SEQ exp_condition_7
    (51) exp_condition_6 -> . exp_condition_6 SNE exp_condition_7
    (52) exp_condition_6 -> . exp_condition_7
    (53) exp_condition_7 -> . exp_condition_7 CMP exp_condition_8
    (54) exp_condition_7 -> . exp_condition_8
    (55) exp_condition_8 -> . attcond
    (56) exp_condition_8 -> . LPAREN exp_condition RPAREN logic exp_condition_logic
    (88) attcond -> . exp_assignment
    (89) attcond -> . NUMBER
    (90) attcond -> . TRUE
    (91) attcond -> . FALSE
    (62) exp_assignment -> . ID_SC EQUALS arithmetic
    (63) exp_assignment -> . ID_LI EQUALS arithmetic
    (64) exp_assignment -> . ID_SC
    (65) exp_assignment -> . ID_LI
    (66) exp_assignment -> . INCREMENT ID_SC
    (67) exp_assignment -> . DECREMENT ID_SC
    (68) exp_assignment -> . ID_SC INCREMENT
    (69) exp_assignment -> . ID_SC DECREMENT

    LPAREN          shift and go to state 94
    NUMBER          shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 21

    exp_condition_3                shift and go to state 122
    exp_condition_4                shift and go to state 46
    exp_condition_5                shift and go to state 47
    exp_condition_6                shift and go to state 48
    exp_condition_7                shift and go to state 49
    exp_condition_8                shift and go to state 50
    attcond                        shift and go to state 80
    exp_assignment                 shift and go to state 96

state 85

    (41) exp_condition_3 -> exp_condition_3 EQ . exp_condition_4
    (44) exp_condition_4 -> . exp_condition_4 SGT exp_condition_5
    (45) exp_condition_4 -> . exp_condition_4 SLT exp_condition_5
    (46) exp_condition_4 -> . exp_condition_5
    (47) exp_condition_5 -> . exp_condition_5 SGE exp_condition_6
    (48) exp_condition_5 -> . exp_condition_5 SLE exp_condition_6
    (49) exp_condition_5 -> . exp_condition_6
    (50) exp_condition_6 -> . exp_condition_6 SEQ exp_condition_7
    (51) exp_condition_6 -> . exp_condition_6 SNE exp_condition_7
    (52) exp_condition_6 -> . exp_condition_7
    (53) exp_condition_7 -> . exp_condition_7 CMP exp_condition_8
    (54) exp_condition_7 -> . exp_condition_8
    (55) exp_condition_8 -> . attcond
    (56) exp_condition_8 -> . LPAREN exp_condition RPAREN logic exp_condition_logic
    (88) attcond -> . exp_assignment
    (89) attcond -> . NUMBER
    (90) attcond -> . TRUE
    (91) attcond -> . FALSE
    (62) exp_assignment -> . ID_SC EQUALS arithmetic
    (63) exp_assignment -> . ID_LI EQUALS arithmetic
    (64) exp_assignment -> . ID_SC
    (65) exp_assignment -> . ID_LI
    (66) exp_assignment -> . INCREMENT ID_SC
    (67) exp_assignment -> . DECREMENT ID_SC
    (68) exp_assignment -> . ID_SC INCREMENT
    (69) exp_assignment -> . ID_SC DECREMENT

    LPAREN          shift and go to state 94
    NUMBER          shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 21

    exp_condition_4                shift and go to state 123
    exp_condition_5                shift and go to state 47
    exp_condition_6                shift and go to state 48
    exp_condition_7                shift and go to state 49
    exp_condition_8                shift and go to state 50
    attcond                        shift and go to state 80
    exp_assignment                 shift and go to state 96

state 86

    (42) exp_condition_3 -> exp_condition_3 NE . exp_condition_4
    (44) exp_condition_4 -> . exp_condition_4 SGT exp_condition_5
    (45) exp_condition_4 -> . exp_condition_4 SLT exp_condition_5
    (46) exp_condition_4 -> . exp_condition_5
    (47) exp_condition_5 -> . exp_condition_5 SGE exp_condition_6
    (48) exp_condition_5 -> . exp_condition_5 SLE exp_condition_6
    (49) exp_condition_5 -> . exp_condition_6
    (50) exp_condition_6 -> . exp_condition_6 SEQ exp_condition_7
    (51) exp_condition_6 -> . exp_condition_6 SNE exp_condition_7
    (52) exp_condition_6 -> . exp_condition_7
    (53) exp_condition_7 -> . exp_condition_7 CMP exp_condition_8
    (54) exp_condition_7 -> . exp_condition_8
    (55) exp_condition_8 -> . attcond
    (56) exp_condition_8 -> . LPAREN exp_condition RPAREN logic exp_condition_logic
    (88) attcond -> . exp_assignment
    (89) attcond -> . NUMBER
    (90) attcond -> . TRUE
    (91) attcond -> . FALSE
    (62) exp_assignment -> . ID_SC EQUALS arithmetic
    (63) exp_assignment -> . ID_LI EQUALS arithmetic
    (64) exp_assignment -> . ID_SC
    (65) exp_assignment -> . ID_LI
    (66) exp_assignment -> . INCREMENT ID_SC
    (67) exp_assignment -> . DECREMENT ID_SC
    (68) exp_assignment -> . ID_SC INCREMENT
    (69) exp_assignment -> . ID_SC DECREMENT

    LPAREN          shift and go to state 94
    NUMBER          shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 21

    exp_condition_4                shift and go to state 124
    exp_condition_5                shift and go to state 47
    exp_condition_6                shift and go to state 48
    exp_condition_7                shift and go to state 49
    exp_condition_8                shift and go to state 50
    attcond                        shift and go to state 80
    exp_assignment                 shift and go to state 96

state 87

    (44) exp_condition_4 -> exp_condition_4 SGT . exp_condition_5
    (47) exp_condition_5 -> . exp_condition_5 SGE exp_condition_6
    (48) exp_condition_5 -> . exp_condition_5 SLE exp_condition_6
    (49) exp_condition_5 -> . exp_condition_6
    (50) exp_condition_6 -> . exp_condition_6 SEQ exp_condition_7
    (51) exp_condition_6 -> . exp_condition_6 SNE exp_condition_7
    (52) exp_condition_6 -> . exp_condition_7
    (53) exp_condition_7 -> . exp_condition_7 CMP exp_condition_8
    (54) exp_condition_7 -> . exp_condition_8
    (55) exp_condition_8 -> . attcond
    (56) exp_condition_8 -> . LPAREN exp_condition RPAREN logic exp_condition_logic
    (88) attcond -> . exp_assignment
    (89) attcond -> . NUMBER
    (90) attcond -> . TRUE
    (91) attcond -> . FALSE
    (62) exp_assignment -> . ID_SC EQUALS arithmetic
    (63) exp_assignment -> . ID_LI EQUALS arithmetic
    (64) exp_assignment -> . ID_SC
    (65) exp_assignment -> . ID_LI
    (66) exp_assignment -> . INCREMENT ID_SC
    (67) exp_assignment -> . DECREMENT ID_SC
    (68) exp_assignment -> . ID_SC INCREMENT
    (69) exp_assignment -> . ID_SC DECREMENT

    LPAREN          shift and go to state 94
    NUMBER          shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 21

    exp_condition_5                shift and go to state 125
    exp_condition_6                shift and go to state 48
    exp_condition_7                shift and go to state 49
    exp_condition_8                shift and go to state 50
    attcond                        shift and go to state 80
    exp_assignment                 shift and go to state 96

state 88

    (45) exp_condition_4 -> exp_condition_4 SLT . exp_condition_5
    (47) exp_condition_5 -> . exp_condition_5 SGE exp_condition_6
    (48) exp_condition_5 -> . exp_condition_5 SLE exp_condition_6
    (49) exp_condition_5 -> . exp_condition_6
    (50) exp_condition_6 -> . exp_condition_6 SEQ exp_condition_7
    (51) exp_condition_6 -> . exp_condition_6 SNE exp_condition_7
    (52) exp_condition_6 -> . exp_condition_7
    (53) exp_condition_7 -> . exp_condition_7 CMP exp_condition_8
    (54) exp_condition_7 -> . exp_condition_8
    (55) exp_condition_8 -> . attcond
    (56) exp_condition_8 -> . LPAREN exp_condition RPAREN logic exp_condition_logic
    (88) attcond -> . exp_assignment
    (89) attcond -> . NUMBER
    (90) attcond -> . TRUE
    (91) attcond -> . FALSE
    (62) exp_assignment -> . ID_SC EQUALS arithmetic
    (63) exp_assignment -> . ID_LI EQUALS arithmetic
    (64) exp_assignment -> . ID_SC
    (65) exp_assignment -> . ID_LI
    (66) exp_assignment -> . INCREMENT ID_SC
    (67) exp_assignment -> . DECREMENT ID_SC
    (68) exp_assignment -> . ID_SC INCREMENT
    (69) exp_assignment -> . ID_SC DECREMENT

    LPAREN          shift and go to state 94
    NUMBER          shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 21

    exp_condition_5                shift and go to state 126
    exp_condition_6                shift and go to state 48
    exp_condition_7                shift and go to state 49
    exp_condition_8                shift and go to state 50
    attcond                        shift and go to state 80
    exp_assignment                 shift and go to state 96

state 89

    (47) exp_condition_5 -> exp_condition_5 SGE . exp_condition_6
    (50) exp_condition_6 -> . exp_condition_6 SEQ exp_condition_7
    (51) exp_condition_6 -> . exp_condition_6 SNE exp_condition_7
    (52) exp_condition_6 -> . exp_condition_7
    (53) exp_condition_7 -> . exp_condition_7 CMP exp_condition_8
    (54) exp_condition_7 -> . exp_condition_8
    (55) exp_condition_8 -> . attcond
    (56) exp_condition_8 -> . LPAREN exp_condition RPAREN logic exp_condition_logic
    (88) attcond -> . exp_assignment
    (89) attcond -> . NUMBER
    (90) attcond -> . TRUE
    (91) attcond -> . FALSE
    (62) exp_assignment -> . ID_SC EQUALS arithmetic
    (63) exp_assignment -> . ID_LI EQUALS arithmetic
    (64) exp_assignment -> . ID_SC
    (65) exp_assignment -> . ID_LI
    (66) exp_assignment -> . INCREMENT ID_SC
    (67) exp_assignment -> . DECREMENT ID_SC
    (68) exp_assignment -> . ID_SC INCREMENT
    (69) exp_assignment -> . ID_SC DECREMENT

    LPAREN          shift and go to state 94
    NUMBER          shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 21

    exp_condition_6                shift and go to state 127
    exp_condition_7                shift and go to state 49
    exp_condition_8                shift and go to state 50
    attcond                        shift and go to state 80
    exp_assignment                 shift and go to state 96

state 90

    (48) exp_condition_5 -> exp_condition_5 SLE . exp_condition_6
    (50) exp_condition_6 -> . exp_condition_6 SEQ exp_condition_7
    (51) exp_condition_6 -> . exp_condition_6 SNE exp_condition_7
    (52) exp_condition_6 -> . exp_condition_7
    (53) exp_condition_7 -> . exp_condition_7 CMP exp_condition_8
    (54) exp_condition_7 -> . exp_condition_8
    (55) exp_condition_8 -> . attcond
    (56) exp_condition_8 -> . LPAREN exp_condition RPAREN logic exp_condition_logic
    (88) attcond -> . exp_assignment
    (89) attcond -> . NUMBER
    (90) attcond -> . TRUE
    (91) attcond -> . FALSE
    (62) exp_assignment -> . ID_SC EQUALS arithmetic
    (63) exp_assignment -> . ID_LI EQUALS arithmetic
    (64) exp_assignment -> . ID_SC
    (65) exp_assignment -> . ID_LI
    (66) exp_assignment -> . INCREMENT ID_SC
    (67) exp_assignment -> . DECREMENT ID_SC
    (68) exp_assignment -> . ID_SC INCREMENT
    (69) exp_assignment -> . ID_SC DECREMENT

    LPAREN          shift and go to state 94
    NUMBER          shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 21

    exp_condition_6                shift and go to state 128
    exp_condition_7                shift and go to state 49
    exp_condition_8                shift and go to state 50
    attcond                        shift and go to state 80
    exp_assignment                 shift and go to state 96

state 91

    (50) exp_condition_6 -> exp_condition_6 SEQ . exp_condition_7
    (53) exp_condition_7 -> . exp_condition_7 CMP exp_condition_8
    (54) exp_condition_7 -> . exp_condition_8
    (55) exp_condition_8 -> . attcond
    (56) exp_condition_8 -> . LPAREN exp_condition RPAREN logic exp_condition_logic
    (88) attcond -> . exp_assignment
    (89) attcond -> . NUMBER
    (90) attcond -> . TRUE
    (91) attcond -> . FALSE
    (62) exp_assignment -> . ID_SC EQUALS arithmetic
    (63) exp_assignment -> . ID_LI EQUALS arithmetic
    (64) exp_assignment -> . ID_SC
    (65) exp_assignment -> . ID_LI
    (66) exp_assignment -> . INCREMENT ID_SC
    (67) exp_assignment -> . DECREMENT ID_SC
    (68) exp_assignment -> . ID_SC INCREMENT
    (69) exp_assignment -> . ID_SC DECREMENT

    LPAREN          shift and go to state 94
    NUMBER          shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 21

    exp_condition_7                shift and go to state 129
    exp_condition_8                shift and go to state 50
    attcond                        shift and go to state 80
    exp_assignment                 shift and go to state 96

state 92

    (51) exp_condition_6 -> exp_condition_6 SNE . exp_condition_7
    (53) exp_condition_7 -> . exp_condition_7 CMP exp_condition_8
    (54) exp_condition_7 -> . exp_condition_8
    (55) exp_condition_8 -> . attcond
    (56) exp_condition_8 -> . LPAREN exp_condition RPAREN logic exp_condition_logic
    (88) attcond -> . exp_assignment
    (89) attcond -> . NUMBER
    (90) attcond -> . TRUE
    (91) attcond -> . FALSE
    (62) exp_assignment -> . ID_SC EQUALS arithmetic
    (63) exp_assignment -> . ID_LI EQUALS arithmetic
    (64) exp_assignment -> . ID_SC
    (65) exp_assignment -> . ID_LI
    (66) exp_assignment -> . INCREMENT ID_SC
    (67) exp_assignment -> . DECREMENT ID_SC
    (68) exp_assignment -> . ID_SC INCREMENT
    (69) exp_assignment -> . ID_SC DECREMENT

    LPAREN          shift and go to state 94
    NUMBER          shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 21

    exp_condition_7                shift and go to state 130
    exp_condition_8                shift and go to state 50
    attcond                        shift and go to state 80
    exp_assignment                 shift and go to state 96

state 93

    (53) exp_condition_7 -> exp_condition_7 CMP . exp_condition_8
    (55) exp_condition_8 -> . attcond
    (56) exp_condition_8 -> . LPAREN exp_condition RPAREN logic exp_condition_logic
    (88) attcond -> . exp_assignment
    (89) attcond -> . NUMBER
    (90) attcond -> . TRUE
    (91) attcond -> . FALSE
    (62) exp_assignment -> . ID_SC EQUALS arithmetic
    (63) exp_assignment -> . ID_LI EQUALS arithmetic
    (64) exp_assignment -> . ID_SC
    (65) exp_assignment -> . ID_LI
    (66) exp_assignment -> . INCREMENT ID_SC
    (67) exp_assignment -> . DECREMENT ID_SC
    (68) exp_assignment -> . ID_SC INCREMENT
    (69) exp_assignment -> . ID_SC DECREMENT

    LPAREN          shift and go to state 94
    NUMBER          shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 21

    exp_condition_8                shift and go to state 131
    attcond                        shift and go to state 80
    exp_assignment                 shift and go to state 96

state 94

    (56) exp_condition_8 -> LPAREN . exp_condition RPAREN logic exp_condition_logic
    (35) exp_condition -> . exp_condition GT exp_condition_2
    (36) exp_condition -> . exp_condition LT exp_condition_2
    (37) exp_condition -> . exp_condition_2
    (38) exp_condition_2 -> . exp_condition_2 GE exp_condition_3
    (39) exp_condition_2 -> . exp_condition_2 LE exp_condition_3
    (40) exp_condition_2 -> . exp_condition_3
    (41) exp_condition_3 -> . exp_condition_3 EQ exp_condition_4
    (42) exp_condition_3 -> . exp_condition_3 NE exp_condition_4
    (43) exp_condition_3 -> . exp_condition_4
    (44) exp_condition_4 -> . exp_condition_4 SGT exp_condition_5
    (45) exp_condition_4 -> . exp_condition_4 SLT exp_condition_5
    (46) exp_condition_4 -> . exp_condition_5
    (47) exp_condition_5 -> . exp_condition_5 SGE exp_condition_6
    (48) exp_condition_5 -> . exp_condition_5 SLE exp_condition_6
    (49) exp_condition_5 -> . exp_condition_6
    (50) exp_condition_6 -> . exp_condition_6 SEQ exp_condition_7
    (51) exp_condition_6 -> . exp_condition_6 SNE exp_condition_7
    (52) exp_condition_6 -> . exp_condition_7
    (53) exp_condition_7 -> . exp_condition_7 CMP exp_condition_8
    (54) exp_condition_7 -> . exp_condition_8
    (55) exp_condition_8 -> . attcond
    (56) exp_condition_8 -> . LPAREN exp_condition RPAREN logic exp_condition_logic
    (88) attcond -> . exp_assignment
    (89) attcond -> . NUMBER
    (90) attcond -> . TRUE
    (91) attcond -> . FALSE
    (62) exp_assignment -> . ID_SC EQUALS arithmetic
    (63) exp_assignment -> . ID_LI EQUALS arithmetic
    (64) exp_assignment -> . ID_SC
    (65) exp_assignment -> . ID_LI
    (66) exp_assignment -> . INCREMENT ID_SC
    (67) exp_assignment -> . DECREMENT ID_SC
    (68) exp_assignment -> . ID_SC INCREMENT
    (69) exp_assignment -> . ID_SC DECREMENT

    LPAREN          shift and go to state 94
    NUMBER          shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 21

    exp_condition                  shift and go to state 132
    exp_condition_2                shift and go to state 44
    exp_condition_3                shift and go to state 45
    exp_condition_4                shift and go to state 46
    exp_condition_5                shift and go to state 47
    exp_condition_6                shift and go to state 48
    exp_condition_7                shift and go to state 49
    exp_condition_8                shift and go to state 50
    attcond                        shift and go to state 80
    exp_assignment                 shift and go to state 96

state 95

    (14) if -> IF LPAREN exp_condition . RPAREN if_statement
    (35) exp_condition -> exp_condition . GT exp_condition_2
    (36) exp_condition -> exp_condition . LT exp_condition_2

    RPAREN          shift and go to state 133
    GT              shift and go to state 81
    LT              shift and go to state 82


state 96

    (88) attcond -> exp_assignment .

    CMP             reduce using rule 88 (attcond -> exp_assignment .)
    SEQ             reduce using rule 88 (attcond -> exp_assignment .)
    SNE             reduce using rule 88 (attcond -> exp_assignment .)
    SGE             reduce using rule 88 (attcond -> exp_assignment .)
    SLE             reduce using rule 88 (attcond -> exp_assignment .)
    SGT             reduce using rule 88 (attcond -> exp_assignment .)
    SLT             reduce using rule 88 (attcond -> exp_assignment .)
    EQ              reduce using rule 88 (attcond -> exp_assignment .)
    NE              reduce using rule 88 (attcond -> exp_assignment .)
    GE              reduce using rule 88 (attcond -> exp_assignment .)
    LE              reduce using rule 88 (attcond -> exp_assignment .)
    RPAREN          reduce using rule 88 (attcond -> exp_assignment .)
    GT              reduce using rule 88 (attcond -> exp_assignment .)
    LT              reduce using rule 88 (attcond -> exp_assignment .)
    RETURN          reduce using rule 88 (attcond -> exp_assignment .)
    BREAK           reduce using rule 88 (attcond -> exp_assignment .)
    CONTINUE        reduce using rule 88 (attcond -> exp_assignment .)
    IF              reduce using rule 88 (attcond -> exp_assignment .)
    ID_SC           reduce using rule 88 (attcond -> exp_assignment .)
    ID_LI           reduce using rule 88 (attcond -> exp_assignment .)
    INCREMENT       reduce using rule 88 (attcond -> exp_assignment .)
    DECREMENT       reduce using rule 88 (attcond -> exp_assignment .)
    ID              reduce using rule 88 (attcond -> exp_assignment .)
    FOR             reduce using rule 88 (attcond -> exp_assignment .)
    DO              reduce using rule 88 (attcond -> exp_assignment .)
    WHILE           reduce using rule 88 (attcond -> exp_assignment .)
    SUB             reduce using rule 88 (attcond -> exp_assignment .)
    $end            reduce using rule 88 (attcond -> exp_assignment .)
    RBRACE          reduce using rule 88 (attcond -> exp_assignment .)
    SEMICOLON       reduce using rule 88 (attcond -> exp_assignment .)
    XOR             reduce using rule 88 (attcond -> exp_assignment .)
    TIMES           reduce using rule 88 (attcond -> exp_assignment .)
    DIVIDE          reduce using rule 88 (attcond -> exp_assignment .)
    MODULO          reduce using rule 88 (attcond -> exp_assignment .)
    PLUS            reduce using rule 88 (attcond -> exp_assignment .)
    MINUS           reduce using rule 88 (attcond -> exp_assignment .)
    COMMA           reduce using rule 88 (attcond -> exp_assignment .)


state 97

    (89) attcond -> NUMBER .

    CMP             reduce using rule 89 (attcond -> NUMBER .)
    SEQ             reduce using rule 89 (attcond -> NUMBER .)
    SNE             reduce using rule 89 (attcond -> NUMBER .)
    SGE             reduce using rule 89 (attcond -> NUMBER .)
    SLE             reduce using rule 89 (attcond -> NUMBER .)
    SGT             reduce using rule 89 (attcond -> NUMBER .)
    SLT             reduce using rule 89 (attcond -> NUMBER .)
    EQ              reduce using rule 89 (attcond -> NUMBER .)
    NE              reduce using rule 89 (attcond -> NUMBER .)
    GE              reduce using rule 89 (attcond -> NUMBER .)
    LE              reduce using rule 89 (attcond -> NUMBER .)
    RPAREN          reduce using rule 89 (attcond -> NUMBER .)
    GT              reduce using rule 89 (attcond -> NUMBER .)
    LT              reduce using rule 89 (attcond -> NUMBER .)
    RETURN          reduce using rule 89 (attcond -> NUMBER .)
    BREAK           reduce using rule 89 (attcond -> NUMBER .)
    CONTINUE        reduce using rule 89 (attcond -> NUMBER .)
    IF              reduce using rule 89 (attcond -> NUMBER .)
    ID_SC           reduce using rule 89 (attcond -> NUMBER .)
    ID_LI           reduce using rule 89 (attcond -> NUMBER .)
    INCREMENT       reduce using rule 89 (attcond -> NUMBER .)
    DECREMENT       reduce using rule 89 (attcond -> NUMBER .)
    ID              reduce using rule 89 (attcond -> NUMBER .)
    FOR             reduce using rule 89 (attcond -> NUMBER .)
    DO              reduce using rule 89 (attcond -> NUMBER .)
    WHILE           reduce using rule 89 (attcond -> NUMBER .)
    SUB             reduce using rule 89 (attcond -> NUMBER .)
    $end            reduce using rule 89 (attcond -> NUMBER .)
    RBRACE          reduce using rule 89 (attcond -> NUMBER .)
    SEMICOLON       reduce using rule 89 (attcond -> NUMBER .)
    XOR             reduce using rule 89 (attcond -> NUMBER .)
    TIMES           reduce using rule 89 (attcond -> NUMBER .)
    DIVIDE          reduce using rule 89 (attcond -> NUMBER .)
    MODULO          reduce using rule 89 (attcond -> NUMBER .)
    PLUS            reduce using rule 89 (attcond -> NUMBER .)
    MINUS           reduce using rule 89 (attcond -> NUMBER .)
    COMMA           reduce using rule 89 (attcond -> NUMBER .)


state 98

    (90) attcond -> TRUE .

    CMP             reduce using rule 90 (attcond -> TRUE .)
    SEQ             reduce using rule 90 (attcond -> TRUE .)
    SNE             reduce using rule 90 (attcond -> TRUE .)
    SGE             reduce using rule 90 (attcond -> TRUE .)
    SLE             reduce using rule 90 (attcond -> TRUE .)
    SGT             reduce using rule 90 (attcond -> TRUE .)
    SLT             reduce using rule 90 (attcond -> TRUE .)
    EQ              reduce using rule 90 (attcond -> TRUE .)
    NE              reduce using rule 90 (attcond -> TRUE .)
    GE              reduce using rule 90 (attcond -> TRUE .)
    LE              reduce using rule 90 (attcond -> TRUE .)
    RPAREN          reduce using rule 90 (attcond -> TRUE .)
    GT              reduce using rule 90 (attcond -> TRUE .)
    LT              reduce using rule 90 (attcond -> TRUE .)
    RETURN          reduce using rule 90 (attcond -> TRUE .)
    BREAK           reduce using rule 90 (attcond -> TRUE .)
    CONTINUE        reduce using rule 90 (attcond -> TRUE .)
    IF              reduce using rule 90 (attcond -> TRUE .)
    ID_SC           reduce using rule 90 (attcond -> TRUE .)
    ID_LI           reduce using rule 90 (attcond -> TRUE .)
    INCREMENT       reduce using rule 90 (attcond -> TRUE .)
    DECREMENT       reduce using rule 90 (attcond -> TRUE .)
    ID              reduce using rule 90 (attcond -> TRUE .)
    FOR             reduce using rule 90 (attcond -> TRUE .)
    DO              reduce using rule 90 (attcond -> TRUE .)
    WHILE           reduce using rule 90 (attcond -> TRUE .)
    SUB             reduce using rule 90 (attcond -> TRUE .)
    $end            reduce using rule 90 (attcond -> TRUE .)
    RBRACE          reduce using rule 90 (attcond -> TRUE .)
    SEMICOLON       reduce using rule 90 (attcond -> TRUE .)
    XOR             reduce using rule 90 (attcond -> TRUE .)
    TIMES           reduce using rule 90 (attcond -> TRUE .)
    DIVIDE          reduce using rule 90 (attcond -> TRUE .)
    MODULO          reduce using rule 90 (attcond -> TRUE .)
    PLUS            reduce using rule 90 (attcond -> TRUE .)
    MINUS           reduce using rule 90 (attcond -> TRUE .)
    COMMA           reduce using rule 90 (attcond -> TRUE .)


state 99

    (91) attcond -> FALSE .

    CMP             reduce using rule 91 (attcond -> FALSE .)
    SEQ             reduce using rule 91 (attcond -> FALSE .)
    SNE             reduce using rule 91 (attcond -> FALSE .)
    SGE             reduce using rule 91 (attcond -> FALSE .)
    SLE             reduce using rule 91 (attcond -> FALSE .)
    SGT             reduce using rule 91 (attcond -> FALSE .)
    SLT             reduce using rule 91 (attcond -> FALSE .)
    EQ              reduce using rule 91 (attcond -> FALSE .)
    NE              reduce using rule 91 (attcond -> FALSE .)
    GE              reduce using rule 91 (attcond -> FALSE .)
    LE              reduce using rule 91 (attcond -> FALSE .)
    RPAREN          reduce using rule 91 (attcond -> FALSE .)
    GT              reduce using rule 91 (attcond -> FALSE .)
    LT              reduce using rule 91 (attcond -> FALSE .)
    RETURN          reduce using rule 91 (attcond -> FALSE .)
    BREAK           reduce using rule 91 (attcond -> FALSE .)
    CONTINUE        reduce using rule 91 (attcond -> FALSE .)
    IF              reduce using rule 91 (attcond -> FALSE .)
    ID_SC           reduce using rule 91 (attcond -> FALSE .)
    ID_LI           reduce using rule 91 (attcond -> FALSE .)
    INCREMENT       reduce using rule 91 (attcond -> FALSE .)
    DECREMENT       reduce using rule 91 (attcond -> FALSE .)
    ID              reduce using rule 91 (attcond -> FALSE .)
    FOR             reduce using rule 91 (attcond -> FALSE .)
    DO              reduce using rule 91 (attcond -> FALSE .)
    WHILE           reduce using rule 91 (attcond -> FALSE .)
    SUB             reduce using rule 91 (attcond -> FALSE .)
    $end            reduce using rule 91 (attcond -> FALSE .)
    RBRACE          reduce using rule 91 (attcond -> FALSE .)
    SEMICOLON       reduce using rule 91 (attcond -> FALSE .)
    XOR             reduce using rule 91 (attcond -> FALSE .)
    TIMES           reduce using rule 91 (attcond -> FALSE .)
    DIVIDE          reduce using rule 91 (attcond -> FALSE .)
    MODULO          reduce using rule 91 (attcond -> FALSE .)
    PLUS            reduce using rule 91 (attcond -> FALSE .)
    MINUS           reduce using rule 91 (attcond -> FALSE .)
    COMMA           reduce using rule 91 (attcond -> FALSE .)


state 100

    (62) exp_assignment -> ID_SC EQUALS arithmetic .

    RETURN          reduce using rule 62 (exp_assignment -> ID_SC EQUALS arithmetic .)
    BREAK           reduce using rule 62 (exp_assignment -> ID_SC EQUALS arithmetic .)
    CONTINUE        reduce using rule 62 (exp_assignment -> ID_SC EQUALS arithmetic .)
    IF              reduce using rule 62 (exp_assignment -> ID_SC EQUALS arithmetic .)
    ID_SC           reduce using rule 62 (exp_assignment -> ID_SC EQUALS arithmetic .)
    ID_LI           reduce using rule 62 (exp_assignment -> ID_SC EQUALS arithmetic .)
    INCREMENT       reduce using rule 62 (exp_assignment -> ID_SC EQUALS arithmetic .)
    DECREMENT       reduce using rule 62 (exp_assignment -> ID_SC EQUALS arithmetic .)
    ID              reduce using rule 62 (exp_assignment -> ID_SC EQUALS arithmetic .)
    FOR             reduce using rule 62 (exp_assignment -> ID_SC EQUALS arithmetic .)
    DO              reduce using rule 62 (exp_assignment -> ID_SC EQUALS arithmetic .)
    WHILE           reduce using rule 62 (exp_assignment -> ID_SC EQUALS arithmetic .)
    SUB             reduce using rule 62 (exp_assignment -> ID_SC EQUALS arithmetic .)
    $end            reduce using rule 62 (exp_assignment -> ID_SC EQUALS arithmetic .)
    RBRACE          reduce using rule 62 (exp_assignment -> ID_SC EQUALS arithmetic .)
    SEMICOLON       reduce using rule 62 (exp_assignment -> ID_SC EQUALS arithmetic .)
    CMP             reduce using rule 62 (exp_assignment -> ID_SC EQUALS arithmetic .)
    SEQ             reduce using rule 62 (exp_assignment -> ID_SC EQUALS arithmetic .)
    SNE             reduce using rule 62 (exp_assignment -> ID_SC EQUALS arithmetic .)
    SGE             reduce using rule 62 (exp_assignment -> ID_SC EQUALS arithmetic .)
    SLE             reduce using rule 62 (exp_assignment -> ID_SC EQUALS arithmetic .)
    SGT             reduce using rule 62 (exp_assignment -> ID_SC EQUALS arithmetic .)
    SLT             reduce using rule 62 (exp_assignment -> ID_SC EQUALS arithmetic .)
    EQ              reduce using rule 62 (exp_assignment -> ID_SC EQUALS arithmetic .)
    NE              reduce using rule 62 (exp_assignment -> ID_SC EQUALS arithmetic .)
    GE              reduce using rule 62 (exp_assignment -> ID_SC EQUALS arithmetic .)
    LE              reduce using rule 62 (exp_assignment -> ID_SC EQUALS arithmetic .)
    GT              reduce using rule 62 (exp_assignment -> ID_SC EQUALS arithmetic .)
    LT              reduce using rule 62 (exp_assignment -> ID_SC EQUALS arithmetic .)
    XOR             reduce using rule 62 (exp_assignment -> ID_SC EQUALS arithmetic .)
    TIMES           reduce using rule 62 (exp_assignment -> ID_SC EQUALS arithmetic .)
    DIVIDE          reduce using rule 62 (exp_assignment -> ID_SC EQUALS arithmetic .)
    MODULO          reduce using rule 62 (exp_assignment -> ID_SC EQUALS arithmetic .)
    PLUS            reduce using rule 62 (exp_assignment -> ID_SC EQUALS arithmetic .)
    MINUS           reduce using rule 62 (exp_assignment -> ID_SC EQUALS arithmetic .)
    COMMA           reduce using rule 62 (exp_assignment -> ID_SC EQUALS arithmetic .)
    RPAREN          reduce using rule 62 (exp_assignment -> ID_SC EQUALS arithmetic .)


state 101

    (63) exp_assignment -> ID_LI EQUALS arithmetic .

    RETURN          reduce using rule 63 (exp_assignment -> ID_LI EQUALS arithmetic .)
    BREAK           reduce using rule 63 (exp_assignment -> ID_LI EQUALS arithmetic .)
    CONTINUE        reduce using rule 63 (exp_assignment -> ID_LI EQUALS arithmetic .)
    IF              reduce using rule 63 (exp_assignment -> ID_LI EQUALS arithmetic .)
    ID_SC           reduce using rule 63 (exp_assignment -> ID_LI EQUALS arithmetic .)
    ID_LI           reduce using rule 63 (exp_assignment -> ID_LI EQUALS arithmetic .)
    INCREMENT       reduce using rule 63 (exp_assignment -> ID_LI EQUALS arithmetic .)
    DECREMENT       reduce using rule 63 (exp_assignment -> ID_LI EQUALS arithmetic .)
    ID              reduce using rule 63 (exp_assignment -> ID_LI EQUALS arithmetic .)
    FOR             reduce using rule 63 (exp_assignment -> ID_LI EQUALS arithmetic .)
    DO              reduce using rule 63 (exp_assignment -> ID_LI EQUALS arithmetic .)
    WHILE           reduce using rule 63 (exp_assignment -> ID_LI EQUALS arithmetic .)
    SUB             reduce using rule 63 (exp_assignment -> ID_LI EQUALS arithmetic .)
    $end            reduce using rule 63 (exp_assignment -> ID_LI EQUALS arithmetic .)
    RBRACE          reduce using rule 63 (exp_assignment -> ID_LI EQUALS arithmetic .)
    SEMICOLON       reduce using rule 63 (exp_assignment -> ID_LI EQUALS arithmetic .)
    CMP             reduce using rule 63 (exp_assignment -> ID_LI EQUALS arithmetic .)
    SEQ             reduce using rule 63 (exp_assignment -> ID_LI EQUALS arithmetic .)
    SNE             reduce using rule 63 (exp_assignment -> ID_LI EQUALS arithmetic .)
    SGE             reduce using rule 63 (exp_assignment -> ID_LI EQUALS arithmetic .)
    SLE             reduce using rule 63 (exp_assignment -> ID_LI EQUALS arithmetic .)
    SGT             reduce using rule 63 (exp_assignment -> ID_LI EQUALS arithmetic .)
    SLT             reduce using rule 63 (exp_assignment -> ID_LI EQUALS arithmetic .)
    EQ              reduce using rule 63 (exp_assignment -> ID_LI EQUALS arithmetic .)
    NE              reduce using rule 63 (exp_assignment -> ID_LI EQUALS arithmetic .)
    GE              reduce using rule 63 (exp_assignment -> ID_LI EQUALS arithmetic .)
    LE              reduce using rule 63 (exp_assignment -> ID_LI EQUALS arithmetic .)
    GT              reduce using rule 63 (exp_assignment -> ID_LI EQUALS arithmetic .)
    LT              reduce using rule 63 (exp_assignment -> ID_LI EQUALS arithmetic .)
    XOR             reduce using rule 63 (exp_assignment -> ID_LI EQUALS arithmetic .)
    TIMES           reduce using rule 63 (exp_assignment -> ID_LI EQUALS arithmetic .)
    DIVIDE          reduce using rule 63 (exp_assignment -> ID_LI EQUALS arithmetic .)
    MODULO          reduce using rule 63 (exp_assignment -> ID_LI EQUALS arithmetic .)
    PLUS            reduce using rule 63 (exp_assignment -> ID_LI EQUALS arithmetic .)
    MINUS           reduce using rule 63 (exp_assignment -> ID_LI EQUALS arithmetic .)
    COMMA           reduce using rule 63 (exp_assignment -> ID_LI EQUALS arithmetic .)
    RPAREN          reduce using rule 63 (exp_assignment -> ID_LI EQUALS arithmetic .)


state 102

    (25) for -> FOR LPAREN for_assignments . SEMICOLON exp_condition SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE

    SEMICOLON       shift and go to state 134


state 103

    (26) for_assignments -> exp_assignment .
    (27) for_assignments -> exp_assignment . COMMA for_assignments

    SEMICOLON       reduce using rule 26 (for_assignments -> exp_assignment .)
    RPAREN          reduce using rule 26 (for_assignments -> exp_assignment .)
    COMMA           shift and go to state 135


state 104

    (28) dowhile -> DO LBRACE blockcode . RBRACE WHILE LPAREN exp_condition RPAREN

    RBRACE          shift and go to state 136


state 105

    (29) while -> WHILE LPAREN exp_condition . RPAREN LBRACE blockcode RBRACE
    (30) while -> WHILE LPAREN exp_condition . RPAREN LBRACE RBRACE
    (35) exp_condition -> exp_condition . GT exp_condition_2
    (36) exp_condition -> exp_condition . LT exp_condition_2

    RPAREN          shift and go to state 137
    GT              shift and go to state 81
    LT              shift and go to state 82


state 106

    (31) function -> SUB ID LPAREN RPAREN . LBRACE blockcode RBRACE

    LBRACE          shift and go to state 138


state 107

    (32) function -> SUB ID LPAREN function_assignments . RPAREN LBRACE blockcode RBRACE

    RPAREN          shift and go to state 139


state 108

    (93) call -> ID LPAREN function_assignments RPAREN .

    RETURN          reduce using rule 93 (call -> ID LPAREN function_assignments RPAREN .)
    BREAK           reduce using rule 93 (call -> ID LPAREN function_assignments RPAREN .)
    CONTINUE        reduce using rule 93 (call -> ID LPAREN function_assignments RPAREN .)
    IF              reduce using rule 93 (call -> ID LPAREN function_assignments RPAREN .)
    ID_SC           reduce using rule 93 (call -> ID LPAREN function_assignments RPAREN .)
    ID_LI           reduce using rule 93 (call -> ID LPAREN function_assignments RPAREN .)
    INCREMENT       reduce using rule 93 (call -> ID LPAREN function_assignments RPAREN .)
    DECREMENT       reduce using rule 93 (call -> ID LPAREN function_assignments RPAREN .)
    ID              reduce using rule 93 (call -> ID LPAREN function_assignments RPAREN .)
    FOR             reduce using rule 93 (call -> ID LPAREN function_assignments RPAREN .)
    DO              reduce using rule 93 (call -> ID LPAREN function_assignments RPAREN .)
    WHILE           reduce using rule 93 (call -> ID LPAREN function_assignments RPAREN .)
    SUB             reduce using rule 93 (call -> ID LPAREN function_assignments RPAREN .)
    $end            reduce using rule 93 (call -> ID LPAREN function_assignments RPAREN .)
    RBRACE          reduce using rule 93 (call -> ID LPAREN function_assignments RPAREN .)
    XOR             reduce using rule 93 (call -> ID LPAREN function_assignments RPAREN .)
    TIMES           reduce using rule 93 (call -> ID LPAREN function_assignments RPAREN .)
    DIVIDE          reduce using rule 93 (call -> ID LPAREN function_assignments RPAREN .)
    MODULO          reduce using rule 93 (call -> ID LPAREN function_assignments RPAREN .)
    PLUS            reduce using rule 93 (call -> ID LPAREN function_assignments RPAREN .)
    MINUS           reduce using rule 93 (call -> ID LPAREN function_assignments RPAREN .)
    SEMICOLON       reduce using rule 93 (call -> ID LPAREN function_assignments RPAREN .)
    RPAREN          reduce using rule 93 (call -> ID LPAREN function_assignments RPAREN .)
    CMP             reduce using rule 93 (call -> ID LPAREN function_assignments RPAREN .)
    SEQ             reduce using rule 93 (call -> ID LPAREN function_assignments RPAREN .)
    SNE             reduce using rule 93 (call -> ID LPAREN function_assignments RPAREN .)
    SGE             reduce using rule 93 (call -> ID LPAREN function_assignments RPAREN .)
    SLE             reduce using rule 93 (call -> ID LPAREN function_assignments RPAREN .)
    SGT             reduce using rule 93 (call -> ID LPAREN function_assignments RPAREN .)
    SLT             reduce using rule 93 (call -> ID LPAREN function_assignments RPAREN .)
    EQ              reduce using rule 93 (call -> ID LPAREN function_assignments RPAREN .)
    NE              reduce using rule 93 (call -> ID LPAREN function_assignments RPAREN .)
    GE              reduce using rule 93 (call -> ID LPAREN function_assignments RPAREN .)
    LE              reduce using rule 93 (call -> ID LPAREN function_assignments RPAREN .)
    GT              reduce using rule 93 (call -> ID LPAREN function_assignments RPAREN .)
    LT              reduce using rule 93 (call -> ID LPAREN function_assignments RPAREN .)
    COMMA           reduce using rule 93 (call -> ID LPAREN function_assignments RPAREN .)


state 109

    (34) function_assignments -> exp_assignment COMMA . function_assignments
    (33) function_assignments -> . exp_assignment
    (34) function_assignments -> . exp_assignment COMMA function_assignments
    (62) exp_assignment -> . ID_SC EQUALS arithmetic
    (63) exp_assignment -> . ID_LI EQUALS arithmetic
    (64) exp_assignment -> . ID_SC
    (65) exp_assignment -> . ID_LI
    (66) exp_assignment -> . INCREMENT ID_SC
    (67) exp_assignment -> . DECREMENT ID_SC
    (68) exp_assignment -> . ID_SC INCREMENT
    (69) exp_assignment -> . ID_SC DECREMENT

    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 21

    exp_assignment                 shift and go to state 66
    function_assignments           shift and go to state 140

state 110

    (85) exp3 -> exp .
    (71) exp -> exp . PLUS exp1
    (72) exp -> exp . MINUS exp1

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    RETURN          reduce using rule 85 (exp3 -> exp .)
    BREAK           reduce using rule 85 (exp3 -> exp .)
    CONTINUE        reduce using rule 85 (exp3 -> exp .)
    IF              reduce using rule 85 (exp3 -> exp .)
    ID_SC           reduce using rule 85 (exp3 -> exp .)
    ID_LI           reduce using rule 85 (exp3 -> exp .)
    INCREMENT       reduce using rule 85 (exp3 -> exp .)
    DECREMENT       reduce using rule 85 (exp3 -> exp .)
    ID              reduce using rule 85 (exp3 -> exp .)
    FOR             reduce using rule 85 (exp3 -> exp .)
    DO              reduce using rule 85 (exp3 -> exp .)
    WHILE           reduce using rule 85 (exp3 -> exp .)
    SUB             reduce using rule 85 (exp3 -> exp .)
    $end            reduce using rule 85 (exp3 -> exp .)
    RBRACE          reduce using rule 85 (exp3 -> exp .)
    SEMICOLON       reduce using rule 85 (exp3 -> exp .)
    CMP             reduce using rule 85 (exp3 -> exp .)
    SEQ             reduce using rule 85 (exp3 -> exp .)
    SNE             reduce using rule 85 (exp3 -> exp .)
    SGE             reduce using rule 85 (exp3 -> exp .)
    SLE             reduce using rule 85 (exp3 -> exp .)
    SGT             reduce using rule 85 (exp3 -> exp .)
    SLT             reduce using rule 85 (exp3 -> exp .)
    EQ              reduce using rule 85 (exp3 -> exp .)
    NE              reduce using rule 85 (exp3 -> exp .)
    GE              reduce using rule 85 (exp3 -> exp .)
    LE              reduce using rule 85 (exp3 -> exp .)
    GT              reduce using rule 85 (exp3 -> exp .)
    LT              reduce using rule 85 (exp3 -> exp .)
    XOR             reduce using rule 85 (exp3 -> exp .)
    TIMES           reduce using rule 85 (exp3 -> exp .)
    DIVIDE          reduce using rule 85 (exp3 -> exp .)
    MODULO          reduce using rule 85 (exp3 -> exp .)
    COMMA           reduce using rule 85 (exp3 -> exp .)
    RPAREN          reduce using rule 85 (exp3 -> exp .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69

  ! PLUS            [ reduce using rule 85 (exp3 -> exp .) ]
  ! MINUS           [ reduce using rule 85 (exp3 -> exp .) ]


state 111

    (71) exp -> exp PLUS exp1 .
    (74) exp1 -> exp1 . TIMES exp2
    (75) exp1 -> exp1 . DIVIDE exp2
    (76) exp1 -> exp1 . MODULO exp2
    (73) exp -> exp1 .

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! reduce/reduce conflict for RETURN resolved using rule 71 (exp -> exp PLUS exp1 .)
  ! reduce/reduce conflict for BREAK resolved using rule 71 (exp -> exp PLUS exp1 .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 71 (exp -> exp PLUS exp1 .)
  ! reduce/reduce conflict for IF resolved using rule 71 (exp -> exp PLUS exp1 .)
  ! reduce/reduce conflict for ID_SC resolved using rule 71 (exp -> exp PLUS exp1 .)
  ! reduce/reduce conflict for ID_LI resolved using rule 71 (exp -> exp PLUS exp1 .)
  ! reduce/reduce conflict for INCREMENT resolved using rule 71 (exp -> exp PLUS exp1 .)
  ! reduce/reduce conflict for DECREMENT resolved using rule 71 (exp -> exp PLUS exp1 .)
  ! reduce/reduce conflict for ID resolved using rule 71 (exp -> exp PLUS exp1 .)
  ! reduce/reduce conflict for FOR resolved using rule 71 (exp -> exp PLUS exp1 .)
  ! reduce/reduce conflict for DO resolved using rule 71 (exp -> exp PLUS exp1 .)
  ! reduce/reduce conflict for WHILE resolved using rule 71 (exp -> exp PLUS exp1 .)
  ! reduce/reduce conflict for SUB resolved using rule 71 (exp -> exp PLUS exp1 .)
  ! reduce/reduce conflict for $end resolved using rule 71 (exp -> exp PLUS exp1 .)
  ! reduce/reduce conflict for RBRACE resolved using rule 71 (exp -> exp PLUS exp1 .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 71 (exp -> exp PLUS exp1 .)
  ! reduce/reduce conflict for CMP resolved using rule 71 (exp -> exp PLUS exp1 .)
  ! reduce/reduce conflict for SEQ resolved using rule 71 (exp -> exp PLUS exp1 .)
  ! reduce/reduce conflict for SNE resolved using rule 71 (exp -> exp PLUS exp1 .)
  ! reduce/reduce conflict for SGE resolved using rule 71 (exp -> exp PLUS exp1 .)
  ! reduce/reduce conflict for SLE resolved using rule 71 (exp -> exp PLUS exp1 .)
  ! reduce/reduce conflict for SGT resolved using rule 71 (exp -> exp PLUS exp1 .)
  ! reduce/reduce conflict for SLT resolved using rule 71 (exp -> exp PLUS exp1 .)
  ! reduce/reduce conflict for EQ resolved using rule 71 (exp -> exp PLUS exp1 .)
  ! reduce/reduce conflict for NE resolved using rule 71 (exp -> exp PLUS exp1 .)
  ! reduce/reduce conflict for GE resolved using rule 71 (exp -> exp PLUS exp1 .)
  ! reduce/reduce conflict for LE resolved using rule 71 (exp -> exp PLUS exp1 .)
  ! reduce/reduce conflict for GT resolved using rule 71 (exp -> exp PLUS exp1 .)
  ! reduce/reduce conflict for LT resolved using rule 71 (exp -> exp PLUS exp1 .)
  ! reduce/reduce conflict for XOR resolved using rule 71 (exp -> exp PLUS exp1 .)
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! reduce/reduce conflict for PLUS resolved using rule 71 (exp -> exp PLUS exp1 .)
  ! reduce/reduce conflict for MINUS resolved using rule 71 (exp -> exp PLUS exp1 .)
  ! reduce/reduce conflict for COMMA resolved using rule 71 (exp -> exp PLUS exp1 .)
  ! reduce/reduce conflict for RPAREN resolved using rule 71 (exp -> exp PLUS exp1 .)
    XOR             reduce using rule 71 (exp -> exp PLUS exp1 .)
    PLUS            reduce using rule 71 (exp -> exp PLUS exp1 .)
    MINUS           reduce using rule 71 (exp -> exp PLUS exp1 .)
    SEMICOLON       reduce using rule 71 (exp -> exp PLUS exp1 .)
    RPAREN          reduce using rule 71 (exp -> exp PLUS exp1 .)
    RETURN          reduce using rule 71 (exp -> exp PLUS exp1 .)
    BREAK           reduce using rule 71 (exp -> exp PLUS exp1 .)
    CONTINUE        reduce using rule 71 (exp -> exp PLUS exp1 .)
    IF              reduce using rule 71 (exp -> exp PLUS exp1 .)
    ID_SC           reduce using rule 71 (exp -> exp PLUS exp1 .)
    ID_LI           reduce using rule 71 (exp -> exp PLUS exp1 .)
    INCREMENT       reduce using rule 71 (exp -> exp PLUS exp1 .)
    DECREMENT       reduce using rule 71 (exp -> exp PLUS exp1 .)
    ID              reduce using rule 71 (exp -> exp PLUS exp1 .)
    FOR             reduce using rule 71 (exp -> exp PLUS exp1 .)
    DO              reduce using rule 71 (exp -> exp PLUS exp1 .)
    WHILE           reduce using rule 71 (exp -> exp PLUS exp1 .)
    SUB             reduce using rule 71 (exp -> exp PLUS exp1 .)
    $end            reduce using rule 71 (exp -> exp PLUS exp1 .)
    RBRACE          reduce using rule 71 (exp -> exp PLUS exp1 .)
    CMP             reduce using rule 71 (exp -> exp PLUS exp1 .)
    SEQ             reduce using rule 71 (exp -> exp PLUS exp1 .)
    SNE             reduce using rule 71 (exp -> exp PLUS exp1 .)
    SGE             reduce using rule 71 (exp -> exp PLUS exp1 .)
    SLE             reduce using rule 71 (exp -> exp PLUS exp1 .)
    SGT             reduce using rule 71 (exp -> exp PLUS exp1 .)
    SLT             reduce using rule 71 (exp -> exp PLUS exp1 .)
    EQ              reduce using rule 71 (exp -> exp PLUS exp1 .)
    NE              reduce using rule 71 (exp -> exp PLUS exp1 .)
    GE              reduce using rule 71 (exp -> exp PLUS exp1 .)
    LE              reduce using rule 71 (exp -> exp PLUS exp1 .)
    GT              reduce using rule 71 (exp -> exp PLUS exp1 .)
    LT              reduce using rule 71 (exp -> exp PLUS exp1 .)
    COMMA           reduce using rule 71 (exp -> exp PLUS exp1 .)
    TIMES           shift and go to state 70
    DIVIDE          shift and go to state 71
    MODULO          shift and go to state 72

  ! TIMES           [ reduce using rule 71 (exp -> exp PLUS exp1 .) ]
  ! DIVIDE          [ reduce using rule 71 (exp -> exp PLUS exp1 .) ]
  ! MODULO          [ reduce using rule 71 (exp -> exp PLUS exp1 .) ]
  ! RETURN          [ reduce using rule 73 (exp -> exp1 .) ]
  ! BREAK           [ reduce using rule 73 (exp -> exp1 .) ]
  ! CONTINUE        [ reduce using rule 73 (exp -> exp1 .) ]
  ! IF              [ reduce using rule 73 (exp -> exp1 .) ]
  ! ID_SC           [ reduce using rule 73 (exp -> exp1 .) ]
  ! ID_LI           [ reduce using rule 73 (exp -> exp1 .) ]
  ! INCREMENT       [ reduce using rule 73 (exp -> exp1 .) ]
  ! DECREMENT       [ reduce using rule 73 (exp -> exp1 .) ]
  ! ID              [ reduce using rule 73 (exp -> exp1 .) ]
  ! FOR             [ reduce using rule 73 (exp -> exp1 .) ]
  ! DO              [ reduce using rule 73 (exp -> exp1 .) ]
  ! WHILE           [ reduce using rule 73 (exp -> exp1 .) ]
  ! SUB             [ reduce using rule 73 (exp -> exp1 .) ]
  ! $end            [ reduce using rule 73 (exp -> exp1 .) ]
  ! RBRACE          [ reduce using rule 73 (exp -> exp1 .) ]
  ! SEMICOLON       [ reduce using rule 73 (exp -> exp1 .) ]
  ! CMP             [ reduce using rule 73 (exp -> exp1 .) ]
  ! SEQ             [ reduce using rule 73 (exp -> exp1 .) ]
  ! SNE             [ reduce using rule 73 (exp -> exp1 .) ]
  ! SGE             [ reduce using rule 73 (exp -> exp1 .) ]
  ! SLE             [ reduce using rule 73 (exp -> exp1 .) ]
  ! SGT             [ reduce using rule 73 (exp -> exp1 .) ]
  ! SLT             [ reduce using rule 73 (exp -> exp1 .) ]
  ! EQ              [ reduce using rule 73 (exp -> exp1 .) ]
  ! NE              [ reduce using rule 73 (exp -> exp1 .) ]
  ! GE              [ reduce using rule 73 (exp -> exp1 .) ]
  ! LE              [ reduce using rule 73 (exp -> exp1 .) ]
  ! GT              [ reduce using rule 73 (exp -> exp1 .) ]
  ! LT              [ reduce using rule 73 (exp -> exp1 .) ]
  ! XOR             [ reduce using rule 73 (exp -> exp1 .) ]
  ! TIMES           [ reduce using rule 73 (exp -> exp1 .) ]
  ! DIVIDE          [ reduce using rule 73 (exp -> exp1 .) ]
  ! MODULO          [ reduce using rule 73 (exp -> exp1 .) ]
  ! PLUS            [ reduce using rule 73 (exp -> exp1 .) ]
  ! MINUS           [ reduce using rule 73 (exp -> exp1 .) ]
  ! COMMA           [ reduce using rule 73 (exp -> exp1 .) ]
  ! RPAREN          [ reduce using rule 73 (exp -> exp1 .) ]


state 112

    (72) exp -> exp MINUS exp1 .
    (74) exp1 -> exp1 . TIMES exp2
    (75) exp1 -> exp1 . DIVIDE exp2
    (76) exp1 -> exp1 . MODULO exp2
    (73) exp -> exp1 .

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! reduce/reduce conflict for RETURN resolved using rule 72 (exp -> exp MINUS exp1 .)
  ! reduce/reduce conflict for BREAK resolved using rule 72 (exp -> exp MINUS exp1 .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 72 (exp -> exp MINUS exp1 .)
  ! reduce/reduce conflict for IF resolved using rule 72 (exp -> exp MINUS exp1 .)
  ! reduce/reduce conflict for ID_SC resolved using rule 72 (exp -> exp MINUS exp1 .)
  ! reduce/reduce conflict for ID_LI resolved using rule 72 (exp -> exp MINUS exp1 .)
  ! reduce/reduce conflict for INCREMENT resolved using rule 72 (exp -> exp MINUS exp1 .)
  ! reduce/reduce conflict for DECREMENT resolved using rule 72 (exp -> exp MINUS exp1 .)
  ! reduce/reduce conflict for ID resolved using rule 72 (exp -> exp MINUS exp1 .)
  ! reduce/reduce conflict for FOR resolved using rule 72 (exp -> exp MINUS exp1 .)
  ! reduce/reduce conflict for DO resolved using rule 72 (exp -> exp MINUS exp1 .)
  ! reduce/reduce conflict for WHILE resolved using rule 72 (exp -> exp MINUS exp1 .)
  ! reduce/reduce conflict for SUB resolved using rule 72 (exp -> exp MINUS exp1 .)
  ! reduce/reduce conflict for $end resolved using rule 72 (exp -> exp MINUS exp1 .)
  ! reduce/reduce conflict for RBRACE resolved using rule 72 (exp -> exp MINUS exp1 .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 72 (exp -> exp MINUS exp1 .)
  ! reduce/reduce conflict for CMP resolved using rule 72 (exp -> exp MINUS exp1 .)
  ! reduce/reduce conflict for SEQ resolved using rule 72 (exp -> exp MINUS exp1 .)
  ! reduce/reduce conflict for SNE resolved using rule 72 (exp -> exp MINUS exp1 .)
  ! reduce/reduce conflict for SGE resolved using rule 72 (exp -> exp MINUS exp1 .)
  ! reduce/reduce conflict for SLE resolved using rule 72 (exp -> exp MINUS exp1 .)
  ! reduce/reduce conflict for SGT resolved using rule 72 (exp -> exp MINUS exp1 .)
  ! reduce/reduce conflict for SLT resolved using rule 72 (exp -> exp MINUS exp1 .)
  ! reduce/reduce conflict for EQ resolved using rule 72 (exp -> exp MINUS exp1 .)
  ! reduce/reduce conflict for NE resolved using rule 72 (exp -> exp MINUS exp1 .)
  ! reduce/reduce conflict for GE resolved using rule 72 (exp -> exp MINUS exp1 .)
  ! reduce/reduce conflict for LE resolved using rule 72 (exp -> exp MINUS exp1 .)
  ! reduce/reduce conflict for GT resolved using rule 72 (exp -> exp MINUS exp1 .)
  ! reduce/reduce conflict for LT resolved using rule 72 (exp -> exp MINUS exp1 .)
  ! reduce/reduce conflict for XOR resolved using rule 72 (exp -> exp MINUS exp1 .)
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! reduce/reduce conflict for PLUS resolved using rule 72 (exp -> exp MINUS exp1 .)
  ! reduce/reduce conflict for MINUS resolved using rule 72 (exp -> exp MINUS exp1 .)
  ! reduce/reduce conflict for COMMA resolved using rule 72 (exp -> exp MINUS exp1 .)
  ! reduce/reduce conflict for RPAREN resolved using rule 72 (exp -> exp MINUS exp1 .)
    XOR             reduce using rule 72 (exp -> exp MINUS exp1 .)
    PLUS            reduce using rule 72 (exp -> exp MINUS exp1 .)
    MINUS           reduce using rule 72 (exp -> exp MINUS exp1 .)
    SEMICOLON       reduce using rule 72 (exp -> exp MINUS exp1 .)
    RPAREN          reduce using rule 72 (exp -> exp MINUS exp1 .)
    RETURN          reduce using rule 72 (exp -> exp MINUS exp1 .)
    BREAK           reduce using rule 72 (exp -> exp MINUS exp1 .)
    CONTINUE        reduce using rule 72 (exp -> exp MINUS exp1 .)
    IF              reduce using rule 72 (exp -> exp MINUS exp1 .)
    ID_SC           reduce using rule 72 (exp -> exp MINUS exp1 .)
    ID_LI           reduce using rule 72 (exp -> exp MINUS exp1 .)
    INCREMENT       reduce using rule 72 (exp -> exp MINUS exp1 .)
    DECREMENT       reduce using rule 72 (exp -> exp MINUS exp1 .)
    ID              reduce using rule 72 (exp -> exp MINUS exp1 .)
    FOR             reduce using rule 72 (exp -> exp MINUS exp1 .)
    DO              reduce using rule 72 (exp -> exp MINUS exp1 .)
    WHILE           reduce using rule 72 (exp -> exp MINUS exp1 .)
    SUB             reduce using rule 72 (exp -> exp MINUS exp1 .)
    $end            reduce using rule 72 (exp -> exp MINUS exp1 .)
    RBRACE          reduce using rule 72 (exp -> exp MINUS exp1 .)
    CMP             reduce using rule 72 (exp -> exp MINUS exp1 .)
    SEQ             reduce using rule 72 (exp -> exp MINUS exp1 .)
    SNE             reduce using rule 72 (exp -> exp MINUS exp1 .)
    SGE             reduce using rule 72 (exp -> exp MINUS exp1 .)
    SLE             reduce using rule 72 (exp -> exp MINUS exp1 .)
    SGT             reduce using rule 72 (exp -> exp MINUS exp1 .)
    SLT             reduce using rule 72 (exp -> exp MINUS exp1 .)
    EQ              reduce using rule 72 (exp -> exp MINUS exp1 .)
    NE              reduce using rule 72 (exp -> exp MINUS exp1 .)
    GE              reduce using rule 72 (exp -> exp MINUS exp1 .)
    LE              reduce using rule 72 (exp -> exp MINUS exp1 .)
    GT              reduce using rule 72 (exp -> exp MINUS exp1 .)
    LT              reduce using rule 72 (exp -> exp MINUS exp1 .)
    COMMA           reduce using rule 72 (exp -> exp MINUS exp1 .)
    TIMES           shift and go to state 70
    DIVIDE          shift and go to state 71
    MODULO          shift and go to state 72

  ! TIMES           [ reduce using rule 72 (exp -> exp MINUS exp1 .) ]
  ! DIVIDE          [ reduce using rule 72 (exp -> exp MINUS exp1 .) ]
  ! MODULO          [ reduce using rule 72 (exp -> exp MINUS exp1 .) ]
  ! RETURN          [ reduce using rule 73 (exp -> exp1 .) ]
  ! BREAK           [ reduce using rule 73 (exp -> exp1 .) ]
  ! CONTINUE        [ reduce using rule 73 (exp -> exp1 .) ]
  ! IF              [ reduce using rule 73 (exp -> exp1 .) ]
  ! ID_SC           [ reduce using rule 73 (exp -> exp1 .) ]
  ! ID_LI           [ reduce using rule 73 (exp -> exp1 .) ]
  ! INCREMENT       [ reduce using rule 73 (exp -> exp1 .) ]
  ! DECREMENT       [ reduce using rule 73 (exp -> exp1 .) ]
  ! ID              [ reduce using rule 73 (exp -> exp1 .) ]
  ! FOR             [ reduce using rule 73 (exp -> exp1 .) ]
  ! DO              [ reduce using rule 73 (exp -> exp1 .) ]
  ! WHILE           [ reduce using rule 73 (exp -> exp1 .) ]
  ! SUB             [ reduce using rule 73 (exp -> exp1 .) ]
  ! $end            [ reduce using rule 73 (exp -> exp1 .) ]
  ! RBRACE          [ reduce using rule 73 (exp -> exp1 .) ]
  ! SEMICOLON       [ reduce using rule 73 (exp -> exp1 .) ]
  ! CMP             [ reduce using rule 73 (exp -> exp1 .) ]
  ! SEQ             [ reduce using rule 73 (exp -> exp1 .) ]
  ! SNE             [ reduce using rule 73 (exp -> exp1 .) ]
  ! SGE             [ reduce using rule 73 (exp -> exp1 .) ]
  ! SLE             [ reduce using rule 73 (exp -> exp1 .) ]
  ! SGT             [ reduce using rule 73 (exp -> exp1 .) ]
  ! SLT             [ reduce using rule 73 (exp -> exp1 .) ]
  ! EQ              [ reduce using rule 73 (exp -> exp1 .) ]
  ! NE              [ reduce using rule 73 (exp -> exp1 .) ]
  ! GE              [ reduce using rule 73 (exp -> exp1 .) ]
  ! LE              [ reduce using rule 73 (exp -> exp1 .) ]
  ! GT              [ reduce using rule 73 (exp -> exp1 .) ]
  ! LT              [ reduce using rule 73 (exp -> exp1 .) ]
  ! XOR             [ reduce using rule 73 (exp -> exp1 .) ]
  ! TIMES           [ reduce using rule 73 (exp -> exp1 .) ]
  ! DIVIDE          [ reduce using rule 73 (exp -> exp1 .) ]
  ! MODULO          [ reduce using rule 73 (exp -> exp1 .) ]
  ! PLUS            [ reduce using rule 73 (exp -> exp1 .) ]
  ! MINUS           [ reduce using rule 73 (exp -> exp1 .) ]
  ! COMMA           [ reduce using rule 73 (exp -> exp1 .) ]
  ! RPAREN          [ reduce using rule 73 (exp -> exp1 .) ]


state 113

    (74) exp1 -> exp1 TIMES exp2 .
    (77) exp1 -> exp2 .

  ! reduce/reduce conflict for RETURN resolved using rule 74 (exp1 -> exp1 TIMES exp2 .)
  ! reduce/reduce conflict for BREAK resolved using rule 74 (exp1 -> exp1 TIMES exp2 .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 74 (exp1 -> exp1 TIMES exp2 .)
  ! reduce/reduce conflict for IF resolved using rule 74 (exp1 -> exp1 TIMES exp2 .)
  ! reduce/reduce conflict for ID_SC resolved using rule 74 (exp1 -> exp1 TIMES exp2 .)
  ! reduce/reduce conflict for ID_LI resolved using rule 74 (exp1 -> exp1 TIMES exp2 .)
  ! reduce/reduce conflict for INCREMENT resolved using rule 74 (exp1 -> exp1 TIMES exp2 .)
  ! reduce/reduce conflict for DECREMENT resolved using rule 74 (exp1 -> exp1 TIMES exp2 .)
  ! reduce/reduce conflict for ID resolved using rule 74 (exp1 -> exp1 TIMES exp2 .)
  ! reduce/reduce conflict for FOR resolved using rule 74 (exp1 -> exp1 TIMES exp2 .)
  ! reduce/reduce conflict for DO resolved using rule 74 (exp1 -> exp1 TIMES exp2 .)
  ! reduce/reduce conflict for WHILE resolved using rule 74 (exp1 -> exp1 TIMES exp2 .)
  ! reduce/reduce conflict for SUB resolved using rule 74 (exp1 -> exp1 TIMES exp2 .)
  ! reduce/reduce conflict for $end resolved using rule 74 (exp1 -> exp1 TIMES exp2 .)
  ! reduce/reduce conflict for RBRACE resolved using rule 74 (exp1 -> exp1 TIMES exp2 .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 74 (exp1 -> exp1 TIMES exp2 .)
  ! reduce/reduce conflict for CMP resolved using rule 74 (exp1 -> exp1 TIMES exp2 .)
  ! reduce/reduce conflict for SEQ resolved using rule 74 (exp1 -> exp1 TIMES exp2 .)
  ! reduce/reduce conflict for SNE resolved using rule 74 (exp1 -> exp1 TIMES exp2 .)
  ! reduce/reduce conflict for SGE resolved using rule 74 (exp1 -> exp1 TIMES exp2 .)
  ! reduce/reduce conflict for SLE resolved using rule 74 (exp1 -> exp1 TIMES exp2 .)
  ! reduce/reduce conflict for SGT resolved using rule 74 (exp1 -> exp1 TIMES exp2 .)
  ! reduce/reduce conflict for SLT resolved using rule 74 (exp1 -> exp1 TIMES exp2 .)
  ! reduce/reduce conflict for EQ resolved using rule 74 (exp1 -> exp1 TIMES exp2 .)
  ! reduce/reduce conflict for NE resolved using rule 74 (exp1 -> exp1 TIMES exp2 .)
  ! reduce/reduce conflict for GE resolved using rule 74 (exp1 -> exp1 TIMES exp2 .)
  ! reduce/reduce conflict for LE resolved using rule 74 (exp1 -> exp1 TIMES exp2 .)
  ! reduce/reduce conflict for GT resolved using rule 74 (exp1 -> exp1 TIMES exp2 .)
  ! reduce/reduce conflict for LT resolved using rule 74 (exp1 -> exp1 TIMES exp2 .)
  ! reduce/reduce conflict for XOR resolved using rule 74 (exp1 -> exp1 TIMES exp2 .)
  ! reduce/reduce conflict for TIMES resolved using rule 74 (exp1 -> exp1 TIMES exp2 .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 74 (exp1 -> exp1 TIMES exp2 .)
  ! reduce/reduce conflict for MODULO resolved using rule 74 (exp1 -> exp1 TIMES exp2 .)
  ! reduce/reduce conflict for PLUS resolved using rule 74 (exp1 -> exp1 TIMES exp2 .)
  ! reduce/reduce conflict for MINUS resolved using rule 74 (exp1 -> exp1 TIMES exp2 .)
  ! reduce/reduce conflict for COMMA resolved using rule 74 (exp1 -> exp1 TIMES exp2 .)
  ! reduce/reduce conflict for RPAREN resolved using rule 74 (exp1 -> exp1 TIMES exp2 .)
    XOR             reduce using rule 74 (exp1 -> exp1 TIMES exp2 .)
    TIMES           reduce using rule 74 (exp1 -> exp1 TIMES exp2 .)
    DIVIDE          reduce using rule 74 (exp1 -> exp1 TIMES exp2 .)
    MODULO          reduce using rule 74 (exp1 -> exp1 TIMES exp2 .)
    PLUS            reduce using rule 74 (exp1 -> exp1 TIMES exp2 .)
    MINUS           reduce using rule 74 (exp1 -> exp1 TIMES exp2 .)
    SEMICOLON       reduce using rule 74 (exp1 -> exp1 TIMES exp2 .)
    RPAREN          reduce using rule 74 (exp1 -> exp1 TIMES exp2 .)
    RETURN          reduce using rule 74 (exp1 -> exp1 TIMES exp2 .)
    BREAK           reduce using rule 74 (exp1 -> exp1 TIMES exp2 .)
    CONTINUE        reduce using rule 74 (exp1 -> exp1 TIMES exp2 .)
    IF              reduce using rule 74 (exp1 -> exp1 TIMES exp2 .)
    ID_SC           reduce using rule 74 (exp1 -> exp1 TIMES exp2 .)
    ID_LI           reduce using rule 74 (exp1 -> exp1 TIMES exp2 .)
    INCREMENT       reduce using rule 74 (exp1 -> exp1 TIMES exp2 .)
    DECREMENT       reduce using rule 74 (exp1 -> exp1 TIMES exp2 .)
    ID              reduce using rule 74 (exp1 -> exp1 TIMES exp2 .)
    FOR             reduce using rule 74 (exp1 -> exp1 TIMES exp2 .)
    DO              reduce using rule 74 (exp1 -> exp1 TIMES exp2 .)
    WHILE           reduce using rule 74 (exp1 -> exp1 TIMES exp2 .)
    SUB             reduce using rule 74 (exp1 -> exp1 TIMES exp2 .)
    $end            reduce using rule 74 (exp1 -> exp1 TIMES exp2 .)
    RBRACE          reduce using rule 74 (exp1 -> exp1 TIMES exp2 .)
    CMP             reduce using rule 74 (exp1 -> exp1 TIMES exp2 .)
    SEQ             reduce using rule 74 (exp1 -> exp1 TIMES exp2 .)
    SNE             reduce using rule 74 (exp1 -> exp1 TIMES exp2 .)
    SGE             reduce using rule 74 (exp1 -> exp1 TIMES exp2 .)
    SLE             reduce using rule 74 (exp1 -> exp1 TIMES exp2 .)
    SGT             reduce using rule 74 (exp1 -> exp1 TIMES exp2 .)
    SLT             reduce using rule 74 (exp1 -> exp1 TIMES exp2 .)
    EQ              reduce using rule 74 (exp1 -> exp1 TIMES exp2 .)
    NE              reduce using rule 74 (exp1 -> exp1 TIMES exp2 .)
    GE              reduce using rule 74 (exp1 -> exp1 TIMES exp2 .)
    LE              reduce using rule 74 (exp1 -> exp1 TIMES exp2 .)
    GT              reduce using rule 74 (exp1 -> exp1 TIMES exp2 .)
    LT              reduce using rule 74 (exp1 -> exp1 TIMES exp2 .)
    COMMA           reduce using rule 74 (exp1 -> exp1 TIMES exp2 .)

  ! RETURN          [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! BREAK           [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! CONTINUE        [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! IF              [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! ID_SC           [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! ID_LI           [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! INCREMENT       [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! DECREMENT       [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! ID              [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! FOR             [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! DO              [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! WHILE           [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! SUB             [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! $end            [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! RBRACE          [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! SEMICOLON       [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! CMP             [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! SEQ             [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! SNE             [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! SGE             [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! SLE             [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! SGT             [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! SLT             [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! EQ              [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! NE              [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! GE              [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! LE              [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! GT              [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! LT              [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! XOR             [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! TIMES           [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! DIVIDE          [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! MODULO          [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! PLUS            [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! MINUS           [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! COMMA           [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! RPAREN          [ reduce using rule 77 (exp1 -> exp2 .) ]


state 114

    (75) exp1 -> exp1 DIVIDE exp2 .
    (77) exp1 -> exp2 .

  ! reduce/reduce conflict for RETURN resolved using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
  ! reduce/reduce conflict for BREAK resolved using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
  ! reduce/reduce conflict for IF resolved using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
  ! reduce/reduce conflict for ID_SC resolved using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
  ! reduce/reduce conflict for ID_LI resolved using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
  ! reduce/reduce conflict for INCREMENT resolved using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
  ! reduce/reduce conflict for DECREMENT resolved using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
  ! reduce/reduce conflict for ID resolved using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
  ! reduce/reduce conflict for FOR resolved using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
  ! reduce/reduce conflict for DO resolved using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
  ! reduce/reduce conflict for WHILE resolved using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
  ! reduce/reduce conflict for SUB resolved using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
  ! reduce/reduce conflict for $end resolved using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
  ! reduce/reduce conflict for RBRACE resolved using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
  ! reduce/reduce conflict for CMP resolved using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
  ! reduce/reduce conflict for SEQ resolved using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
  ! reduce/reduce conflict for SNE resolved using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
  ! reduce/reduce conflict for SGE resolved using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
  ! reduce/reduce conflict for SLE resolved using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
  ! reduce/reduce conflict for SGT resolved using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
  ! reduce/reduce conflict for SLT resolved using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
  ! reduce/reduce conflict for EQ resolved using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
  ! reduce/reduce conflict for NE resolved using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
  ! reduce/reduce conflict for GE resolved using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
  ! reduce/reduce conflict for LE resolved using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
  ! reduce/reduce conflict for GT resolved using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
  ! reduce/reduce conflict for LT resolved using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
  ! reduce/reduce conflict for XOR resolved using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
  ! reduce/reduce conflict for TIMES resolved using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
  ! reduce/reduce conflict for MODULO resolved using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
  ! reduce/reduce conflict for PLUS resolved using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
  ! reduce/reduce conflict for MINUS resolved using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
  ! reduce/reduce conflict for COMMA resolved using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
  ! reduce/reduce conflict for RPAREN resolved using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
    XOR             reduce using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
    TIMES           reduce using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
    DIVIDE          reduce using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
    MODULO          reduce using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
    PLUS            reduce using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
    MINUS           reduce using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
    SEMICOLON       reduce using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
    RPAREN          reduce using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
    RETURN          reduce using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
    BREAK           reduce using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
    CONTINUE        reduce using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
    IF              reduce using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
    ID_SC           reduce using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
    ID_LI           reduce using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
    INCREMENT       reduce using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
    DECREMENT       reduce using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
    ID              reduce using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
    FOR             reduce using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
    DO              reduce using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
    WHILE           reduce using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
    SUB             reduce using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
    $end            reduce using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
    RBRACE          reduce using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
    CMP             reduce using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
    SEQ             reduce using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
    SNE             reduce using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
    SGE             reduce using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
    SLE             reduce using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
    SGT             reduce using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
    SLT             reduce using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
    EQ              reduce using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
    NE              reduce using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
    GE              reduce using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
    LE              reduce using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
    GT              reduce using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
    LT              reduce using rule 75 (exp1 -> exp1 DIVIDE exp2 .)
    COMMA           reduce using rule 75 (exp1 -> exp1 DIVIDE exp2 .)

  ! RETURN          [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! BREAK           [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! CONTINUE        [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! IF              [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! ID_SC           [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! ID_LI           [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! INCREMENT       [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! DECREMENT       [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! ID              [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! FOR             [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! DO              [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! WHILE           [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! SUB             [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! $end            [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! RBRACE          [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! SEMICOLON       [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! CMP             [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! SEQ             [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! SNE             [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! SGE             [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! SLE             [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! SGT             [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! SLT             [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! EQ              [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! NE              [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! GE              [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! LE              [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! GT              [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! LT              [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! XOR             [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! TIMES           [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! DIVIDE          [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! MODULO          [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! PLUS            [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! MINUS           [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! COMMA           [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! RPAREN          [ reduce using rule 77 (exp1 -> exp2 .) ]


state 115

    (76) exp1 -> exp1 MODULO exp2 .
    (77) exp1 -> exp2 .

  ! reduce/reduce conflict for RETURN resolved using rule 76 (exp1 -> exp1 MODULO exp2 .)
  ! reduce/reduce conflict for BREAK resolved using rule 76 (exp1 -> exp1 MODULO exp2 .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 76 (exp1 -> exp1 MODULO exp2 .)
  ! reduce/reduce conflict for IF resolved using rule 76 (exp1 -> exp1 MODULO exp2 .)
  ! reduce/reduce conflict for ID_SC resolved using rule 76 (exp1 -> exp1 MODULO exp2 .)
  ! reduce/reduce conflict for ID_LI resolved using rule 76 (exp1 -> exp1 MODULO exp2 .)
  ! reduce/reduce conflict for INCREMENT resolved using rule 76 (exp1 -> exp1 MODULO exp2 .)
  ! reduce/reduce conflict for DECREMENT resolved using rule 76 (exp1 -> exp1 MODULO exp2 .)
  ! reduce/reduce conflict for ID resolved using rule 76 (exp1 -> exp1 MODULO exp2 .)
  ! reduce/reduce conflict for FOR resolved using rule 76 (exp1 -> exp1 MODULO exp2 .)
  ! reduce/reduce conflict for DO resolved using rule 76 (exp1 -> exp1 MODULO exp2 .)
  ! reduce/reduce conflict for WHILE resolved using rule 76 (exp1 -> exp1 MODULO exp2 .)
  ! reduce/reduce conflict for SUB resolved using rule 76 (exp1 -> exp1 MODULO exp2 .)
  ! reduce/reduce conflict for $end resolved using rule 76 (exp1 -> exp1 MODULO exp2 .)
  ! reduce/reduce conflict for RBRACE resolved using rule 76 (exp1 -> exp1 MODULO exp2 .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 76 (exp1 -> exp1 MODULO exp2 .)
  ! reduce/reduce conflict for CMP resolved using rule 76 (exp1 -> exp1 MODULO exp2 .)
  ! reduce/reduce conflict for SEQ resolved using rule 76 (exp1 -> exp1 MODULO exp2 .)
  ! reduce/reduce conflict for SNE resolved using rule 76 (exp1 -> exp1 MODULO exp2 .)
  ! reduce/reduce conflict for SGE resolved using rule 76 (exp1 -> exp1 MODULO exp2 .)
  ! reduce/reduce conflict for SLE resolved using rule 76 (exp1 -> exp1 MODULO exp2 .)
  ! reduce/reduce conflict for SGT resolved using rule 76 (exp1 -> exp1 MODULO exp2 .)
  ! reduce/reduce conflict for SLT resolved using rule 76 (exp1 -> exp1 MODULO exp2 .)
  ! reduce/reduce conflict for EQ resolved using rule 76 (exp1 -> exp1 MODULO exp2 .)
  ! reduce/reduce conflict for NE resolved using rule 76 (exp1 -> exp1 MODULO exp2 .)
  ! reduce/reduce conflict for GE resolved using rule 76 (exp1 -> exp1 MODULO exp2 .)
  ! reduce/reduce conflict for LE resolved using rule 76 (exp1 -> exp1 MODULO exp2 .)
  ! reduce/reduce conflict for GT resolved using rule 76 (exp1 -> exp1 MODULO exp2 .)
  ! reduce/reduce conflict for LT resolved using rule 76 (exp1 -> exp1 MODULO exp2 .)
  ! reduce/reduce conflict for XOR resolved using rule 76 (exp1 -> exp1 MODULO exp2 .)
  ! reduce/reduce conflict for TIMES resolved using rule 76 (exp1 -> exp1 MODULO exp2 .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 76 (exp1 -> exp1 MODULO exp2 .)
  ! reduce/reduce conflict for MODULO resolved using rule 76 (exp1 -> exp1 MODULO exp2 .)
  ! reduce/reduce conflict for PLUS resolved using rule 76 (exp1 -> exp1 MODULO exp2 .)
  ! reduce/reduce conflict for MINUS resolved using rule 76 (exp1 -> exp1 MODULO exp2 .)
  ! reduce/reduce conflict for COMMA resolved using rule 76 (exp1 -> exp1 MODULO exp2 .)
  ! reduce/reduce conflict for RPAREN resolved using rule 76 (exp1 -> exp1 MODULO exp2 .)
    XOR             reduce using rule 76 (exp1 -> exp1 MODULO exp2 .)
    TIMES           reduce using rule 76 (exp1 -> exp1 MODULO exp2 .)
    DIVIDE          reduce using rule 76 (exp1 -> exp1 MODULO exp2 .)
    MODULO          reduce using rule 76 (exp1 -> exp1 MODULO exp2 .)
    PLUS            reduce using rule 76 (exp1 -> exp1 MODULO exp2 .)
    MINUS           reduce using rule 76 (exp1 -> exp1 MODULO exp2 .)
    SEMICOLON       reduce using rule 76 (exp1 -> exp1 MODULO exp2 .)
    RPAREN          reduce using rule 76 (exp1 -> exp1 MODULO exp2 .)
    RETURN          reduce using rule 76 (exp1 -> exp1 MODULO exp2 .)
    BREAK           reduce using rule 76 (exp1 -> exp1 MODULO exp2 .)
    CONTINUE        reduce using rule 76 (exp1 -> exp1 MODULO exp2 .)
    IF              reduce using rule 76 (exp1 -> exp1 MODULO exp2 .)
    ID_SC           reduce using rule 76 (exp1 -> exp1 MODULO exp2 .)
    ID_LI           reduce using rule 76 (exp1 -> exp1 MODULO exp2 .)
    INCREMENT       reduce using rule 76 (exp1 -> exp1 MODULO exp2 .)
    DECREMENT       reduce using rule 76 (exp1 -> exp1 MODULO exp2 .)
    ID              reduce using rule 76 (exp1 -> exp1 MODULO exp2 .)
    FOR             reduce using rule 76 (exp1 -> exp1 MODULO exp2 .)
    DO              reduce using rule 76 (exp1 -> exp1 MODULO exp2 .)
    WHILE           reduce using rule 76 (exp1 -> exp1 MODULO exp2 .)
    SUB             reduce using rule 76 (exp1 -> exp1 MODULO exp2 .)
    $end            reduce using rule 76 (exp1 -> exp1 MODULO exp2 .)
    RBRACE          reduce using rule 76 (exp1 -> exp1 MODULO exp2 .)
    CMP             reduce using rule 76 (exp1 -> exp1 MODULO exp2 .)
    SEQ             reduce using rule 76 (exp1 -> exp1 MODULO exp2 .)
    SNE             reduce using rule 76 (exp1 -> exp1 MODULO exp2 .)
    SGE             reduce using rule 76 (exp1 -> exp1 MODULO exp2 .)
    SLE             reduce using rule 76 (exp1 -> exp1 MODULO exp2 .)
    SGT             reduce using rule 76 (exp1 -> exp1 MODULO exp2 .)
    SLT             reduce using rule 76 (exp1 -> exp1 MODULO exp2 .)
    EQ              reduce using rule 76 (exp1 -> exp1 MODULO exp2 .)
    NE              reduce using rule 76 (exp1 -> exp1 MODULO exp2 .)
    GE              reduce using rule 76 (exp1 -> exp1 MODULO exp2 .)
    LE              reduce using rule 76 (exp1 -> exp1 MODULO exp2 .)
    GT              reduce using rule 76 (exp1 -> exp1 MODULO exp2 .)
    LT              reduce using rule 76 (exp1 -> exp1 MODULO exp2 .)
    COMMA           reduce using rule 76 (exp1 -> exp1 MODULO exp2 .)

  ! RETURN          [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! BREAK           [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! CONTINUE        [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! IF              [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! ID_SC           [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! ID_LI           [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! INCREMENT       [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! DECREMENT       [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! ID              [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! FOR             [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! DO              [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! WHILE           [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! SUB             [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! $end            [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! RBRACE          [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! SEMICOLON       [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! CMP             [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! SEQ             [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! SNE             [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! SGE             [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! SLE             [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! SGT             [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! SLT             [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! EQ              [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! NE              [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! GE              [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! LE              [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! GT              [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! LT              [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! XOR             [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! TIMES           [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! DIVIDE          [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! MODULO          [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! PLUS            [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! MINUS           [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! COMMA           [ reduce using rule 77 (exp1 -> exp2 .) ]
  ! RPAREN          [ reduce using rule 77 (exp1 -> exp2 .) ]


state 116

    (78) exp2 -> exp3 XOR exp2 .
    (77) exp1 -> exp2 .

  ! reduce/reduce conflict for RETURN resolved using rule 77 (exp1 -> exp2 .)
  ! reduce/reduce conflict for BREAK resolved using rule 77 (exp1 -> exp2 .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 77 (exp1 -> exp2 .)
  ! reduce/reduce conflict for IF resolved using rule 77 (exp1 -> exp2 .)
  ! reduce/reduce conflict for ID_SC resolved using rule 77 (exp1 -> exp2 .)
  ! reduce/reduce conflict for ID_LI resolved using rule 77 (exp1 -> exp2 .)
  ! reduce/reduce conflict for INCREMENT resolved using rule 77 (exp1 -> exp2 .)
  ! reduce/reduce conflict for DECREMENT resolved using rule 77 (exp1 -> exp2 .)
  ! reduce/reduce conflict for ID resolved using rule 77 (exp1 -> exp2 .)
  ! reduce/reduce conflict for FOR resolved using rule 77 (exp1 -> exp2 .)
  ! reduce/reduce conflict for DO resolved using rule 77 (exp1 -> exp2 .)
  ! reduce/reduce conflict for WHILE resolved using rule 77 (exp1 -> exp2 .)
  ! reduce/reduce conflict for SUB resolved using rule 77 (exp1 -> exp2 .)
  ! reduce/reduce conflict for $end resolved using rule 77 (exp1 -> exp2 .)
  ! reduce/reduce conflict for RBRACE resolved using rule 77 (exp1 -> exp2 .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 77 (exp1 -> exp2 .)
  ! reduce/reduce conflict for CMP resolved using rule 77 (exp1 -> exp2 .)
  ! reduce/reduce conflict for SEQ resolved using rule 77 (exp1 -> exp2 .)
  ! reduce/reduce conflict for SNE resolved using rule 77 (exp1 -> exp2 .)
  ! reduce/reduce conflict for SGE resolved using rule 77 (exp1 -> exp2 .)
  ! reduce/reduce conflict for SLE resolved using rule 77 (exp1 -> exp2 .)
  ! reduce/reduce conflict for SGT resolved using rule 77 (exp1 -> exp2 .)
  ! reduce/reduce conflict for SLT resolved using rule 77 (exp1 -> exp2 .)
  ! reduce/reduce conflict for EQ resolved using rule 77 (exp1 -> exp2 .)
  ! reduce/reduce conflict for NE resolved using rule 77 (exp1 -> exp2 .)
  ! reduce/reduce conflict for GE resolved using rule 77 (exp1 -> exp2 .)
  ! reduce/reduce conflict for LE resolved using rule 77 (exp1 -> exp2 .)
  ! reduce/reduce conflict for GT resolved using rule 77 (exp1 -> exp2 .)
  ! reduce/reduce conflict for LT resolved using rule 77 (exp1 -> exp2 .)
  ! reduce/reduce conflict for XOR resolved using rule 77 (exp1 -> exp2 .)
  ! reduce/reduce conflict for TIMES resolved using rule 77 (exp1 -> exp2 .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 77 (exp1 -> exp2 .)
  ! reduce/reduce conflict for MODULO resolved using rule 77 (exp1 -> exp2 .)
  ! reduce/reduce conflict for PLUS resolved using rule 77 (exp1 -> exp2 .)
  ! reduce/reduce conflict for MINUS resolved using rule 77 (exp1 -> exp2 .)
  ! reduce/reduce conflict for COMMA resolved using rule 77 (exp1 -> exp2 .)
  ! reduce/reduce conflict for RPAREN resolved using rule 77 (exp1 -> exp2 .)
    RETURN          reduce using rule 77 (exp1 -> exp2 .)
    BREAK           reduce using rule 77 (exp1 -> exp2 .)
    CONTINUE        reduce using rule 77 (exp1 -> exp2 .)
    IF              reduce using rule 77 (exp1 -> exp2 .)
    ID_SC           reduce using rule 77 (exp1 -> exp2 .)
    ID_LI           reduce using rule 77 (exp1 -> exp2 .)
    INCREMENT       reduce using rule 77 (exp1 -> exp2 .)
    DECREMENT       reduce using rule 77 (exp1 -> exp2 .)
    ID              reduce using rule 77 (exp1 -> exp2 .)
    FOR             reduce using rule 77 (exp1 -> exp2 .)
    DO              reduce using rule 77 (exp1 -> exp2 .)
    WHILE           reduce using rule 77 (exp1 -> exp2 .)
    SUB             reduce using rule 77 (exp1 -> exp2 .)
    $end            reduce using rule 77 (exp1 -> exp2 .)
    RBRACE          reduce using rule 77 (exp1 -> exp2 .)
    SEMICOLON       reduce using rule 77 (exp1 -> exp2 .)
    CMP             reduce using rule 77 (exp1 -> exp2 .)
    SEQ             reduce using rule 77 (exp1 -> exp2 .)
    SNE             reduce using rule 77 (exp1 -> exp2 .)
    SGE             reduce using rule 77 (exp1 -> exp2 .)
    SLE             reduce using rule 77 (exp1 -> exp2 .)
    SGT             reduce using rule 77 (exp1 -> exp2 .)
    SLT             reduce using rule 77 (exp1 -> exp2 .)
    EQ              reduce using rule 77 (exp1 -> exp2 .)
    NE              reduce using rule 77 (exp1 -> exp2 .)
    GE              reduce using rule 77 (exp1 -> exp2 .)
    LE              reduce using rule 77 (exp1 -> exp2 .)
    GT              reduce using rule 77 (exp1 -> exp2 .)
    LT              reduce using rule 77 (exp1 -> exp2 .)
    XOR             reduce using rule 77 (exp1 -> exp2 .)
    TIMES           reduce using rule 77 (exp1 -> exp2 .)
    DIVIDE          reduce using rule 77 (exp1 -> exp2 .)
    MODULO          reduce using rule 77 (exp1 -> exp2 .)
    PLUS            reduce using rule 77 (exp1 -> exp2 .)
    MINUS           reduce using rule 77 (exp1 -> exp2 .)
    COMMA           reduce using rule 77 (exp1 -> exp2 .)
    RPAREN          reduce using rule 77 (exp1 -> exp2 .)

  ! XOR             [ reduce using rule 78 (exp2 -> exp3 XOR exp2 .) ]
  ! TIMES           [ reduce using rule 78 (exp2 -> exp3 XOR exp2 .) ]
  ! DIVIDE          [ reduce using rule 78 (exp2 -> exp3 XOR exp2 .) ]
  ! MODULO          [ reduce using rule 78 (exp2 -> exp3 XOR exp2 .) ]
  ! PLUS            [ reduce using rule 78 (exp2 -> exp3 XOR exp2 .) ]
  ! MINUS           [ reduce using rule 78 (exp2 -> exp3 XOR exp2 .) ]
  ! SEMICOLON       [ reduce using rule 78 (exp2 -> exp3 XOR exp2 .) ]
  ! RPAREN          [ reduce using rule 78 (exp2 -> exp3 XOR exp2 .) ]
  ! RETURN          [ reduce using rule 78 (exp2 -> exp3 XOR exp2 .) ]
  ! BREAK           [ reduce using rule 78 (exp2 -> exp3 XOR exp2 .) ]
  ! CONTINUE        [ reduce using rule 78 (exp2 -> exp3 XOR exp2 .) ]
  ! IF              [ reduce using rule 78 (exp2 -> exp3 XOR exp2 .) ]
  ! ID_SC           [ reduce using rule 78 (exp2 -> exp3 XOR exp2 .) ]
  ! ID_LI           [ reduce using rule 78 (exp2 -> exp3 XOR exp2 .) ]
  ! INCREMENT       [ reduce using rule 78 (exp2 -> exp3 XOR exp2 .) ]
  ! DECREMENT       [ reduce using rule 78 (exp2 -> exp3 XOR exp2 .) ]
  ! ID              [ reduce using rule 78 (exp2 -> exp3 XOR exp2 .) ]
  ! FOR             [ reduce using rule 78 (exp2 -> exp3 XOR exp2 .) ]
  ! DO              [ reduce using rule 78 (exp2 -> exp3 XOR exp2 .) ]
  ! WHILE           [ reduce using rule 78 (exp2 -> exp3 XOR exp2 .) ]
  ! SUB             [ reduce using rule 78 (exp2 -> exp3 XOR exp2 .) ]
  ! $end            [ reduce using rule 78 (exp2 -> exp3 XOR exp2 .) ]
  ! RBRACE          [ reduce using rule 78 (exp2 -> exp3 XOR exp2 .) ]
  ! CMP             [ reduce using rule 78 (exp2 -> exp3 XOR exp2 .) ]
  ! SEQ             [ reduce using rule 78 (exp2 -> exp3 XOR exp2 .) ]
  ! SNE             [ reduce using rule 78 (exp2 -> exp3 XOR exp2 .) ]
  ! SGE             [ reduce using rule 78 (exp2 -> exp3 XOR exp2 .) ]
  ! SLE             [ reduce using rule 78 (exp2 -> exp3 XOR exp2 .) ]
  ! SGT             [ reduce using rule 78 (exp2 -> exp3 XOR exp2 .) ]
  ! SLT             [ reduce using rule 78 (exp2 -> exp3 XOR exp2 .) ]
  ! EQ              [ reduce using rule 78 (exp2 -> exp3 XOR exp2 .) ]
  ! NE              [ reduce using rule 78 (exp2 -> exp3 XOR exp2 .) ]
  ! GE              [ reduce using rule 78 (exp2 -> exp3 XOR exp2 .) ]
  ! LE              [ reduce using rule 78 (exp2 -> exp3 XOR exp2 .) ]
  ! GT              [ reduce using rule 78 (exp2 -> exp3 XOR exp2 .) ]
  ! LT              [ reduce using rule 78 (exp2 -> exp3 XOR exp2 .) ]
  ! COMMA           [ reduce using rule 78 (exp2 -> exp3 XOR exp2 .) ]


state 117

    (80) exp3 -> LPAREN arithmetic RPAREN .

    XOR             reduce using rule 80 (exp3 -> LPAREN arithmetic RPAREN .)
    TIMES           reduce using rule 80 (exp3 -> LPAREN arithmetic RPAREN .)
    DIVIDE          reduce using rule 80 (exp3 -> LPAREN arithmetic RPAREN .)
    MODULO          reduce using rule 80 (exp3 -> LPAREN arithmetic RPAREN .)
    PLUS            reduce using rule 80 (exp3 -> LPAREN arithmetic RPAREN .)
    MINUS           reduce using rule 80 (exp3 -> LPAREN arithmetic RPAREN .)
    SEMICOLON       reduce using rule 80 (exp3 -> LPAREN arithmetic RPAREN .)
    RPAREN          reduce using rule 80 (exp3 -> LPAREN arithmetic RPAREN .)
    RETURN          reduce using rule 80 (exp3 -> LPAREN arithmetic RPAREN .)
    BREAK           reduce using rule 80 (exp3 -> LPAREN arithmetic RPAREN .)
    CONTINUE        reduce using rule 80 (exp3 -> LPAREN arithmetic RPAREN .)
    IF              reduce using rule 80 (exp3 -> LPAREN arithmetic RPAREN .)
    ID_SC           reduce using rule 80 (exp3 -> LPAREN arithmetic RPAREN .)
    ID_LI           reduce using rule 80 (exp3 -> LPAREN arithmetic RPAREN .)
    INCREMENT       reduce using rule 80 (exp3 -> LPAREN arithmetic RPAREN .)
    DECREMENT       reduce using rule 80 (exp3 -> LPAREN arithmetic RPAREN .)
    ID              reduce using rule 80 (exp3 -> LPAREN arithmetic RPAREN .)
    FOR             reduce using rule 80 (exp3 -> LPAREN arithmetic RPAREN .)
    DO              reduce using rule 80 (exp3 -> LPAREN arithmetic RPAREN .)
    WHILE           reduce using rule 80 (exp3 -> LPAREN arithmetic RPAREN .)
    SUB             reduce using rule 80 (exp3 -> LPAREN arithmetic RPAREN .)
    $end            reduce using rule 80 (exp3 -> LPAREN arithmetic RPAREN .)
    RBRACE          reduce using rule 80 (exp3 -> LPAREN arithmetic RPAREN .)
    CMP             reduce using rule 80 (exp3 -> LPAREN arithmetic RPAREN .)
    SEQ             reduce using rule 80 (exp3 -> LPAREN arithmetic RPAREN .)
    SNE             reduce using rule 80 (exp3 -> LPAREN arithmetic RPAREN .)
    SGE             reduce using rule 80 (exp3 -> LPAREN arithmetic RPAREN .)
    SLE             reduce using rule 80 (exp3 -> LPAREN arithmetic RPAREN .)
    SGT             reduce using rule 80 (exp3 -> LPAREN arithmetic RPAREN .)
    SLT             reduce using rule 80 (exp3 -> LPAREN arithmetic RPAREN .)
    EQ              reduce using rule 80 (exp3 -> LPAREN arithmetic RPAREN .)
    NE              reduce using rule 80 (exp3 -> LPAREN arithmetic RPAREN .)
    GE              reduce using rule 80 (exp3 -> LPAREN arithmetic RPAREN .)
    LE              reduce using rule 80 (exp3 -> LPAREN arithmetic RPAREN .)
    GT              reduce using rule 80 (exp3 -> LPAREN arithmetic RPAREN .)
    LT              reduce using rule 80 (exp3 -> LPAREN arithmetic RPAREN .)
    COMMA           reduce using rule 80 (exp3 -> LPAREN arithmetic RPAREN .)


state 118

    (56) exp_condition_8 -> LPAREN exp_condition RPAREN . logic exp_condition_logic
    (59) logic -> . LAND
    (60) logic -> . LOR
    (61) logic -> . LNOT

    LAND            shift and go to state 142
    LOR             shift and go to state 143
    LNOT            shift and go to state 144

    logic                          shift and go to state 141

state 119

    (35) exp_condition -> exp_condition GT exp_condition_2 .
    (38) exp_condition_2 -> exp_condition_2 . GE exp_condition_3
    (39) exp_condition_2 -> exp_condition_2 . LE exp_condition_3

  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
    GT              reduce using rule 35 (exp_condition -> exp_condition GT exp_condition_2 .)
    LT              reduce using rule 35 (exp_condition -> exp_condition GT exp_condition_2 .)
    XOR             reduce using rule 35 (exp_condition -> exp_condition GT exp_condition_2 .)
    TIMES           reduce using rule 35 (exp_condition -> exp_condition GT exp_condition_2 .)
    DIVIDE          reduce using rule 35 (exp_condition -> exp_condition GT exp_condition_2 .)
    MODULO          reduce using rule 35 (exp_condition -> exp_condition GT exp_condition_2 .)
    PLUS            reduce using rule 35 (exp_condition -> exp_condition GT exp_condition_2 .)
    MINUS           reduce using rule 35 (exp_condition -> exp_condition GT exp_condition_2 .)
    SEMICOLON       reduce using rule 35 (exp_condition -> exp_condition GT exp_condition_2 .)
    RPAREN          reduce using rule 35 (exp_condition -> exp_condition GT exp_condition_2 .)
    RETURN          reduce using rule 35 (exp_condition -> exp_condition GT exp_condition_2 .)
    BREAK           reduce using rule 35 (exp_condition -> exp_condition GT exp_condition_2 .)
    CONTINUE        reduce using rule 35 (exp_condition -> exp_condition GT exp_condition_2 .)
    IF              reduce using rule 35 (exp_condition -> exp_condition GT exp_condition_2 .)
    ID_SC           reduce using rule 35 (exp_condition -> exp_condition GT exp_condition_2 .)
    ID_LI           reduce using rule 35 (exp_condition -> exp_condition GT exp_condition_2 .)
    INCREMENT       reduce using rule 35 (exp_condition -> exp_condition GT exp_condition_2 .)
    DECREMENT       reduce using rule 35 (exp_condition -> exp_condition GT exp_condition_2 .)
    ID              reduce using rule 35 (exp_condition -> exp_condition GT exp_condition_2 .)
    FOR             reduce using rule 35 (exp_condition -> exp_condition GT exp_condition_2 .)
    DO              reduce using rule 35 (exp_condition -> exp_condition GT exp_condition_2 .)
    WHILE           reduce using rule 35 (exp_condition -> exp_condition GT exp_condition_2 .)
    SUB             reduce using rule 35 (exp_condition -> exp_condition GT exp_condition_2 .)
    $end            reduce using rule 35 (exp_condition -> exp_condition GT exp_condition_2 .)
    RBRACE          reduce using rule 35 (exp_condition -> exp_condition GT exp_condition_2 .)
    CMP             reduce using rule 35 (exp_condition -> exp_condition GT exp_condition_2 .)
    SEQ             reduce using rule 35 (exp_condition -> exp_condition GT exp_condition_2 .)
    SNE             reduce using rule 35 (exp_condition -> exp_condition GT exp_condition_2 .)
    SGE             reduce using rule 35 (exp_condition -> exp_condition GT exp_condition_2 .)
    SLE             reduce using rule 35 (exp_condition -> exp_condition GT exp_condition_2 .)
    SGT             reduce using rule 35 (exp_condition -> exp_condition GT exp_condition_2 .)
    SLT             reduce using rule 35 (exp_condition -> exp_condition GT exp_condition_2 .)
    EQ              reduce using rule 35 (exp_condition -> exp_condition GT exp_condition_2 .)
    NE              reduce using rule 35 (exp_condition -> exp_condition GT exp_condition_2 .)
    COMMA           reduce using rule 35 (exp_condition -> exp_condition GT exp_condition_2 .)
    GE              shift and go to state 83
    LE              shift and go to state 84

  ! GE              [ reduce using rule 35 (exp_condition -> exp_condition GT exp_condition_2 .) ]
  ! LE              [ reduce using rule 35 (exp_condition -> exp_condition GT exp_condition_2 .) ]


state 120

    (36) exp_condition -> exp_condition LT exp_condition_2 .
    (38) exp_condition_2 -> exp_condition_2 . GE exp_condition_3
    (39) exp_condition_2 -> exp_condition_2 . LE exp_condition_3

  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
    GT              reduce using rule 36 (exp_condition -> exp_condition LT exp_condition_2 .)
    LT              reduce using rule 36 (exp_condition -> exp_condition LT exp_condition_2 .)
    XOR             reduce using rule 36 (exp_condition -> exp_condition LT exp_condition_2 .)
    TIMES           reduce using rule 36 (exp_condition -> exp_condition LT exp_condition_2 .)
    DIVIDE          reduce using rule 36 (exp_condition -> exp_condition LT exp_condition_2 .)
    MODULO          reduce using rule 36 (exp_condition -> exp_condition LT exp_condition_2 .)
    PLUS            reduce using rule 36 (exp_condition -> exp_condition LT exp_condition_2 .)
    MINUS           reduce using rule 36 (exp_condition -> exp_condition LT exp_condition_2 .)
    SEMICOLON       reduce using rule 36 (exp_condition -> exp_condition LT exp_condition_2 .)
    RPAREN          reduce using rule 36 (exp_condition -> exp_condition LT exp_condition_2 .)
    RETURN          reduce using rule 36 (exp_condition -> exp_condition LT exp_condition_2 .)
    BREAK           reduce using rule 36 (exp_condition -> exp_condition LT exp_condition_2 .)
    CONTINUE        reduce using rule 36 (exp_condition -> exp_condition LT exp_condition_2 .)
    IF              reduce using rule 36 (exp_condition -> exp_condition LT exp_condition_2 .)
    ID_SC           reduce using rule 36 (exp_condition -> exp_condition LT exp_condition_2 .)
    ID_LI           reduce using rule 36 (exp_condition -> exp_condition LT exp_condition_2 .)
    INCREMENT       reduce using rule 36 (exp_condition -> exp_condition LT exp_condition_2 .)
    DECREMENT       reduce using rule 36 (exp_condition -> exp_condition LT exp_condition_2 .)
    ID              reduce using rule 36 (exp_condition -> exp_condition LT exp_condition_2 .)
    FOR             reduce using rule 36 (exp_condition -> exp_condition LT exp_condition_2 .)
    DO              reduce using rule 36 (exp_condition -> exp_condition LT exp_condition_2 .)
    WHILE           reduce using rule 36 (exp_condition -> exp_condition LT exp_condition_2 .)
    SUB             reduce using rule 36 (exp_condition -> exp_condition LT exp_condition_2 .)
    $end            reduce using rule 36 (exp_condition -> exp_condition LT exp_condition_2 .)
    RBRACE          reduce using rule 36 (exp_condition -> exp_condition LT exp_condition_2 .)
    CMP             reduce using rule 36 (exp_condition -> exp_condition LT exp_condition_2 .)
    SEQ             reduce using rule 36 (exp_condition -> exp_condition LT exp_condition_2 .)
    SNE             reduce using rule 36 (exp_condition -> exp_condition LT exp_condition_2 .)
    SGE             reduce using rule 36 (exp_condition -> exp_condition LT exp_condition_2 .)
    SLE             reduce using rule 36 (exp_condition -> exp_condition LT exp_condition_2 .)
    SGT             reduce using rule 36 (exp_condition -> exp_condition LT exp_condition_2 .)
    SLT             reduce using rule 36 (exp_condition -> exp_condition LT exp_condition_2 .)
    EQ              reduce using rule 36 (exp_condition -> exp_condition LT exp_condition_2 .)
    NE              reduce using rule 36 (exp_condition -> exp_condition LT exp_condition_2 .)
    COMMA           reduce using rule 36 (exp_condition -> exp_condition LT exp_condition_2 .)
    GE              shift and go to state 83
    LE              shift and go to state 84

  ! GE              [ reduce using rule 36 (exp_condition -> exp_condition LT exp_condition_2 .) ]
  ! LE              [ reduce using rule 36 (exp_condition -> exp_condition LT exp_condition_2 .) ]


state 121

    (38) exp_condition_2 -> exp_condition_2 GE exp_condition_3 .
    (41) exp_condition_3 -> exp_condition_3 . EQ exp_condition_4
    (42) exp_condition_3 -> exp_condition_3 . NE exp_condition_4

  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    GE              reduce using rule 38 (exp_condition_2 -> exp_condition_2 GE exp_condition_3 .)
    LE              reduce using rule 38 (exp_condition_2 -> exp_condition_2 GE exp_condition_3 .)
    GT              reduce using rule 38 (exp_condition_2 -> exp_condition_2 GE exp_condition_3 .)
    LT              reduce using rule 38 (exp_condition_2 -> exp_condition_2 GE exp_condition_3 .)
    XOR             reduce using rule 38 (exp_condition_2 -> exp_condition_2 GE exp_condition_3 .)
    TIMES           reduce using rule 38 (exp_condition_2 -> exp_condition_2 GE exp_condition_3 .)
    DIVIDE          reduce using rule 38 (exp_condition_2 -> exp_condition_2 GE exp_condition_3 .)
    MODULO          reduce using rule 38 (exp_condition_2 -> exp_condition_2 GE exp_condition_3 .)
    PLUS            reduce using rule 38 (exp_condition_2 -> exp_condition_2 GE exp_condition_3 .)
    MINUS           reduce using rule 38 (exp_condition_2 -> exp_condition_2 GE exp_condition_3 .)
    SEMICOLON       reduce using rule 38 (exp_condition_2 -> exp_condition_2 GE exp_condition_3 .)
    RPAREN          reduce using rule 38 (exp_condition_2 -> exp_condition_2 GE exp_condition_3 .)
    RETURN          reduce using rule 38 (exp_condition_2 -> exp_condition_2 GE exp_condition_3 .)
    BREAK           reduce using rule 38 (exp_condition_2 -> exp_condition_2 GE exp_condition_3 .)
    CONTINUE        reduce using rule 38 (exp_condition_2 -> exp_condition_2 GE exp_condition_3 .)
    IF              reduce using rule 38 (exp_condition_2 -> exp_condition_2 GE exp_condition_3 .)
    ID_SC           reduce using rule 38 (exp_condition_2 -> exp_condition_2 GE exp_condition_3 .)
    ID_LI           reduce using rule 38 (exp_condition_2 -> exp_condition_2 GE exp_condition_3 .)
    INCREMENT       reduce using rule 38 (exp_condition_2 -> exp_condition_2 GE exp_condition_3 .)
    DECREMENT       reduce using rule 38 (exp_condition_2 -> exp_condition_2 GE exp_condition_3 .)
    ID              reduce using rule 38 (exp_condition_2 -> exp_condition_2 GE exp_condition_3 .)
    FOR             reduce using rule 38 (exp_condition_2 -> exp_condition_2 GE exp_condition_3 .)
    DO              reduce using rule 38 (exp_condition_2 -> exp_condition_2 GE exp_condition_3 .)
    WHILE           reduce using rule 38 (exp_condition_2 -> exp_condition_2 GE exp_condition_3 .)
    SUB             reduce using rule 38 (exp_condition_2 -> exp_condition_2 GE exp_condition_3 .)
    $end            reduce using rule 38 (exp_condition_2 -> exp_condition_2 GE exp_condition_3 .)
    RBRACE          reduce using rule 38 (exp_condition_2 -> exp_condition_2 GE exp_condition_3 .)
    CMP             reduce using rule 38 (exp_condition_2 -> exp_condition_2 GE exp_condition_3 .)
    SEQ             reduce using rule 38 (exp_condition_2 -> exp_condition_2 GE exp_condition_3 .)
    SNE             reduce using rule 38 (exp_condition_2 -> exp_condition_2 GE exp_condition_3 .)
    SGE             reduce using rule 38 (exp_condition_2 -> exp_condition_2 GE exp_condition_3 .)
    SLE             reduce using rule 38 (exp_condition_2 -> exp_condition_2 GE exp_condition_3 .)
    SGT             reduce using rule 38 (exp_condition_2 -> exp_condition_2 GE exp_condition_3 .)
    SLT             reduce using rule 38 (exp_condition_2 -> exp_condition_2 GE exp_condition_3 .)
    COMMA           reduce using rule 38 (exp_condition_2 -> exp_condition_2 GE exp_condition_3 .)
    EQ              shift and go to state 85
    NE              shift and go to state 86

  ! EQ              [ reduce using rule 38 (exp_condition_2 -> exp_condition_2 GE exp_condition_3 .) ]
  ! NE              [ reduce using rule 38 (exp_condition_2 -> exp_condition_2 GE exp_condition_3 .) ]


state 122

    (39) exp_condition_2 -> exp_condition_2 LE exp_condition_3 .
    (41) exp_condition_3 -> exp_condition_3 . EQ exp_condition_4
    (42) exp_condition_3 -> exp_condition_3 . NE exp_condition_4

  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    GE              reduce using rule 39 (exp_condition_2 -> exp_condition_2 LE exp_condition_3 .)
    LE              reduce using rule 39 (exp_condition_2 -> exp_condition_2 LE exp_condition_3 .)
    GT              reduce using rule 39 (exp_condition_2 -> exp_condition_2 LE exp_condition_3 .)
    LT              reduce using rule 39 (exp_condition_2 -> exp_condition_2 LE exp_condition_3 .)
    XOR             reduce using rule 39 (exp_condition_2 -> exp_condition_2 LE exp_condition_3 .)
    TIMES           reduce using rule 39 (exp_condition_2 -> exp_condition_2 LE exp_condition_3 .)
    DIVIDE          reduce using rule 39 (exp_condition_2 -> exp_condition_2 LE exp_condition_3 .)
    MODULO          reduce using rule 39 (exp_condition_2 -> exp_condition_2 LE exp_condition_3 .)
    PLUS            reduce using rule 39 (exp_condition_2 -> exp_condition_2 LE exp_condition_3 .)
    MINUS           reduce using rule 39 (exp_condition_2 -> exp_condition_2 LE exp_condition_3 .)
    SEMICOLON       reduce using rule 39 (exp_condition_2 -> exp_condition_2 LE exp_condition_3 .)
    RPAREN          reduce using rule 39 (exp_condition_2 -> exp_condition_2 LE exp_condition_3 .)
    RETURN          reduce using rule 39 (exp_condition_2 -> exp_condition_2 LE exp_condition_3 .)
    BREAK           reduce using rule 39 (exp_condition_2 -> exp_condition_2 LE exp_condition_3 .)
    CONTINUE        reduce using rule 39 (exp_condition_2 -> exp_condition_2 LE exp_condition_3 .)
    IF              reduce using rule 39 (exp_condition_2 -> exp_condition_2 LE exp_condition_3 .)
    ID_SC           reduce using rule 39 (exp_condition_2 -> exp_condition_2 LE exp_condition_3 .)
    ID_LI           reduce using rule 39 (exp_condition_2 -> exp_condition_2 LE exp_condition_3 .)
    INCREMENT       reduce using rule 39 (exp_condition_2 -> exp_condition_2 LE exp_condition_3 .)
    DECREMENT       reduce using rule 39 (exp_condition_2 -> exp_condition_2 LE exp_condition_3 .)
    ID              reduce using rule 39 (exp_condition_2 -> exp_condition_2 LE exp_condition_3 .)
    FOR             reduce using rule 39 (exp_condition_2 -> exp_condition_2 LE exp_condition_3 .)
    DO              reduce using rule 39 (exp_condition_2 -> exp_condition_2 LE exp_condition_3 .)
    WHILE           reduce using rule 39 (exp_condition_2 -> exp_condition_2 LE exp_condition_3 .)
    SUB             reduce using rule 39 (exp_condition_2 -> exp_condition_2 LE exp_condition_3 .)
    $end            reduce using rule 39 (exp_condition_2 -> exp_condition_2 LE exp_condition_3 .)
    RBRACE          reduce using rule 39 (exp_condition_2 -> exp_condition_2 LE exp_condition_3 .)
    CMP             reduce using rule 39 (exp_condition_2 -> exp_condition_2 LE exp_condition_3 .)
    SEQ             reduce using rule 39 (exp_condition_2 -> exp_condition_2 LE exp_condition_3 .)
    SNE             reduce using rule 39 (exp_condition_2 -> exp_condition_2 LE exp_condition_3 .)
    SGE             reduce using rule 39 (exp_condition_2 -> exp_condition_2 LE exp_condition_3 .)
    SLE             reduce using rule 39 (exp_condition_2 -> exp_condition_2 LE exp_condition_3 .)
    SGT             reduce using rule 39 (exp_condition_2 -> exp_condition_2 LE exp_condition_3 .)
    SLT             reduce using rule 39 (exp_condition_2 -> exp_condition_2 LE exp_condition_3 .)
    COMMA           reduce using rule 39 (exp_condition_2 -> exp_condition_2 LE exp_condition_3 .)
    EQ              shift and go to state 85
    NE              shift and go to state 86

  ! EQ              [ reduce using rule 39 (exp_condition_2 -> exp_condition_2 LE exp_condition_3 .) ]
  ! NE              [ reduce using rule 39 (exp_condition_2 -> exp_condition_2 LE exp_condition_3 .) ]


state 123

    (41) exp_condition_3 -> exp_condition_3 EQ exp_condition_4 .
    (44) exp_condition_4 -> exp_condition_4 . SGT exp_condition_5
    (45) exp_condition_4 -> exp_condition_4 . SLT exp_condition_5

  ! shift/reduce conflict for SGT resolved as shift
  ! shift/reduce conflict for SLT resolved as shift
    EQ              reduce using rule 41 (exp_condition_3 -> exp_condition_3 EQ exp_condition_4 .)
    NE              reduce using rule 41 (exp_condition_3 -> exp_condition_3 EQ exp_condition_4 .)
    GE              reduce using rule 41 (exp_condition_3 -> exp_condition_3 EQ exp_condition_4 .)
    LE              reduce using rule 41 (exp_condition_3 -> exp_condition_3 EQ exp_condition_4 .)
    GT              reduce using rule 41 (exp_condition_3 -> exp_condition_3 EQ exp_condition_4 .)
    LT              reduce using rule 41 (exp_condition_3 -> exp_condition_3 EQ exp_condition_4 .)
    XOR             reduce using rule 41 (exp_condition_3 -> exp_condition_3 EQ exp_condition_4 .)
    TIMES           reduce using rule 41 (exp_condition_3 -> exp_condition_3 EQ exp_condition_4 .)
    DIVIDE          reduce using rule 41 (exp_condition_3 -> exp_condition_3 EQ exp_condition_4 .)
    MODULO          reduce using rule 41 (exp_condition_3 -> exp_condition_3 EQ exp_condition_4 .)
    PLUS            reduce using rule 41 (exp_condition_3 -> exp_condition_3 EQ exp_condition_4 .)
    MINUS           reduce using rule 41 (exp_condition_3 -> exp_condition_3 EQ exp_condition_4 .)
    SEMICOLON       reduce using rule 41 (exp_condition_3 -> exp_condition_3 EQ exp_condition_4 .)
    RPAREN          reduce using rule 41 (exp_condition_3 -> exp_condition_3 EQ exp_condition_4 .)
    RETURN          reduce using rule 41 (exp_condition_3 -> exp_condition_3 EQ exp_condition_4 .)
    BREAK           reduce using rule 41 (exp_condition_3 -> exp_condition_3 EQ exp_condition_4 .)
    CONTINUE        reduce using rule 41 (exp_condition_3 -> exp_condition_3 EQ exp_condition_4 .)
    IF              reduce using rule 41 (exp_condition_3 -> exp_condition_3 EQ exp_condition_4 .)
    ID_SC           reduce using rule 41 (exp_condition_3 -> exp_condition_3 EQ exp_condition_4 .)
    ID_LI           reduce using rule 41 (exp_condition_3 -> exp_condition_3 EQ exp_condition_4 .)
    INCREMENT       reduce using rule 41 (exp_condition_3 -> exp_condition_3 EQ exp_condition_4 .)
    DECREMENT       reduce using rule 41 (exp_condition_3 -> exp_condition_3 EQ exp_condition_4 .)
    ID              reduce using rule 41 (exp_condition_3 -> exp_condition_3 EQ exp_condition_4 .)
    FOR             reduce using rule 41 (exp_condition_3 -> exp_condition_3 EQ exp_condition_4 .)
    DO              reduce using rule 41 (exp_condition_3 -> exp_condition_3 EQ exp_condition_4 .)
    WHILE           reduce using rule 41 (exp_condition_3 -> exp_condition_3 EQ exp_condition_4 .)
    SUB             reduce using rule 41 (exp_condition_3 -> exp_condition_3 EQ exp_condition_4 .)
    $end            reduce using rule 41 (exp_condition_3 -> exp_condition_3 EQ exp_condition_4 .)
    RBRACE          reduce using rule 41 (exp_condition_3 -> exp_condition_3 EQ exp_condition_4 .)
    CMP             reduce using rule 41 (exp_condition_3 -> exp_condition_3 EQ exp_condition_4 .)
    SEQ             reduce using rule 41 (exp_condition_3 -> exp_condition_3 EQ exp_condition_4 .)
    SNE             reduce using rule 41 (exp_condition_3 -> exp_condition_3 EQ exp_condition_4 .)
    SGE             reduce using rule 41 (exp_condition_3 -> exp_condition_3 EQ exp_condition_4 .)
    SLE             reduce using rule 41 (exp_condition_3 -> exp_condition_3 EQ exp_condition_4 .)
    COMMA           reduce using rule 41 (exp_condition_3 -> exp_condition_3 EQ exp_condition_4 .)
    SGT             shift and go to state 87
    SLT             shift and go to state 88

  ! SGT             [ reduce using rule 41 (exp_condition_3 -> exp_condition_3 EQ exp_condition_4 .) ]
  ! SLT             [ reduce using rule 41 (exp_condition_3 -> exp_condition_3 EQ exp_condition_4 .) ]


state 124

    (42) exp_condition_3 -> exp_condition_3 NE exp_condition_4 .
    (44) exp_condition_4 -> exp_condition_4 . SGT exp_condition_5
    (45) exp_condition_4 -> exp_condition_4 . SLT exp_condition_5

  ! shift/reduce conflict for SGT resolved as shift
  ! shift/reduce conflict for SLT resolved as shift
    EQ              reduce using rule 42 (exp_condition_3 -> exp_condition_3 NE exp_condition_4 .)
    NE              reduce using rule 42 (exp_condition_3 -> exp_condition_3 NE exp_condition_4 .)
    GE              reduce using rule 42 (exp_condition_3 -> exp_condition_3 NE exp_condition_4 .)
    LE              reduce using rule 42 (exp_condition_3 -> exp_condition_3 NE exp_condition_4 .)
    GT              reduce using rule 42 (exp_condition_3 -> exp_condition_3 NE exp_condition_4 .)
    LT              reduce using rule 42 (exp_condition_3 -> exp_condition_3 NE exp_condition_4 .)
    XOR             reduce using rule 42 (exp_condition_3 -> exp_condition_3 NE exp_condition_4 .)
    TIMES           reduce using rule 42 (exp_condition_3 -> exp_condition_3 NE exp_condition_4 .)
    DIVIDE          reduce using rule 42 (exp_condition_3 -> exp_condition_3 NE exp_condition_4 .)
    MODULO          reduce using rule 42 (exp_condition_3 -> exp_condition_3 NE exp_condition_4 .)
    PLUS            reduce using rule 42 (exp_condition_3 -> exp_condition_3 NE exp_condition_4 .)
    MINUS           reduce using rule 42 (exp_condition_3 -> exp_condition_3 NE exp_condition_4 .)
    SEMICOLON       reduce using rule 42 (exp_condition_3 -> exp_condition_3 NE exp_condition_4 .)
    RPAREN          reduce using rule 42 (exp_condition_3 -> exp_condition_3 NE exp_condition_4 .)
    RETURN          reduce using rule 42 (exp_condition_3 -> exp_condition_3 NE exp_condition_4 .)
    BREAK           reduce using rule 42 (exp_condition_3 -> exp_condition_3 NE exp_condition_4 .)
    CONTINUE        reduce using rule 42 (exp_condition_3 -> exp_condition_3 NE exp_condition_4 .)
    IF              reduce using rule 42 (exp_condition_3 -> exp_condition_3 NE exp_condition_4 .)
    ID_SC           reduce using rule 42 (exp_condition_3 -> exp_condition_3 NE exp_condition_4 .)
    ID_LI           reduce using rule 42 (exp_condition_3 -> exp_condition_3 NE exp_condition_4 .)
    INCREMENT       reduce using rule 42 (exp_condition_3 -> exp_condition_3 NE exp_condition_4 .)
    DECREMENT       reduce using rule 42 (exp_condition_3 -> exp_condition_3 NE exp_condition_4 .)
    ID              reduce using rule 42 (exp_condition_3 -> exp_condition_3 NE exp_condition_4 .)
    FOR             reduce using rule 42 (exp_condition_3 -> exp_condition_3 NE exp_condition_4 .)
    DO              reduce using rule 42 (exp_condition_3 -> exp_condition_3 NE exp_condition_4 .)
    WHILE           reduce using rule 42 (exp_condition_3 -> exp_condition_3 NE exp_condition_4 .)
    SUB             reduce using rule 42 (exp_condition_3 -> exp_condition_3 NE exp_condition_4 .)
    $end            reduce using rule 42 (exp_condition_3 -> exp_condition_3 NE exp_condition_4 .)
    RBRACE          reduce using rule 42 (exp_condition_3 -> exp_condition_3 NE exp_condition_4 .)
    CMP             reduce using rule 42 (exp_condition_3 -> exp_condition_3 NE exp_condition_4 .)
    SEQ             reduce using rule 42 (exp_condition_3 -> exp_condition_3 NE exp_condition_4 .)
    SNE             reduce using rule 42 (exp_condition_3 -> exp_condition_3 NE exp_condition_4 .)
    SGE             reduce using rule 42 (exp_condition_3 -> exp_condition_3 NE exp_condition_4 .)
    SLE             reduce using rule 42 (exp_condition_3 -> exp_condition_3 NE exp_condition_4 .)
    COMMA           reduce using rule 42 (exp_condition_3 -> exp_condition_3 NE exp_condition_4 .)
    SGT             shift and go to state 87
    SLT             shift and go to state 88

  ! SGT             [ reduce using rule 42 (exp_condition_3 -> exp_condition_3 NE exp_condition_4 .) ]
  ! SLT             [ reduce using rule 42 (exp_condition_3 -> exp_condition_3 NE exp_condition_4 .) ]


state 125

    (44) exp_condition_4 -> exp_condition_4 SGT exp_condition_5 .
    (47) exp_condition_5 -> exp_condition_5 . SGE exp_condition_6
    (48) exp_condition_5 -> exp_condition_5 . SLE exp_condition_6

  ! shift/reduce conflict for SGE resolved as shift
  ! shift/reduce conflict for SLE resolved as shift
    SGT             reduce using rule 44 (exp_condition_4 -> exp_condition_4 SGT exp_condition_5 .)
    SLT             reduce using rule 44 (exp_condition_4 -> exp_condition_4 SGT exp_condition_5 .)
    EQ              reduce using rule 44 (exp_condition_4 -> exp_condition_4 SGT exp_condition_5 .)
    NE              reduce using rule 44 (exp_condition_4 -> exp_condition_4 SGT exp_condition_5 .)
    GE              reduce using rule 44 (exp_condition_4 -> exp_condition_4 SGT exp_condition_5 .)
    LE              reduce using rule 44 (exp_condition_4 -> exp_condition_4 SGT exp_condition_5 .)
    GT              reduce using rule 44 (exp_condition_4 -> exp_condition_4 SGT exp_condition_5 .)
    LT              reduce using rule 44 (exp_condition_4 -> exp_condition_4 SGT exp_condition_5 .)
    XOR             reduce using rule 44 (exp_condition_4 -> exp_condition_4 SGT exp_condition_5 .)
    TIMES           reduce using rule 44 (exp_condition_4 -> exp_condition_4 SGT exp_condition_5 .)
    DIVIDE          reduce using rule 44 (exp_condition_4 -> exp_condition_4 SGT exp_condition_5 .)
    MODULO          reduce using rule 44 (exp_condition_4 -> exp_condition_4 SGT exp_condition_5 .)
    PLUS            reduce using rule 44 (exp_condition_4 -> exp_condition_4 SGT exp_condition_5 .)
    MINUS           reduce using rule 44 (exp_condition_4 -> exp_condition_4 SGT exp_condition_5 .)
    SEMICOLON       reduce using rule 44 (exp_condition_4 -> exp_condition_4 SGT exp_condition_5 .)
    RPAREN          reduce using rule 44 (exp_condition_4 -> exp_condition_4 SGT exp_condition_5 .)
    RETURN          reduce using rule 44 (exp_condition_4 -> exp_condition_4 SGT exp_condition_5 .)
    BREAK           reduce using rule 44 (exp_condition_4 -> exp_condition_4 SGT exp_condition_5 .)
    CONTINUE        reduce using rule 44 (exp_condition_4 -> exp_condition_4 SGT exp_condition_5 .)
    IF              reduce using rule 44 (exp_condition_4 -> exp_condition_4 SGT exp_condition_5 .)
    ID_SC           reduce using rule 44 (exp_condition_4 -> exp_condition_4 SGT exp_condition_5 .)
    ID_LI           reduce using rule 44 (exp_condition_4 -> exp_condition_4 SGT exp_condition_5 .)
    INCREMENT       reduce using rule 44 (exp_condition_4 -> exp_condition_4 SGT exp_condition_5 .)
    DECREMENT       reduce using rule 44 (exp_condition_4 -> exp_condition_4 SGT exp_condition_5 .)
    ID              reduce using rule 44 (exp_condition_4 -> exp_condition_4 SGT exp_condition_5 .)
    FOR             reduce using rule 44 (exp_condition_4 -> exp_condition_4 SGT exp_condition_5 .)
    DO              reduce using rule 44 (exp_condition_4 -> exp_condition_4 SGT exp_condition_5 .)
    WHILE           reduce using rule 44 (exp_condition_4 -> exp_condition_4 SGT exp_condition_5 .)
    SUB             reduce using rule 44 (exp_condition_4 -> exp_condition_4 SGT exp_condition_5 .)
    $end            reduce using rule 44 (exp_condition_4 -> exp_condition_4 SGT exp_condition_5 .)
    RBRACE          reduce using rule 44 (exp_condition_4 -> exp_condition_4 SGT exp_condition_5 .)
    CMP             reduce using rule 44 (exp_condition_4 -> exp_condition_4 SGT exp_condition_5 .)
    SEQ             reduce using rule 44 (exp_condition_4 -> exp_condition_4 SGT exp_condition_5 .)
    SNE             reduce using rule 44 (exp_condition_4 -> exp_condition_4 SGT exp_condition_5 .)
    COMMA           reduce using rule 44 (exp_condition_4 -> exp_condition_4 SGT exp_condition_5 .)
    SGE             shift and go to state 89
    SLE             shift and go to state 90

  ! SGE             [ reduce using rule 44 (exp_condition_4 -> exp_condition_4 SGT exp_condition_5 .) ]
  ! SLE             [ reduce using rule 44 (exp_condition_4 -> exp_condition_4 SGT exp_condition_5 .) ]


state 126

    (45) exp_condition_4 -> exp_condition_4 SLT exp_condition_5 .
    (47) exp_condition_5 -> exp_condition_5 . SGE exp_condition_6
    (48) exp_condition_5 -> exp_condition_5 . SLE exp_condition_6

  ! shift/reduce conflict for SGE resolved as shift
  ! shift/reduce conflict for SLE resolved as shift
    SGT             reduce using rule 45 (exp_condition_4 -> exp_condition_4 SLT exp_condition_5 .)
    SLT             reduce using rule 45 (exp_condition_4 -> exp_condition_4 SLT exp_condition_5 .)
    EQ              reduce using rule 45 (exp_condition_4 -> exp_condition_4 SLT exp_condition_5 .)
    NE              reduce using rule 45 (exp_condition_4 -> exp_condition_4 SLT exp_condition_5 .)
    GE              reduce using rule 45 (exp_condition_4 -> exp_condition_4 SLT exp_condition_5 .)
    LE              reduce using rule 45 (exp_condition_4 -> exp_condition_4 SLT exp_condition_5 .)
    GT              reduce using rule 45 (exp_condition_4 -> exp_condition_4 SLT exp_condition_5 .)
    LT              reduce using rule 45 (exp_condition_4 -> exp_condition_4 SLT exp_condition_5 .)
    XOR             reduce using rule 45 (exp_condition_4 -> exp_condition_4 SLT exp_condition_5 .)
    TIMES           reduce using rule 45 (exp_condition_4 -> exp_condition_4 SLT exp_condition_5 .)
    DIVIDE          reduce using rule 45 (exp_condition_4 -> exp_condition_4 SLT exp_condition_5 .)
    MODULO          reduce using rule 45 (exp_condition_4 -> exp_condition_4 SLT exp_condition_5 .)
    PLUS            reduce using rule 45 (exp_condition_4 -> exp_condition_4 SLT exp_condition_5 .)
    MINUS           reduce using rule 45 (exp_condition_4 -> exp_condition_4 SLT exp_condition_5 .)
    SEMICOLON       reduce using rule 45 (exp_condition_4 -> exp_condition_4 SLT exp_condition_5 .)
    RPAREN          reduce using rule 45 (exp_condition_4 -> exp_condition_4 SLT exp_condition_5 .)
    RETURN          reduce using rule 45 (exp_condition_4 -> exp_condition_4 SLT exp_condition_5 .)
    BREAK           reduce using rule 45 (exp_condition_4 -> exp_condition_4 SLT exp_condition_5 .)
    CONTINUE        reduce using rule 45 (exp_condition_4 -> exp_condition_4 SLT exp_condition_5 .)
    IF              reduce using rule 45 (exp_condition_4 -> exp_condition_4 SLT exp_condition_5 .)
    ID_SC           reduce using rule 45 (exp_condition_4 -> exp_condition_4 SLT exp_condition_5 .)
    ID_LI           reduce using rule 45 (exp_condition_4 -> exp_condition_4 SLT exp_condition_5 .)
    INCREMENT       reduce using rule 45 (exp_condition_4 -> exp_condition_4 SLT exp_condition_5 .)
    DECREMENT       reduce using rule 45 (exp_condition_4 -> exp_condition_4 SLT exp_condition_5 .)
    ID              reduce using rule 45 (exp_condition_4 -> exp_condition_4 SLT exp_condition_5 .)
    FOR             reduce using rule 45 (exp_condition_4 -> exp_condition_4 SLT exp_condition_5 .)
    DO              reduce using rule 45 (exp_condition_4 -> exp_condition_4 SLT exp_condition_5 .)
    WHILE           reduce using rule 45 (exp_condition_4 -> exp_condition_4 SLT exp_condition_5 .)
    SUB             reduce using rule 45 (exp_condition_4 -> exp_condition_4 SLT exp_condition_5 .)
    $end            reduce using rule 45 (exp_condition_4 -> exp_condition_4 SLT exp_condition_5 .)
    RBRACE          reduce using rule 45 (exp_condition_4 -> exp_condition_4 SLT exp_condition_5 .)
    CMP             reduce using rule 45 (exp_condition_4 -> exp_condition_4 SLT exp_condition_5 .)
    SEQ             reduce using rule 45 (exp_condition_4 -> exp_condition_4 SLT exp_condition_5 .)
    SNE             reduce using rule 45 (exp_condition_4 -> exp_condition_4 SLT exp_condition_5 .)
    COMMA           reduce using rule 45 (exp_condition_4 -> exp_condition_4 SLT exp_condition_5 .)
    SGE             shift and go to state 89
    SLE             shift and go to state 90

  ! SGE             [ reduce using rule 45 (exp_condition_4 -> exp_condition_4 SLT exp_condition_5 .) ]
  ! SLE             [ reduce using rule 45 (exp_condition_4 -> exp_condition_4 SLT exp_condition_5 .) ]


state 127

    (47) exp_condition_5 -> exp_condition_5 SGE exp_condition_6 .
    (50) exp_condition_6 -> exp_condition_6 . SEQ exp_condition_7
    (51) exp_condition_6 -> exp_condition_6 . SNE exp_condition_7

  ! shift/reduce conflict for SEQ resolved as shift
  ! shift/reduce conflict for SNE resolved as shift
    SGE             reduce using rule 47 (exp_condition_5 -> exp_condition_5 SGE exp_condition_6 .)
    SLE             reduce using rule 47 (exp_condition_5 -> exp_condition_5 SGE exp_condition_6 .)
    SGT             reduce using rule 47 (exp_condition_5 -> exp_condition_5 SGE exp_condition_6 .)
    SLT             reduce using rule 47 (exp_condition_5 -> exp_condition_5 SGE exp_condition_6 .)
    EQ              reduce using rule 47 (exp_condition_5 -> exp_condition_5 SGE exp_condition_6 .)
    NE              reduce using rule 47 (exp_condition_5 -> exp_condition_5 SGE exp_condition_6 .)
    GE              reduce using rule 47 (exp_condition_5 -> exp_condition_5 SGE exp_condition_6 .)
    LE              reduce using rule 47 (exp_condition_5 -> exp_condition_5 SGE exp_condition_6 .)
    GT              reduce using rule 47 (exp_condition_5 -> exp_condition_5 SGE exp_condition_6 .)
    LT              reduce using rule 47 (exp_condition_5 -> exp_condition_5 SGE exp_condition_6 .)
    XOR             reduce using rule 47 (exp_condition_5 -> exp_condition_5 SGE exp_condition_6 .)
    TIMES           reduce using rule 47 (exp_condition_5 -> exp_condition_5 SGE exp_condition_6 .)
    DIVIDE          reduce using rule 47 (exp_condition_5 -> exp_condition_5 SGE exp_condition_6 .)
    MODULO          reduce using rule 47 (exp_condition_5 -> exp_condition_5 SGE exp_condition_6 .)
    PLUS            reduce using rule 47 (exp_condition_5 -> exp_condition_5 SGE exp_condition_6 .)
    MINUS           reduce using rule 47 (exp_condition_5 -> exp_condition_5 SGE exp_condition_6 .)
    SEMICOLON       reduce using rule 47 (exp_condition_5 -> exp_condition_5 SGE exp_condition_6 .)
    RPAREN          reduce using rule 47 (exp_condition_5 -> exp_condition_5 SGE exp_condition_6 .)
    RETURN          reduce using rule 47 (exp_condition_5 -> exp_condition_5 SGE exp_condition_6 .)
    BREAK           reduce using rule 47 (exp_condition_5 -> exp_condition_5 SGE exp_condition_6 .)
    CONTINUE        reduce using rule 47 (exp_condition_5 -> exp_condition_5 SGE exp_condition_6 .)
    IF              reduce using rule 47 (exp_condition_5 -> exp_condition_5 SGE exp_condition_6 .)
    ID_SC           reduce using rule 47 (exp_condition_5 -> exp_condition_5 SGE exp_condition_6 .)
    ID_LI           reduce using rule 47 (exp_condition_5 -> exp_condition_5 SGE exp_condition_6 .)
    INCREMENT       reduce using rule 47 (exp_condition_5 -> exp_condition_5 SGE exp_condition_6 .)
    DECREMENT       reduce using rule 47 (exp_condition_5 -> exp_condition_5 SGE exp_condition_6 .)
    ID              reduce using rule 47 (exp_condition_5 -> exp_condition_5 SGE exp_condition_6 .)
    FOR             reduce using rule 47 (exp_condition_5 -> exp_condition_5 SGE exp_condition_6 .)
    DO              reduce using rule 47 (exp_condition_5 -> exp_condition_5 SGE exp_condition_6 .)
    WHILE           reduce using rule 47 (exp_condition_5 -> exp_condition_5 SGE exp_condition_6 .)
    SUB             reduce using rule 47 (exp_condition_5 -> exp_condition_5 SGE exp_condition_6 .)
    $end            reduce using rule 47 (exp_condition_5 -> exp_condition_5 SGE exp_condition_6 .)
    RBRACE          reduce using rule 47 (exp_condition_5 -> exp_condition_5 SGE exp_condition_6 .)
    CMP             reduce using rule 47 (exp_condition_5 -> exp_condition_5 SGE exp_condition_6 .)
    COMMA           reduce using rule 47 (exp_condition_5 -> exp_condition_5 SGE exp_condition_6 .)
    SEQ             shift and go to state 91
    SNE             shift and go to state 92

  ! SEQ             [ reduce using rule 47 (exp_condition_5 -> exp_condition_5 SGE exp_condition_6 .) ]
  ! SNE             [ reduce using rule 47 (exp_condition_5 -> exp_condition_5 SGE exp_condition_6 .) ]


state 128

    (48) exp_condition_5 -> exp_condition_5 SLE exp_condition_6 .
    (50) exp_condition_6 -> exp_condition_6 . SEQ exp_condition_7
    (51) exp_condition_6 -> exp_condition_6 . SNE exp_condition_7

  ! shift/reduce conflict for SEQ resolved as shift
  ! shift/reduce conflict for SNE resolved as shift
    SGE             reduce using rule 48 (exp_condition_5 -> exp_condition_5 SLE exp_condition_6 .)
    SLE             reduce using rule 48 (exp_condition_5 -> exp_condition_5 SLE exp_condition_6 .)
    SGT             reduce using rule 48 (exp_condition_5 -> exp_condition_5 SLE exp_condition_6 .)
    SLT             reduce using rule 48 (exp_condition_5 -> exp_condition_5 SLE exp_condition_6 .)
    EQ              reduce using rule 48 (exp_condition_5 -> exp_condition_5 SLE exp_condition_6 .)
    NE              reduce using rule 48 (exp_condition_5 -> exp_condition_5 SLE exp_condition_6 .)
    GE              reduce using rule 48 (exp_condition_5 -> exp_condition_5 SLE exp_condition_6 .)
    LE              reduce using rule 48 (exp_condition_5 -> exp_condition_5 SLE exp_condition_6 .)
    GT              reduce using rule 48 (exp_condition_5 -> exp_condition_5 SLE exp_condition_6 .)
    LT              reduce using rule 48 (exp_condition_5 -> exp_condition_5 SLE exp_condition_6 .)
    XOR             reduce using rule 48 (exp_condition_5 -> exp_condition_5 SLE exp_condition_6 .)
    TIMES           reduce using rule 48 (exp_condition_5 -> exp_condition_5 SLE exp_condition_6 .)
    DIVIDE          reduce using rule 48 (exp_condition_5 -> exp_condition_5 SLE exp_condition_6 .)
    MODULO          reduce using rule 48 (exp_condition_5 -> exp_condition_5 SLE exp_condition_6 .)
    PLUS            reduce using rule 48 (exp_condition_5 -> exp_condition_5 SLE exp_condition_6 .)
    MINUS           reduce using rule 48 (exp_condition_5 -> exp_condition_5 SLE exp_condition_6 .)
    SEMICOLON       reduce using rule 48 (exp_condition_5 -> exp_condition_5 SLE exp_condition_6 .)
    RPAREN          reduce using rule 48 (exp_condition_5 -> exp_condition_5 SLE exp_condition_6 .)
    RETURN          reduce using rule 48 (exp_condition_5 -> exp_condition_5 SLE exp_condition_6 .)
    BREAK           reduce using rule 48 (exp_condition_5 -> exp_condition_5 SLE exp_condition_6 .)
    CONTINUE        reduce using rule 48 (exp_condition_5 -> exp_condition_5 SLE exp_condition_6 .)
    IF              reduce using rule 48 (exp_condition_5 -> exp_condition_5 SLE exp_condition_6 .)
    ID_SC           reduce using rule 48 (exp_condition_5 -> exp_condition_5 SLE exp_condition_6 .)
    ID_LI           reduce using rule 48 (exp_condition_5 -> exp_condition_5 SLE exp_condition_6 .)
    INCREMENT       reduce using rule 48 (exp_condition_5 -> exp_condition_5 SLE exp_condition_6 .)
    DECREMENT       reduce using rule 48 (exp_condition_5 -> exp_condition_5 SLE exp_condition_6 .)
    ID              reduce using rule 48 (exp_condition_5 -> exp_condition_5 SLE exp_condition_6 .)
    FOR             reduce using rule 48 (exp_condition_5 -> exp_condition_5 SLE exp_condition_6 .)
    DO              reduce using rule 48 (exp_condition_5 -> exp_condition_5 SLE exp_condition_6 .)
    WHILE           reduce using rule 48 (exp_condition_5 -> exp_condition_5 SLE exp_condition_6 .)
    SUB             reduce using rule 48 (exp_condition_5 -> exp_condition_5 SLE exp_condition_6 .)
    $end            reduce using rule 48 (exp_condition_5 -> exp_condition_5 SLE exp_condition_6 .)
    RBRACE          reduce using rule 48 (exp_condition_5 -> exp_condition_5 SLE exp_condition_6 .)
    CMP             reduce using rule 48 (exp_condition_5 -> exp_condition_5 SLE exp_condition_6 .)
    COMMA           reduce using rule 48 (exp_condition_5 -> exp_condition_5 SLE exp_condition_6 .)
    SEQ             shift and go to state 91
    SNE             shift and go to state 92

  ! SEQ             [ reduce using rule 48 (exp_condition_5 -> exp_condition_5 SLE exp_condition_6 .) ]
  ! SNE             [ reduce using rule 48 (exp_condition_5 -> exp_condition_5 SLE exp_condition_6 .) ]


state 129

    (50) exp_condition_6 -> exp_condition_6 SEQ exp_condition_7 .
    (53) exp_condition_7 -> exp_condition_7 . CMP exp_condition_8

  ! shift/reduce conflict for CMP resolved as shift
    SEQ             reduce using rule 50 (exp_condition_6 -> exp_condition_6 SEQ exp_condition_7 .)
    SNE             reduce using rule 50 (exp_condition_6 -> exp_condition_6 SEQ exp_condition_7 .)
    SGE             reduce using rule 50 (exp_condition_6 -> exp_condition_6 SEQ exp_condition_7 .)
    SLE             reduce using rule 50 (exp_condition_6 -> exp_condition_6 SEQ exp_condition_7 .)
    SGT             reduce using rule 50 (exp_condition_6 -> exp_condition_6 SEQ exp_condition_7 .)
    SLT             reduce using rule 50 (exp_condition_6 -> exp_condition_6 SEQ exp_condition_7 .)
    EQ              reduce using rule 50 (exp_condition_6 -> exp_condition_6 SEQ exp_condition_7 .)
    NE              reduce using rule 50 (exp_condition_6 -> exp_condition_6 SEQ exp_condition_7 .)
    GE              reduce using rule 50 (exp_condition_6 -> exp_condition_6 SEQ exp_condition_7 .)
    LE              reduce using rule 50 (exp_condition_6 -> exp_condition_6 SEQ exp_condition_7 .)
    GT              reduce using rule 50 (exp_condition_6 -> exp_condition_6 SEQ exp_condition_7 .)
    LT              reduce using rule 50 (exp_condition_6 -> exp_condition_6 SEQ exp_condition_7 .)
    XOR             reduce using rule 50 (exp_condition_6 -> exp_condition_6 SEQ exp_condition_7 .)
    TIMES           reduce using rule 50 (exp_condition_6 -> exp_condition_6 SEQ exp_condition_7 .)
    DIVIDE          reduce using rule 50 (exp_condition_6 -> exp_condition_6 SEQ exp_condition_7 .)
    MODULO          reduce using rule 50 (exp_condition_6 -> exp_condition_6 SEQ exp_condition_7 .)
    PLUS            reduce using rule 50 (exp_condition_6 -> exp_condition_6 SEQ exp_condition_7 .)
    MINUS           reduce using rule 50 (exp_condition_6 -> exp_condition_6 SEQ exp_condition_7 .)
    SEMICOLON       reduce using rule 50 (exp_condition_6 -> exp_condition_6 SEQ exp_condition_7 .)
    RPAREN          reduce using rule 50 (exp_condition_6 -> exp_condition_6 SEQ exp_condition_7 .)
    RETURN          reduce using rule 50 (exp_condition_6 -> exp_condition_6 SEQ exp_condition_7 .)
    BREAK           reduce using rule 50 (exp_condition_6 -> exp_condition_6 SEQ exp_condition_7 .)
    CONTINUE        reduce using rule 50 (exp_condition_6 -> exp_condition_6 SEQ exp_condition_7 .)
    IF              reduce using rule 50 (exp_condition_6 -> exp_condition_6 SEQ exp_condition_7 .)
    ID_SC           reduce using rule 50 (exp_condition_6 -> exp_condition_6 SEQ exp_condition_7 .)
    ID_LI           reduce using rule 50 (exp_condition_6 -> exp_condition_6 SEQ exp_condition_7 .)
    INCREMENT       reduce using rule 50 (exp_condition_6 -> exp_condition_6 SEQ exp_condition_7 .)
    DECREMENT       reduce using rule 50 (exp_condition_6 -> exp_condition_6 SEQ exp_condition_7 .)
    ID              reduce using rule 50 (exp_condition_6 -> exp_condition_6 SEQ exp_condition_7 .)
    FOR             reduce using rule 50 (exp_condition_6 -> exp_condition_6 SEQ exp_condition_7 .)
    DO              reduce using rule 50 (exp_condition_6 -> exp_condition_6 SEQ exp_condition_7 .)
    WHILE           reduce using rule 50 (exp_condition_6 -> exp_condition_6 SEQ exp_condition_7 .)
    SUB             reduce using rule 50 (exp_condition_6 -> exp_condition_6 SEQ exp_condition_7 .)
    $end            reduce using rule 50 (exp_condition_6 -> exp_condition_6 SEQ exp_condition_7 .)
    RBRACE          reduce using rule 50 (exp_condition_6 -> exp_condition_6 SEQ exp_condition_7 .)
    COMMA           reduce using rule 50 (exp_condition_6 -> exp_condition_6 SEQ exp_condition_7 .)
    CMP             shift and go to state 93

  ! CMP             [ reduce using rule 50 (exp_condition_6 -> exp_condition_6 SEQ exp_condition_7 .) ]


state 130

    (51) exp_condition_6 -> exp_condition_6 SNE exp_condition_7 .
    (53) exp_condition_7 -> exp_condition_7 . CMP exp_condition_8

  ! shift/reduce conflict for CMP resolved as shift
    SEQ             reduce using rule 51 (exp_condition_6 -> exp_condition_6 SNE exp_condition_7 .)
    SNE             reduce using rule 51 (exp_condition_6 -> exp_condition_6 SNE exp_condition_7 .)
    SGE             reduce using rule 51 (exp_condition_6 -> exp_condition_6 SNE exp_condition_7 .)
    SLE             reduce using rule 51 (exp_condition_6 -> exp_condition_6 SNE exp_condition_7 .)
    SGT             reduce using rule 51 (exp_condition_6 -> exp_condition_6 SNE exp_condition_7 .)
    SLT             reduce using rule 51 (exp_condition_6 -> exp_condition_6 SNE exp_condition_7 .)
    EQ              reduce using rule 51 (exp_condition_6 -> exp_condition_6 SNE exp_condition_7 .)
    NE              reduce using rule 51 (exp_condition_6 -> exp_condition_6 SNE exp_condition_7 .)
    GE              reduce using rule 51 (exp_condition_6 -> exp_condition_6 SNE exp_condition_7 .)
    LE              reduce using rule 51 (exp_condition_6 -> exp_condition_6 SNE exp_condition_7 .)
    GT              reduce using rule 51 (exp_condition_6 -> exp_condition_6 SNE exp_condition_7 .)
    LT              reduce using rule 51 (exp_condition_6 -> exp_condition_6 SNE exp_condition_7 .)
    XOR             reduce using rule 51 (exp_condition_6 -> exp_condition_6 SNE exp_condition_7 .)
    TIMES           reduce using rule 51 (exp_condition_6 -> exp_condition_6 SNE exp_condition_7 .)
    DIVIDE          reduce using rule 51 (exp_condition_6 -> exp_condition_6 SNE exp_condition_7 .)
    MODULO          reduce using rule 51 (exp_condition_6 -> exp_condition_6 SNE exp_condition_7 .)
    PLUS            reduce using rule 51 (exp_condition_6 -> exp_condition_6 SNE exp_condition_7 .)
    MINUS           reduce using rule 51 (exp_condition_6 -> exp_condition_6 SNE exp_condition_7 .)
    SEMICOLON       reduce using rule 51 (exp_condition_6 -> exp_condition_6 SNE exp_condition_7 .)
    RPAREN          reduce using rule 51 (exp_condition_6 -> exp_condition_6 SNE exp_condition_7 .)
    RETURN          reduce using rule 51 (exp_condition_6 -> exp_condition_6 SNE exp_condition_7 .)
    BREAK           reduce using rule 51 (exp_condition_6 -> exp_condition_6 SNE exp_condition_7 .)
    CONTINUE        reduce using rule 51 (exp_condition_6 -> exp_condition_6 SNE exp_condition_7 .)
    IF              reduce using rule 51 (exp_condition_6 -> exp_condition_6 SNE exp_condition_7 .)
    ID_SC           reduce using rule 51 (exp_condition_6 -> exp_condition_6 SNE exp_condition_7 .)
    ID_LI           reduce using rule 51 (exp_condition_6 -> exp_condition_6 SNE exp_condition_7 .)
    INCREMENT       reduce using rule 51 (exp_condition_6 -> exp_condition_6 SNE exp_condition_7 .)
    DECREMENT       reduce using rule 51 (exp_condition_6 -> exp_condition_6 SNE exp_condition_7 .)
    ID              reduce using rule 51 (exp_condition_6 -> exp_condition_6 SNE exp_condition_7 .)
    FOR             reduce using rule 51 (exp_condition_6 -> exp_condition_6 SNE exp_condition_7 .)
    DO              reduce using rule 51 (exp_condition_6 -> exp_condition_6 SNE exp_condition_7 .)
    WHILE           reduce using rule 51 (exp_condition_6 -> exp_condition_6 SNE exp_condition_7 .)
    SUB             reduce using rule 51 (exp_condition_6 -> exp_condition_6 SNE exp_condition_7 .)
    $end            reduce using rule 51 (exp_condition_6 -> exp_condition_6 SNE exp_condition_7 .)
    RBRACE          reduce using rule 51 (exp_condition_6 -> exp_condition_6 SNE exp_condition_7 .)
    COMMA           reduce using rule 51 (exp_condition_6 -> exp_condition_6 SNE exp_condition_7 .)
    CMP             shift and go to state 93

  ! CMP             [ reduce using rule 51 (exp_condition_6 -> exp_condition_6 SNE exp_condition_7 .) ]


state 131

    (53) exp_condition_7 -> exp_condition_7 CMP exp_condition_8 .

    CMP             reduce using rule 53 (exp_condition_7 -> exp_condition_7 CMP exp_condition_8 .)
    SEQ             reduce using rule 53 (exp_condition_7 -> exp_condition_7 CMP exp_condition_8 .)
    SNE             reduce using rule 53 (exp_condition_7 -> exp_condition_7 CMP exp_condition_8 .)
    SGE             reduce using rule 53 (exp_condition_7 -> exp_condition_7 CMP exp_condition_8 .)
    SLE             reduce using rule 53 (exp_condition_7 -> exp_condition_7 CMP exp_condition_8 .)
    SGT             reduce using rule 53 (exp_condition_7 -> exp_condition_7 CMP exp_condition_8 .)
    SLT             reduce using rule 53 (exp_condition_7 -> exp_condition_7 CMP exp_condition_8 .)
    EQ              reduce using rule 53 (exp_condition_7 -> exp_condition_7 CMP exp_condition_8 .)
    NE              reduce using rule 53 (exp_condition_7 -> exp_condition_7 CMP exp_condition_8 .)
    GE              reduce using rule 53 (exp_condition_7 -> exp_condition_7 CMP exp_condition_8 .)
    LE              reduce using rule 53 (exp_condition_7 -> exp_condition_7 CMP exp_condition_8 .)
    GT              reduce using rule 53 (exp_condition_7 -> exp_condition_7 CMP exp_condition_8 .)
    LT              reduce using rule 53 (exp_condition_7 -> exp_condition_7 CMP exp_condition_8 .)
    XOR             reduce using rule 53 (exp_condition_7 -> exp_condition_7 CMP exp_condition_8 .)
    TIMES           reduce using rule 53 (exp_condition_7 -> exp_condition_7 CMP exp_condition_8 .)
    DIVIDE          reduce using rule 53 (exp_condition_7 -> exp_condition_7 CMP exp_condition_8 .)
    MODULO          reduce using rule 53 (exp_condition_7 -> exp_condition_7 CMP exp_condition_8 .)
    PLUS            reduce using rule 53 (exp_condition_7 -> exp_condition_7 CMP exp_condition_8 .)
    MINUS           reduce using rule 53 (exp_condition_7 -> exp_condition_7 CMP exp_condition_8 .)
    SEMICOLON       reduce using rule 53 (exp_condition_7 -> exp_condition_7 CMP exp_condition_8 .)
    RPAREN          reduce using rule 53 (exp_condition_7 -> exp_condition_7 CMP exp_condition_8 .)
    RETURN          reduce using rule 53 (exp_condition_7 -> exp_condition_7 CMP exp_condition_8 .)
    BREAK           reduce using rule 53 (exp_condition_7 -> exp_condition_7 CMP exp_condition_8 .)
    CONTINUE        reduce using rule 53 (exp_condition_7 -> exp_condition_7 CMP exp_condition_8 .)
    IF              reduce using rule 53 (exp_condition_7 -> exp_condition_7 CMP exp_condition_8 .)
    ID_SC           reduce using rule 53 (exp_condition_7 -> exp_condition_7 CMP exp_condition_8 .)
    ID_LI           reduce using rule 53 (exp_condition_7 -> exp_condition_7 CMP exp_condition_8 .)
    INCREMENT       reduce using rule 53 (exp_condition_7 -> exp_condition_7 CMP exp_condition_8 .)
    DECREMENT       reduce using rule 53 (exp_condition_7 -> exp_condition_7 CMP exp_condition_8 .)
    ID              reduce using rule 53 (exp_condition_7 -> exp_condition_7 CMP exp_condition_8 .)
    FOR             reduce using rule 53 (exp_condition_7 -> exp_condition_7 CMP exp_condition_8 .)
    DO              reduce using rule 53 (exp_condition_7 -> exp_condition_7 CMP exp_condition_8 .)
    WHILE           reduce using rule 53 (exp_condition_7 -> exp_condition_7 CMP exp_condition_8 .)
    SUB             reduce using rule 53 (exp_condition_7 -> exp_condition_7 CMP exp_condition_8 .)
    $end            reduce using rule 53 (exp_condition_7 -> exp_condition_7 CMP exp_condition_8 .)
    RBRACE          reduce using rule 53 (exp_condition_7 -> exp_condition_7 CMP exp_condition_8 .)
    COMMA           reduce using rule 53 (exp_condition_7 -> exp_condition_7 CMP exp_condition_8 .)


state 132

    (56) exp_condition_8 -> LPAREN exp_condition . RPAREN logic exp_condition_logic
    (35) exp_condition -> exp_condition . GT exp_condition_2
    (36) exp_condition -> exp_condition . LT exp_condition_2

    RPAREN          shift and go to state 118
    GT              shift and go to state 81
    LT              shift and go to state 82


state 133

    (14) if -> IF LPAREN exp_condition RPAREN . if_statement
    (15) if_statement -> . LBRACE blockcode RBRACE
    (16) if_statement -> . LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE
    (17) if_statement -> . LBRACE blockcode RBRACE elsif

    LBRACE          shift and go to state 146

    if_statement                   shift and go to state 145

state 134

    (25) for -> FOR LPAREN for_assignments SEMICOLON . exp_condition SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (35) exp_condition -> . exp_condition GT exp_condition_2
    (36) exp_condition -> . exp_condition LT exp_condition_2
    (37) exp_condition -> . exp_condition_2
    (38) exp_condition_2 -> . exp_condition_2 GE exp_condition_3
    (39) exp_condition_2 -> . exp_condition_2 LE exp_condition_3
    (40) exp_condition_2 -> . exp_condition_3
    (41) exp_condition_3 -> . exp_condition_3 EQ exp_condition_4
    (42) exp_condition_3 -> . exp_condition_3 NE exp_condition_4
    (43) exp_condition_3 -> . exp_condition_4
    (44) exp_condition_4 -> . exp_condition_4 SGT exp_condition_5
    (45) exp_condition_4 -> . exp_condition_4 SLT exp_condition_5
    (46) exp_condition_4 -> . exp_condition_5
    (47) exp_condition_5 -> . exp_condition_5 SGE exp_condition_6
    (48) exp_condition_5 -> . exp_condition_5 SLE exp_condition_6
    (49) exp_condition_5 -> . exp_condition_6
    (50) exp_condition_6 -> . exp_condition_6 SEQ exp_condition_7
    (51) exp_condition_6 -> . exp_condition_6 SNE exp_condition_7
    (52) exp_condition_6 -> . exp_condition_7
    (53) exp_condition_7 -> . exp_condition_7 CMP exp_condition_8
    (54) exp_condition_7 -> . exp_condition_8
    (55) exp_condition_8 -> . attcond
    (56) exp_condition_8 -> . LPAREN exp_condition RPAREN logic exp_condition_logic
    (88) attcond -> . exp_assignment
    (89) attcond -> . NUMBER
    (90) attcond -> . TRUE
    (91) attcond -> . FALSE
    (62) exp_assignment -> . ID_SC EQUALS arithmetic
    (63) exp_assignment -> . ID_LI EQUALS arithmetic
    (64) exp_assignment -> . ID_SC
    (65) exp_assignment -> . ID_LI
    (66) exp_assignment -> . INCREMENT ID_SC
    (67) exp_assignment -> . DECREMENT ID_SC
    (68) exp_assignment -> . ID_SC INCREMENT
    (69) exp_assignment -> . ID_SC DECREMENT

    LPAREN          shift and go to state 94
    NUMBER          shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 21

    exp_condition                  shift and go to state 147
    exp_condition_2                shift and go to state 44
    exp_condition_3                shift and go to state 45
    exp_condition_4                shift and go to state 46
    exp_condition_5                shift and go to state 47
    exp_condition_6                shift and go to state 48
    exp_condition_7                shift and go to state 49
    exp_condition_8                shift and go to state 50
    attcond                        shift and go to state 80
    exp_assignment                 shift and go to state 96

state 135

    (27) for_assignments -> exp_assignment COMMA . for_assignments
    (26) for_assignments -> . exp_assignment
    (27) for_assignments -> . exp_assignment COMMA for_assignments
    (62) exp_assignment -> . ID_SC EQUALS arithmetic
    (63) exp_assignment -> . ID_LI EQUALS arithmetic
    (64) exp_assignment -> . ID_SC
    (65) exp_assignment -> . ID_LI
    (66) exp_assignment -> . INCREMENT ID_SC
    (67) exp_assignment -> . DECREMENT ID_SC
    (68) exp_assignment -> . ID_SC INCREMENT
    (69) exp_assignment -> . ID_SC DECREMENT

    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 21

    exp_assignment                 shift and go to state 103
    for_assignments                shift and go to state 148

state 136

    (28) dowhile -> DO LBRACE blockcode RBRACE . WHILE LPAREN exp_condition RPAREN

    WHILE           shift and go to state 149


state 137

    (29) while -> WHILE LPAREN exp_condition RPAREN . LBRACE blockcode RBRACE
    (30) while -> WHILE LPAREN exp_condition RPAREN . LBRACE RBRACE

    LBRACE          shift and go to state 150


state 138

    (31) function -> SUB ID LPAREN RPAREN LBRACE . blockcode RBRACE
    (5) blockcode -> . command
    (6) blockcode -> . command blockcode
    (7) command -> . interations
    (8) command -> . if
    (9) command -> . exp_assignment
    (10) command -> . call
    (11) command -> . RETURN return SEMICOLON
    (12) command -> . BREAK SEMICOLON
    (13) command -> . CONTINUE SEMICOLON
    (22) interations -> . for
    (23) interations -> . dowhile
    (24) interations -> . while
    (14) if -> . IF LPAREN exp_condition RPAREN if_statement
    (62) exp_assignment -> . ID_SC EQUALS arithmetic
    (63) exp_assignment -> . ID_LI EQUALS arithmetic
    (64) exp_assignment -> . ID_SC
    (65) exp_assignment -> . ID_LI
    (66) exp_assignment -> . INCREMENT ID_SC
    (67) exp_assignment -> . DECREMENT ID_SC
    (68) exp_assignment -> . ID_SC INCREMENT
    (69) exp_assignment -> . ID_SC DECREMENT
    (92) call -> . ID LPAREN RPAREN
    (93) call -> . ID LPAREN function_assignments RPAREN
    (25) for -> . FOR LPAREN for_assignments SEMICOLON exp_condition SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (28) dowhile -> . DO LBRACE blockcode RBRACE WHILE LPAREN exp_condition RPAREN
    (29) while -> . WHILE LPAREN exp_condition RPAREN LBRACE blockcode RBRACE
    (30) while -> . WHILE LPAREN exp_condition RPAREN LBRACE RBRACE

    RETURN          shift and go to state 11
    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    IF              shift and go to state 17
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 21
    ID              shift and go to state 6
    FOR             shift and go to state 22
    DO              shift and go to state 23
    WHILE           shift and go to state 24

    blockcode                      shift and go to state 151
    command                        shift and go to state 4
    interations                    shift and go to state 7
    if                             shift and go to state 8
    exp_assignment                 shift and go to state 9
    call                           shift and go to state 10
    for                            shift and go to state 14
    dowhile                        shift and go to state 15
    while                          shift and go to state 16

state 139

    (32) function -> SUB ID LPAREN function_assignments RPAREN . LBRACE blockcode RBRACE

    LBRACE          shift and go to state 152


state 140

    (34) function_assignments -> exp_assignment COMMA function_assignments .

    RPAREN          reduce using rule 34 (function_assignments -> exp_assignment COMMA function_assignments .)


state 141

    (56) exp_condition_8 -> LPAREN exp_condition RPAREN logic . exp_condition_logic
    (57) exp_condition_logic -> . LPAREN exp_condition RPAREN
    (58) exp_condition_logic -> . LPAREN exp_condition RPAREN logic LPAREN exp_condition RPAREN

    LPAREN          shift and go to state 153

    exp_condition_logic            shift and go to state 154

state 142

    (59) logic -> LAND .

    LPAREN          reduce using rule 59 (logic -> LAND .)


state 143

    (60) logic -> LOR .

    LPAREN          reduce using rule 60 (logic -> LOR .)


state 144

    (61) logic -> LNOT .

    LPAREN          reduce using rule 61 (logic -> LNOT .)


state 145

    (14) if -> IF LPAREN exp_condition RPAREN if_statement .

    RETURN          reduce using rule 14 (if -> IF LPAREN exp_condition RPAREN if_statement .)
    BREAK           reduce using rule 14 (if -> IF LPAREN exp_condition RPAREN if_statement .)
    CONTINUE        reduce using rule 14 (if -> IF LPAREN exp_condition RPAREN if_statement .)
    IF              reduce using rule 14 (if -> IF LPAREN exp_condition RPAREN if_statement .)
    ID_SC           reduce using rule 14 (if -> IF LPAREN exp_condition RPAREN if_statement .)
    ID_LI           reduce using rule 14 (if -> IF LPAREN exp_condition RPAREN if_statement .)
    INCREMENT       reduce using rule 14 (if -> IF LPAREN exp_condition RPAREN if_statement .)
    DECREMENT       reduce using rule 14 (if -> IF LPAREN exp_condition RPAREN if_statement .)
    ID              reduce using rule 14 (if -> IF LPAREN exp_condition RPAREN if_statement .)
    FOR             reduce using rule 14 (if -> IF LPAREN exp_condition RPAREN if_statement .)
    DO              reduce using rule 14 (if -> IF LPAREN exp_condition RPAREN if_statement .)
    WHILE           reduce using rule 14 (if -> IF LPAREN exp_condition RPAREN if_statement .)
    SUB             reduce using rule 14 (if -> IF LPAREN exp_condition RPAREN if_statement .)
    $end            reduce using rule 14 (if -> IF LPAREN exp_condition RPAREN if_statement .)
    RBRACE          reduce using rule 14 (if -> IF LPAREN exp_condition RPAREN if_statement .)


state 146

    (15) if_statement -> LBRACE . blockcode RBRACE
    (16) if_statement -> LBRACE . blockcode RBRACE ELSE LBRACE blockcode RBRACE
    (17) if_statement -> LBRACE . blockcode RBRACE elsif
    (5) blockcode -> . command
    (6) blockcode -> . command blockcode
    (7) command -> . interations
    (8) command -> . if
    (9) command -> . exp_assignment
    (10) command -> . call
    (11) command -> . RETURN return SEMICOLON
    (12) command -> . BREAK SEMICOLON
    (13) command -> . CONTINUE SEMICOLON
    (22) interations -> . for
    (23) interations -> . dowhile
    (24) interations -> . while
    (14) if -> . IF LPAREN exp_condition RPAREN if_statement
    (62) exp_assignment -> . ID_SC EQUALS arithmetic
    (63) exp_assignment -> . ID_LI EQUALS arithmetic
    (64) exp_assignment -> . ID_SC
    (65) exp_assignment -> . ID_LI
    (66) exp_assignment -> . INCREMENT ID_SC
    (67) exp_assignment -> . DECREMENT ID_SC
    (68) exp_assignment -> . ID_SC INCREMENT
    (69) exp_assignment -> . ID_SC DECREMENT
    (92) call -> . ID LPAREN RPAREN
    (93) call -> . ID LPAREN function_assignments RPAREN
    (25) for -> . FOR LPAREN for_assignments SEMICOLON exp_condition SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (28) dowhile -> . DO LBRACE blockcode RBRACE WHILE LPAREN exp_condition RPAREN
    (29) while -> . WHILE LPAREN exp_condition RPAREN LBRACE blockcode RBRACE
    (30) while -> . WHILE LPAREN exp_condition RPAREN LBRACE RBRACE

    RETURN          shift and go to state 11
    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    IF              shift and go to state 17
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 21
    ID              shift and go to state 6
    FOR             shift and go to state 22
    DO              shift and go to state 23
    WHILE           shift and go to state 24

    blockcode                      shift and go to state 155
    command                        shift and go to state 4
    interations                    shift and go to state 7
    if                             shift and go to state 8
    exp_assignment                 shift and go to state 9
    call                           shift and go to state 10
    for                            shift and go to state 14
    dowhile                        shift and go to state 15
    while                          shift and go to state 16

state 147

    (25) for -> FOR LPAREN for_assignments SEMICOLON exp_condition . SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (35) exp_condition -> exp_condition . GT exp_condition_2
    (36) exp_condition -> exp_condition . LT exp_condition_2

    SEMICOLON       shift and go to state 156
    GT              shift and go to state 81
    LT              shift and go to state 82


state 148

    (27) for_assignments -> exp_assignment COMMA for_assignments .

    SEMICOLON       reduce using rule 27 (for_assignments -> exp_assignment COMMA for_assignments .)
    RPAREN          reduce using rule 27 (for_assignments -> exp_assignment COMMA for_assignments .)


state 149

    (28) dowhile -> DO LBRACE blockcode RBRACE WHILE . LPAREN exp_condition RPAREN

    LPAREN          shift and go to state 157


state 150

    (29) while -> WHILE LPAREN exp_condition RPAREN LBRACE . blockcode RBRACE
    (30) while -> WHILE LPAREN exp_condition RPAREN LBRACE . RBRACE
    (5) blockcode -> . command
    (6) blockcode -> . command blockcode
    (7) command -> . interations
    (8) command -> . if
    (9) command -> . exp_assignment
    (10) command -> . call
    (11) command -> . RETURN return SEMICOLON
    (12) command -> . BREAK SEMICOLON
    (13) command -> . CONTINUE SEMICOLON
    (22) interations -> . for
    (23) interations -> . dowhile
    (24) interations -> . while
    (14) if -> . IF LPAREN exp_condition RPAREN if_statement
    (62) exp_assignment -> . ID_SC EQUALS arithmetic
    (63) exp_assignment -> . ID_LI EQUALS arithmetic
    (64) exp_assignment -> . ID_SC
    (65) exp_assignment -> . ID_LI
    (66) exp_assignment -> . INCREMENT ID_SC
    (67) exp_assignment -> . DECREMENT ID_SC
    (68) exp_assignment -> . ID_SC INCREMENT
    (69) exp_assignment -> . ID_SC DECREMENT
    (92) call -> . ID LPAREN RPAREN
    (93) call -> . ID LPAREN function_assignments RPAREN
    (25) for -> . FOR LPAREN for_assignments SEMICOLON exp_condition SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (28) dowhile -> . DO LBRACE blockcode RBRACE WHILE LPAREN exp_condition RPAREN
    (29) while -> . WHILE LPAREN exp_condition RPAREN LBRACE blockcode RBRACE
    (30) while -> . WHILE LPAREN exp_condition RPAREN LBRACE RBRACE

    RBRACE          shift and go to state 159
    RETURN          shift and go to state 11
    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    IF              shift and go to state 17
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 21
    ID              shift and go to state 6
    FOR             shift and go to state 22
    DO              shift and go to state 23
    WHILE           shift and go to state 24

    blockcode                      shift and go to state 158
    command                        shift and go to state 4
    interations                    shift and go to state 7
    if                             shift and go to state 8
    exp_assignment                 shift and go to state 9
    call                           shift and go to state 10
    for                            shift and go to state 14
    dowhile                        shift and go to state 15
    while                          shift and go to state 16

state 151

    (31) function -> SUB ID LPAREN RPAREN LBRACE blockcode . RBRACE

    RBRACE          shift and go to state 160


state 152

    (32) function -> SUB ID LPAREN function_assignments RPAREN LBRACE . blockcode RBRACE
    (5) blockcode -> . command
    (6) blockcode -> . command blockcode
    (7) command -> . interations
    (8) command -> . if
    (9) command -> . exp_assignment
    (10) command -> . call
    (11) command -> . RETURN return SEMICOLON
    (12) command -> . BREAK SEMICOLON
    (13) command -> . CONTINUE SEMICOLON
    (22) interations -> . for
    (23) interations -> . dowhile
    (24) interations -> . while
    (14) if -> . IF LPAREN exp_condition RPAREN if_statement
    (62) exp_assignment -> . ID_SC EQUALS arithmetic
    (63) exp_assignment -> . ID_LI EQUALS arithmetic
    (64) exp_assignment -> . ID_SC
    (65) exp_assignment -> . ID_LI
    (66) exp_assignment -> . INCREMENT ID_SC
    (67) exp_assignment -> . DECREMENT ID_SC
    (68) exp_assignment -> . ID_SC INCREMENT
    (69) exp_assignment -> . ID_SC DECREMENT
    (92) call -> . ID LPAREN RPAREN
    (93) call -> . ID LPAREN function_assignments RPAREN
    (25) for -> . FOR LPAREN for_assignments SEMICOLON exp_condition SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (28) dowhile -> . DO LBRACE blockcode RBRACE WHILE LPAREN exp_condition RPAREN
    (29) while -> . WHILE LPAREN exp_condition RPAREN LBRACE blockcode RBRACE
    (30) while -> . WHILE LPAREN exp_condition RPAREN LBRACE RBRACE

    RETURN          shift and go to state 11
    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    IF              shift and go to state 17
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 21
    ID              shift and go to state 6
    FOR             shift and go to state 22
    DO              shift and go to state 23
    WHILE           shift and go to state 24

    blockcode                      shift and go to state 161
    command                        shift and go to state 4
    interations                    shift and go to state 7
    if                             shift and go to state 8
    exp_assignment                 shift and go to state 9
    call                           shift and go to state 10
    for                            shift and go to state 14
    dowhile                        shift and go to state 15
    while                          shift and go to state 16

state 153

    (57) exp_condition_logic -> LPAREN . exp_condition RPAREN
    (58) exp_condition_logic -> LPAREN . exp_condition RPAREN logic LPAREN exp_condition RPAREN
    (35) exp_condition -> . exp_condition GT exp_condition_2
    (36) exp_condition -> . exp_condition LT exp_condition_2
    (37) exp_condition -> . exp_condition_2
    (38) exp_condition_2 -> . exp_condition_2 GE exp_condition_3
    (39) exp_condition_2 -> . exp_condition_2 LE exp_condition_3
    (40) exp_condition_2 -> . exp_condition_3
    (41) exp_condition_3 -> . exp_condition_3 EQ exp_condition_4
    (42) exp_condition_3 -> . exp_condition_3 NE exp_condition_4
    (43) exp_condition_3 -> . exp_condition_4
    (44) exp_condition_4 -> . exp_condition_4 SGT exp_condition_5
    (45) exp_condition_4 -> . exp_condition_4 SLT exp_condition_5
    (46) exp_condition_4 -> . exp_condition_5
    (47) exp_condition_5 -> . exp_condition_5 SGE exp_condition_6
    (48) exp_condition_5 -> . exp_condition_5 SLE exp_condition_6
    (49) exp_condition_5 -> . exp_condition_6
    (50) exp_condition_6 -> . exp_condition_6 SEQ exp_condition_7
    (51) exp_condition_6 -> . exp_condition_6 SNE exp_condition_7
    (52) exp_condition_6 -> . exp_condition_7
    (53) exp_condition_7 -> . exp_condition_7 CMP exp_condition_8
    (54) exp_condition_7 -> . exp_condition_8
    (55) exp_condition_8 -> . attcond
    (56) exp_condition_8 -> . LPAREN exp_condition RPAREN logic exp_condition_logic
    (88) attcond -> . exp_assignment
    (89) attcond -> . NUMBER
    (90) attcond -> . TRUE
    (91) attcond -> . FALSE
    (62) exp_assignment -> . ID_SC EQUALS arithmetic
    (63) exp_assignment -> . ID_LI EQUALS arithmetic
    (64) exp_assignment -> . ID_SC
    (65) exp_assignment -> . ID_LI
    (66) exp_assignment -> . INCREMENT ID_SC
    (67) exp_assignment -> . DECREMENT ID_SC
    (68) exp_assignment -> . ID_SC INCREMENT
    (69) exp_assignment -> . ID_SC DECREMENT

    LPAREN          shift and go to state 94
    NUMBER          shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 21

    exp_condition                  shift and go to state 162
    exp_condition_2                shift and go to state 44
    exp_condition_3                shift and go to state 45
    exp_condition_4                shift and go to state 46
    exp_condition_5                shift and go to state 47
    exp_condition_6                shift and go to state 48
    exp_condition_7                shift and go to state 49
    exp_condition_8                shift and go to state 50
    attcond                        shift and go to state 80
    exp_assignment                 shift and go to state 96

state 154

    (56) exp_condition_8 -> LPAREN exp_condition RPAREN logic exp_condition_logic .

    CMP             reduce using rule 56 (exp_condition_8 -> LPAREN exp_condition RPAREN logic exp_condition_logic .)
    SEQ             reduce using rule 56 (exp_condition_8 -> LPAREN exp_condition RPAREN logic exp_condition_logic .)
    SNE             reduce using rule 56 (exp_condition_8 -> LPAREN exp_condition RPAREN logic exp_condition_logic .)
    SGE             reduce using rule 56 (exp_condition_8 -> LPAREN exp_condition RPAREN logic exp_condition_logic .)
    SLE             reduce using rule 56 (exp_condition_8 -> LPAREN exp_condition RPAREN logic exp_condition_logic .)
    SGT             reduce using rule 56 (exp_condition_8 -> LPAREN exp_condition RPAREN logic exp_condition_logic .)
    SLT             reduce using rule 56 (exp_condition_8 -> LPAREN exp_condition RPAREN logic exp_condition_logic .)
    EQ              reduce using rule 56 (exp_condition_8 -> LPAREN exp_condition RPAREN logic exp_condition_logic .)
    NE              reduce using rule 56 (exp_condition_8 -> LPAREN exp_condition RPAREN logic exp_condition_logic .)
    GE              reduce using rule 56 (exp_condition_8 -> LPAREN exp_condition RPAREN logic exp_condition_logic .)
    LE              reduce using rule 56 (exp_condition_8 -> LPAREN exp_condition RPAREN logic exp_condition_logic .)
    GT              reduce using rule 56 (exp_condition_8 -> LPAREN exp_condition RPAREN logic exp_condition_logic .)
    LT              reduce using rule 56 (exp_condition_8 -> LPAREN exp_condition RPAREN logic exp_condition_logic .)
    XOR             reduce using rule 56 (exp_condition_8 -> LPAREN exp_condition RPAREN logic exp_condition_logic .)
    TIMES           reduce using rule 56 (exp_condition_8 -> LPAREN exp_condition RPAREN logic exp_condition_logic .)
    DIVIDE          reduce using rule 56 (exp_condition_8 -> LPAREN exp_condition RPAREN logic exp_condition_logic .)
    MODULO          reduce using rule 56 (exp_condition_8 -> LPAREN exp_condition RPAREN logic exp_condition_logic .)
    PLUS            reduce using rule 56 (exp_condition_8 -> LPAREN exp_condition RPAREN logic exp_condition_logic .)
    MINUS           reduce using rule 56 (exp_condition_8 -> LPAREN exp_condition RPAREN logic exp_condition_logic .)
    SEMICOLON       reduce using rule 56 (exp_condition_8 -> LPAREN exp_condition RPAREN logic exp_condition_logic .)
    RPAREN          reduce using rule 56 (exp_condition_8 -> LPAREN exp_condition RPAREN logic exp_condition_logic .)
    RETURN          reduce using rule 56 (exp_condition_8 -> LPAREN exp_condition RPAREN logic exp_condition_logic .)
    BREAK           reduce using rule 56 (exp_condition_8 -> LPAREN exp_condition RPAREN logic exp_condition_logic .)
    CONTINUE        reduce using rule 56 (exp_condition_8 -> LPAREN exp_condition RPAREN logic exp_condition_logic .)
    IF              reduce using rule 56 (exp_condition_8 -> LPAREN exp_condition RPAREN logic exp_condition_logic .)
    ID_SC           reduce using rule 56 (exp_condition_8 -> LPAREN exp_condition RPAREN logic exp_condition_logic .)
    ID_LI           reduce using rule 56 (exp_condition_8 -> LPAREN exp_condition RPAREN logic exp_condition_logic .)
    INCREMENT       reduce using rule 56 (exp_condition_8 -> LPAREN exp_condition RPAREN logic exp_condition_logic .)
    DECREMENT       reduce using rule 56 (exp_condition_8 -> LPAREN exp_condition RPAREN logic exp_condition_logic .)
    ID              reduce using rule 56 (exp_condition_8 -> LPAREN exp_condition RPAREN logic exp_condition_logic .)
    FOR             reduce using rule 56 (exp_condition_8 -> LPAREN exp_condition RPAREN logic exp_condition_logic .)
    DO              reduce using rule 56 (exp_condition_8 -> LPAREN exp_condition RPAREN logic exp_condition_logic .)
    WHILE           reduce using rule 56 (exp_condition_8 -> LPAREN exp_condition RPAREN logic exp_condition_logic .)
    SUB             reduce using rule 56 (exp_condition_8 -> LPAREN exp_condition RPAREN logic exp_condition_logic .)
    $end            reduce using rule 56 (exp_condition_8 -> LPAREN exp_condition RPAREN logic exp_condition_logic .)
    RBRACE          reduce using rule 56 (exp_condition_8 -> LPAREN exp_condition RPAREN logic exp_condition_logic .)
    COMMA           reduce using rule 56 (exp_condition_8 -> LPAREN exp_condition RPAREN logic exp_condition_logic .)


state 155

    (15) if_statement -> LBRACE blockcode . RBRACE
    (16) if_statement -> LBRACE blockcode . RBRACE ELSE LBRACE blockcode RBRACE
    (17) if_statement -> LBRACE blockcode . RBRACE elsif

    RBRACE          shift and go to state 163


state 156

    (25) for -> FOR LPAREN for_assignments SEMICOLON exp_condition SEMICOLON . for_assignments RPAREN LBRACE blockcode RBRACE
    (26) for_assignments -> . exp_assignment
    (27) for_assignments -> . exp_assignment COMMA for_assignments
    (62) exp_assignment -> . ID_SC EQUALS arithmetic
    (63) exp_assignment -> . ID_LI EQUALS arithmetic
    (64) exp_assignment -> . ID_SC
    (65) exp_assignment -> . ID_LI
    (66) exp_assignment -> . INCREMENT ID_SC
    (67) exp_assignment -> . DECREMENT ID_SC
    (68) exp_assignment -> . ID_SC INCREMENT
    (69) exp_assignment -> . ID_SC DECREMENT

    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 21

    for_assignments                shift and go to state 164
    exp_assignment                 shift and go to state 103

state 157

    (28) dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN . exp_condition RPAREN
    (35) exp_condition -> . exp_condition GT exp_condition_2
    (36) exp_condition -> . exp_condition LT exp_condition_2
    (37) exp_condition -> . exp_condition_2
    (38) exp_condition_2 -> . exp_condition_2 GE exp_condition_3
    (39) exp_condition_2 -> . exp_condition_2 LE exp_condition_3
    (40) exp_condition_2 -> . exp_condition_3
    (41) exp_condition_3 -> . exp_condition_3 EQ exp_condition_4
    (42) exp_condition_3 -> . exp_condition_3 NE exp_condition_4
    (43) exp_condition_3 -> . exp_condition_4
    (44) exp_condition_4 -> . exp_condition_4 SGT exp_condition_5
    (45) exp_condition_4 -> . exp_condition_4 SLT exp_condition_5
    (46) exp_condition_4 -> . exp_condition_5
    (47) exp_condition_5 -> . exp_condition_5 SGE exp_condition_6
    (48) exp_condition_5 -> . exp_condition_5 SLE exp_condition_6
    (49) exp_condition_5 -> . exp_condition_6
    (50) exp_condition_6 -> . exp_condition_6 SEQ exp_condition_7
    (51) exp_condition_6 -> . exp_condition_6 SNE exp_condition_7
    (52) exp_condition_6 -> . exp_condition_7
    (53) exp_condition_7 -> . exp_condition_7 CMP exp_condition_8
    (54) exp_condition_7 -> . exp_condition_8
    (55) exp_condition_8 -> . attcond
    (56) exp_condition_8 -> . LPAREN exp_condition RPAREN logic exp_condition_logic
    (88) attcond -> . exp_assignment
    (89) attcond -> . NUMBER
    (90) attcond -> . TRUE
    (91) attcond -> . FALSE
    (62) exp_assignment -> . ID_SC EQUALS arithmetic
    (63) exp_assignment -> . ID_LI EQUALS arithmetic
    (64) exp_assignment -> . ID_SC
    (65) exp_assignment -> . ID_LI
    (66) exp_assignment -> . INCREMENT ID_SC
    (67) exp_assignment -> . DECREMENT ID_SC
    (68) exp_assignment -> . ID_SC INCREMENT
    (69) exp_assignment -> . ID_SC DECREMENT

    LPAREN          shift and go to state 94
    NUMBER          shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 21

    exp_condition                  shift and go to state 165
    exp_condition_2                shift and go to state 44
    exp_condition_3                shift and go to state 45
    exp_condition_4                shift and go to state 46
    exp_condition_5                shift and go to state 47
    exp_condition_6                shift and go to state 48
    exp_condition_7                shift and go to state 49
    exp_condition_8                shift and go to state 50
    attcond                        shift and go to state 80
    exp_assignment                 shift and go to state 96

state 158

    (29) while -> WHILE LPAREN exp_condition RPAREN LBRACE blockcode . RBRACE

    RBRACE          shift and go to state 166


state 159

    (30) while -> WHILE LPAREN exp_condition RPAREN LBRACE RBRACE .

    RETURN          reduce using rule 30 (while -> WHILE LPAREN exp_condition RPAREN LBRACE RBRACE .)
    BREAK           reduce using rule 30 (while -> WHILE LPAREN exp_condition RPAREN LBRACE RBRACE .)
    CONTINUE        reduce using rule 30 (while -> WHILE LPAREN exp_condition RPAREN LBRACE RBRACE .)
    IF              reduce using rule 30 (while -> WHILE LPAREN exp_condition RPAREN LBRACE RBRACE .)
    ID_SC           reduce using rule 30 (while -> WHILE LPAREN exp_condition RPAREN LBRACE RBRACE .)
    ID_LI           reduce using rule 30 (while -> WHILE LPAREN exp_condition RPAREN LBRACE RBRACE .)
    INCREMENT       reduce using rule 30 (while -> WHILE LPAREN exp_condition RPAREN LBRACE RBRACE .)
    DECREMENT       reduce using rule 30 (while -> WHILE LPAREN exp_condition RPAREN LBRACE RBRACE .)
    ID              reduce using rule 30 (while -> WHILE LPAREN exp_condition RPAREN LBRACE RBRACE .)
    FOR             reduce using rule 30 (while -> WHILE LPAREN exp_condition RPAREN LBRACE RBRACE .)
    DO              reduce using rule 30 (while -> WHILE LPAREN exp_condition RPAREN LBRACE RBRACE .)
    WHILE           reduce using rule 30 (while -> WHILE LPAREN exp_condition RPAREN LBRACE RBRACE .)
    SUB             reduce using rule 30 (while -> WHILE LPAREN exp_condition RPAREN LBRACE RBRACE .)
    $end            reduce using rule 30 (while -> WHILE LPAREN exp_condition RPAREN LBRACE RBRACE .)
    RBRACE          reduce using rule 30 (while -> WHILE LPAREN exp_condition RPAREN LBRACE RBRACE .)


state 160

    (31) function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .

    SUB             reduce using rule 31 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    RETURN          reduce using rule 31 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    BREAK           reduce using rule 31 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    CONTINUE        reduce using rule 31 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    IF              reduce using rule 31 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    ID_SC           reduce using rule 31 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    ID_LI           reduce using rule 31 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    INCREMENT       reduce using rule 31 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    DECREMENT       reduce using rule 31 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    ID              reduce using rule 31 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    FOR             reduce using rule 31 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    DO              reduce using rule 31 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    WHILE           reduce using rule 31 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    $end            reduce using rule 31 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)


state 161

    (32) function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode . RBRACE

    RBRACE          shift and go to state 167


state 162

    (57) exp_condition_logic -> LPAREN exp_condition . RPAREN
    (58) exp_condition_logic -> LPAREN exp_condition . RPAREN logic LPAREN exp_condition RPAREN
    (35) exp_condition -> exp_condition . GT exp_condition_2
    (36) exp_condition -> exp_condition . LT exp_condition_2

    RPAREN          shift and go to state 168
    GT              shift and go to state 81
    LT              shift and go to state 82


state 163

    (15) if_statement -> LBRACE blockcode RBRACE .
    (16) if_statement -> LBRACE blockcode RBRACE . ELSE LBRACE blockcode RBRACE
    (17) if_statement -> LBRACE blockcode RBRACE . elsif
    (18) elsif -> . ELSIF LPAREN exp_condition RPAREN LBRACE blockcode RBRACE
    (19) elsif -> . ELSIF LPAREN exp_condition RPAREN LBRACE blockcode RBRACE elsif2

    RETURN          reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    BREAK           reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    CONTINUE        reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    IF              reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    ID_SC           reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    ID_LI           reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    INCREMENT       reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    DECREMENT       reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    ID              reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    FOR             reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    DO              reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    WHILE           reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    SUB             reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    $end            reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    RBRACE          reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    ELSE            shift and go to state 169
    ELSIF           shift and go to state 171

    elsif                          shift and go to state 170

state 164

    (25) for -> FOR LPAREN for_assignments SEMICOLON exp_condition SEMICOLON for_assignments . RPAREN LBRACE blockcode RBRACE

    RPAREN          shift and go to state 172


state 165

    (28) dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp_condition . RPAREN
    (35) exp_condition -> exp_condition . GT exp_condition_2
    (36) exp_condition -> exp_condition . LT exp_condition_2

    RPAREN          shift and go to state 173
    GT              shift and go to state 81
    LT              shift and go to state 82


state 166

    (29) while -> WHILE LPAREN exp_condition RPAREN LBRACE blockcode RBRACE .

    RETURN          reduce using rule 29 (while -> WHILE LPAREN exp_condition RPAREN LBRACE blockcode RBRACE .)
    BREAK           reduce using rule 29 (while -> WHILE LPAREN exp_condition RPAREN LBRACE blockcode RBRACE .)
    CONTINUE        reduce using rule 29 (while -> WHILE LPAREN exp_condition RPAREN LBRACE blockcode RBRACE .)
    IF              reduce using rule 29 (while -> WHILE LPAREN exp_condition RPAREN LBRACE blockcode RBRACE .)
    ID_SC           reduce using rule 29 (while -> WHILE LPAREN exp_condition RPAREN LBRACE blockcode RBRACE .)
    ID_LI           reduce using rule 29 (while -> WHILE LPAREN exp_condition RPAREN LBRACE blockcode RBRACE .)
    INCREMENT       reduce using rule 29 (while -> WHILE LPAREN exp_condition RPAREN LBRACE blockcode RBRACE .)
    DECREMENT       reduce using rule 29 (while -> WHILE LPAREN exp_condition RPAREN LBRACE blockcode RBRACE .)
    ID              reduce using rule 29 (while -> WHILE LPAREN exp_condition RPAREN LBRACE blockcode RBRACE .)
    FOR             reduce using rule 29 (while -> WHILE LPAREN exp_condition RPAREN LBRACE blockcode RBRACE .)
    DO              reduce using rule 29 (while -> WHILE LPAREN exp_condition RPAREN LBRACE blockcode RBRACE .)
    WHILE           reduce using rule 29 (while -> WHILE LPAREN exp_condition RPAREN LBRACE blockcode RBRACE .)
    SUB             reduce using rule 29 (while -> WHILE LPAREN exp_condition RPAREN LBRACE blockcode RBRACE .)
    $end            reduce using rule 29 (while -> WHILE LPAREN exp_condition RPAREN LBRACE blockcode RBRACE .)
    RBRACE          reduce using rule 29 (while -> WHILE LPAREN exp_condition RPAREN LBRACE blockcode RBRACE .)


state 167

    (32) function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .

    SUB             reduce using rule 32 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    RETURN          reduce using rule 32 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    BREAK           reduce using rule 32 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    CONTINUE        reduce using rule 32 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    IF              reduce using rule 32 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    ID_SC           reduce using rule 32 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    ID_LI           reduce using rule 32 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    INCREMENT       reduce using rule 32 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    DECREMENT       reduce using rule 32 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    ID              reduce using rule 32 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    FOR             reduce using rule 32 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    DO              reduce using rule 32 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    WHILE           reduce using rule 32 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    $end            reduce using rule 32 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)


state 168

    (57) exp_condition_logic -> LPAREN exp_condition RPAREN .
    (58) exp_condition_logic -> LPAREN exp_condition RPAREN . logic LPAREN exp_condition RPAREN
    (59) logic -> . LAND
    (60) logic -> . LOR
    (61) logic -> . LNOT

    CMP             reduce using rule 57 (exp_condition_logic -> LPAREN exp_condition RPAREN .)
    SEQ             reduce using rule 57 (exp_condition_logic -> LPAREN exp_condition RPAREN .)
    SNE             reduce using rule 57 (exp_condition_logic -> LPAREN exp_condition RPAREN .)
    SGE             reduce using rule 57 (exp_condition_logic -> LPAREN exp_condition RPAREN .)
    SLE             reduce using rule 57 (exp_condition_logic -> LPAREN exp_condition RPAREN .)
    SGT             reduce using rule 57 (exp_condition_logic -> LPAREN exp_condition RPAREN .)
    SLT             reduce using rule 57 (exp_condition_logic -> LPAREN exp_condition RPAREN .)
    EQ              reduce using rule 57 (exp_condition_logic -> LPAREN exp_condition RPAREN .)
    NE              reduce using rule 57 (exp_condition_logic -> LPAREN exp_condition RPAREN .)
    GE              reduce using rule 57 (exp_condition_logic -> LPAREN exp_condition RPAREN .)
    LE              reduce using rule 57 (exp_condition_logic -> LPAREN exp_condition RPAREN .)
    GT              reduce using rule 57 (exp_condition_logic -> LPAREN exp_condition RPAREN .)
    LT              reduce using rule 57 (exp_condition_logic -> LPAREN exp_condition RPAREN .)
    XOR             reduce using rule 57 (exp_condition_logic -> LPAREN exp_condition RPAREN .)
    TIMES           reduce using rule 57 (exp_condition_logic -> LPAREN exp_condition RPAREN .)
    DIVIDE          reduce using rule 57 (exp_condition_logic -> LPAREN exp_condition RPAREN .)
    MODULO          reduce using rule 57 (exp_condition_logic -> LPAREN exp_condition RPAREN .)
    PLUS            reduce using rule 57 (exp_condition_logic -> LPAREN exp_condition RPAREN .)
    MINUS           reduce using rule 57 (exp_condition_logic -> LPAREN exp_condition RPAREN .)
    SEMICOLON       reduce using rule 57 (exp_condition_logic -> LPAREN exp_condition RPAREN .)
    RPAREN          reduce using rule 57 (exp_condition_logic -> LPAREN exp_condition RPAREN .)
    RETURN          reduce using rule 57 (exp_condition_logic -> LPAREN exp_condition RPAREN .)
    BREAK           reduce using rule 57 (exp_condition_logic -> LPAREN exp_condition RPAREN .)
    CONTINUE        reduce using rule 57 (exp_condition_logic -> LPAREN exp_condition RPAREN .)
    IF              reduce using rule 57 (exp_condition_logic -> LPAREN exp_condition RPAREN .)
    ID_SC           reduce using rule 57 (exp_condition_logic -> LPAREN exp_condition RPAREN .)
    ID_LI           reduce using rule 57 (exp_condition_logic -> LPAREN exp_condition RPAREN .)
    INCREMENT       reduce using rule 57 (exp_condition_logic -> LPAREN exp_condition RPAREN .)
    DECREMENT       reduce using rule 57 (exp_condition_logic -> LPAREN exp_condition RPAREN .)
    ID              reduce using rule 57 (exp_condition_logic -> LPAREN exp_condition RPAREN .)
    FOR             reduce using rule 57 (exp_condition_logic -> LPAREN exp_condition RPAREN .)
    DO              reduce using rule 57 (exp_condition_logic -> LPAREN exp_condition RPAREN .)
    WHILE           reduce using rule 57 (exp_condition_logic -> LPAREN exp_condition RPAREN .)
    SUB             reduce using rule 57 (exp_condition_logic -> LPAREN exp_condition RPAREN .)
    $end            reduce using rule 57 (exp_condition_logic -> LPAREN exp_condition RPAREN .)
    RBRACE          reduce using rule 57 (exp_condition_logic -> LPAREN exp_condition RPAREN .)
    COMMA           reduce using rule 57 (exp_condition_logic -> LPAREN exp_condition RPAREN .)
    LAND            shift and go to state 142
    LOR             shift and go to state 143
    LNOT            shift and go to state 144

    logic                          shift and go to state 174

state 169

    (16) if_statement -> LBRACE blockcode RBRACE ELSE . LBRACE blockcode RBRACE

    LBRACE          shift and go to state 175


state 170

    (17) if_statement -> LBRACE blockcode RBRACE elsif .

    RETURN          reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)
    BREAK           reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)
    CONTINUE        reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)
    IF              reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)
    ID_SC           reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)
    ID_LI           reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)
    INCREMENT       reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)
    DECREMENT       reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)
    ID              reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)
    FOR             reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)
    DO              reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)
    WHILE           reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)
    SUB             reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)
    $end            reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)
    RBRACE          reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)


state 171

    (18) elsif -> ELSIF . LPAREN exp_condition RPAREN LBRACE blockcode RBRACE
    (19) elsif -> ELSIF . LPAREN exp_condition RPAREN LBRACE blockcode RBRACE elsif2

    LPAREN          shift and go to state 176


state 172

    (25) for -> FOR LPAREN for_assignments SEMICOLON exp_condition SEMICOLON for_assignments RPAREN . LBRACE blockcode RBRACE

    LBRACE          shift and go to state 177


state 173

    (28) dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp_condition RPAREN .

    RETURN          reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp_condition RPAREN .)
    BREAK           reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp_condition RPAREN .)
    CONTINUE        reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp_condition RPAREN .)
    IF              reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp_condition RPAREN .)
    ID_SC           reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp_condition RPAREN .)
    ID_LI           reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp_condition RPAREN .)
    INCREMENT       reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp_condition RPAREN .)
    DECREMENT       reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp_condition RPAREN .)
    ID              reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp_condition RPAREN .)
    FOR             reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp_condition RPAREN .)
    DO              reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp_condition RPAREN .)
    WHILE           reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp_condition RPAREN .)
    SUB             reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp_condition RPAREN .)
    $end            reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp_condition RPAREN .)
    RBRACE          reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp_condition RPAREN .)


state 174

    (58) exp_condition_logic -> LPAREN exp_condition RPAREN logic . LPAREN exp_condition RPAREN

    LPAREN          shift and go to state 178


state 175

    (16) if_statement -> LBRACE blockcode RBRACE ELSE LBRACE . blockcode RBRACE
    (5) blockcode -> . command
    (6) blockcode -> . command blockcode
    (7) command -> . interations
    (8) command -> . if
    (9) command -> . exp_assignment
    (10) command -> . call
    (11) command -> . RETURN return SEMICOLON
    (12) command -> . BREAK SEMICOLON
    (13) command -> . CONTINUE SEMICOLON
    (22) interations -> . for
    (23) interations -> . dowhile
    (24) interations -> . while
    (14) if -> . IF LPAREN exp_condition RPAREN if_statement
    (62) exp_assignment -> . ID_SC EQUALS arithmetic
    (63) exp_assignment -> . ID_LI EQUALS arithmetic
    (64) exp_assignment -> . ID_SC
    (65) exp_assignment -> . ID_LI
    (66) exp_assignment -> . INCREMENT ID_SC
    (67) exp_assignment -> . DECREMENT ID_SC
    (68) exp_assignment -> . ID_SC INCREMENT
    (69) exp_assignment -> . ID_SC DECREMENT
    (92) call -> . ID LPAREN RPAREN
    (93) call -> . ID LPAREN function_assignments RPAREN
    (25) for -> . FOR LPAREN for_assignments SEMICOLON exp_condition SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (28) dowhile -> . DO LBRACE blockcode RBRACE WHILE LPAREN exp_condition RPAREN
    (29) while -> . WHILE LPAREN exp_condition RPAREN LBRACE blockcode RBRACE
    (30) while -> . WHILE LPAREN exp_condition RPAREN LBRACE RBRACE

    RETURN          shift and go to state 11
    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    IF              shift and go to state 17
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 21
    ID              shift and go to state 6
    FOR             shift and go to state 22
    DO              shift and go to state 23
    WHILE           shift and go to state 24

    blockcode                      shift and go to state 179
    command                        shift and go to state 4
    interations                    shift and go to state 7
    if                             shift and go to state 8
    exp_assignment                 shift and go to state 9
    call                           shift and go to state 10
    for                            shift and go to state 14
    dowhile                        shift and go to state 15
    while                          shift and go to state 16

state 176

    (18) elsif -> ELSIF LPAREN . exp_condition RPAREN LBRACE blockcode RBRACE
    (19) elsif -> ELSIF LPAREN . exp_condition RPAREN LBRACE blockcode RBRACE elsif2
    (35) exp_condition -> . exp_condition GT exp_condition_2
    (36) exp_condition -> . exp_condition LT exp_condition_2
    (37) exp_condition -> . exp_condition_2
    (38) exp_condition_2 -> . exp_condition_2 GE exp_condition_3
    (39) exp_condition_2 -> . exp_condition_2 LE exp_condition_3
    (40) exp_condition_2 -> . exp_condition_3
    (41) exp_condition_3 -> . exp_condition_3 EQ exp_condition_4
    (42) exp_condition_3 -> . exp_condition_3 NE exp_condition_4
    (43) exp_condition_3 -> . exp_condition_4
    (44) exp_condition_4 -> . exp_condition_4 SGT exp_condition_5
    (45) exp_condition_4 -> . exp_condition_4 SLT exp_condition_5
    (46) exp_condition_4 -> . exp_condition_5
    (47) exp_condition_5 -> . exp_condition_5 SGE exp_condition_6
    (48) exp_condition_5 -> . exp_condition_5 SLE exp_condition_6
    (49) exp_condition_5 -> . exp_condition_6
    (50) exp_condition_6 -> . exp_condition_6 SEQ exp_condition_7
    (51) exp_condition_6 -> . exp_condition_6 SNE exp_condition_7
    (52) exp_condition_6 -> . exp_condition_7
    (53) exp_condition_7 -> . exp_condition_7 CMP exp_condition_8
    (54) exp_condition_7 -> . exp_condition_8
    (55) exp_condition_8 -> . attcond
    (56) exp_condition_8 -> . LPAREN exp_condition RPAREN logic exp_condition_logic
    (88) attcond -> . exp_assignment
    (89) attcond -> . NUMBER
    (90) attcond -> . TRUE
    (91) attcond -> . FALSE
    (62) exp_assignment -> . ID_SC EQUALS arithmetic
    (63) exp_assignment -> . ID_LI EQUALS arithmetic
    (64) exp_assignment -> . ID_SC
    (65) exp_assignment -> . ID_LI
    (66) exp_assignment -> . INCREMENT ID_SC
    (67) exp_assignment -> . DECREMENT ID_SC
    (68) exp_assignment -> . ID_SC INCREMENT
    (69) exp_assignment -> . ID_SC DECREMENT

    LPAREN          shift and go to state 94
    NUMBER          shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 21

    exp_condition                  shift and go to state 180
    exp_condition_2                shift and go to state 44
    exp_condition_3                shift and go to state 45
    exp_condition_4                shift and go to state 46
    exp_condition_5                shift and go to state 47
    exp_condition_6                shift and go to state 48
    exp_condition_7                shift and go to state 49
    exp_condition_8                shift and go to state 50
    attcond                        shift and go to state 80
    exp_assignment                 shift and go to state 96

state 177

    (25) for -> FOR LPAREN for_assignments SEMICOLON exp_condition SEMICOLON for_assignments RPAREN LBRACE . blockcode RBRACE
    (5) blockcode -> . command
    (6) blockcode -> . command blockcode
    (7) command -> . interations
    (8) command -> . if
    (9) command -> . exp_assignment
    (10) command -> . call
    (11) command -> . RETURN return SEMICOLON
    (12) command -> . BREAK SEMICOLON
    (13) command -> . CONTINUE SEMICOLON
    (22) interations -> . for
    (23) interations -> . dowhile
    (24) interations -> . while
    (14) if -> . IF LPAREN exp_condition RPAREN if_statement
    (62) exp_assignment -> . ID_SC EQUALS arithmetic
    (63) exp_assignment -> . ID_LI EQUALS arithmetic
    (64) exp_assignment -> . ID_SC
    (65) exp_assignment -> . ID_LI
    (66) exp_assignment -> . INCREMENT ID_SC
    (67) exp_assignment -> . DECREMENT ID_SC
    (68) exp_assignment -> . ID_SC INCREMENT
    (69) exp_assignment -> . ID_SC DECREMENT
    (92) call -> . ID LPAREN RPAREN
    (93) call -> . ID LPAREN function_assignments RPAREN
    (25) for -> . FOR LPAREN for_assignments SEMICOLON exp_condition SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (28) dowhile -> . DO LBRACE blockcode RBRACE WHILE LPAREN exp_condition RPAREN
    (29) while -> . WHILE LPAREN exp_condition RPAREN LBRACE blockcode RBRACE
    (30) while -> . WHILE LPAREN exp_condition RPAREN LBRACE RBRACE

    RETURN          shift and go to state 11
    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    IF              shift and go to state 17
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 21
    ID              shift and go to state 6
    FOR             shift and go to state 22
    DO              shift and go to state 23
    WHILE           shift and go to state 24

    blockcode                      shift and go to state 181
    command                        shift and go to state 4
    interations                    shift and go to state 7
    if                             shift and go to state 8
    exp_assignment                 shift and go to state 9
    call                           shift and go to state 10
    for                            shift and go to state 14
    dowhile                        shift and go to state 15
    while                          shift and go to state 16

state 178

    (58) exp_condition_logic -> LPAREN exp_condition RPAREN logic LPAREN . exp_condition RPAREN
    (35) exp_condition -> . exp_condition GT exp_condition_2
    (36) exp_condition -> . exp_condition LT exp_condition_2
    (37) exp_condition -> . exp_condition_2
    (38) exp_condition_2 -> . exp_condition_2 GE exp_condition_3
    (39) exp_condition_2 -> . exp_condition_2 LE exp_condition_3
    (40) exp_condition_2 -> . exp_condition_3
    (41) exp_condition_3 -> . exp_condition_3 EQ exp_condition_4
    (42) exp_condition_3 -> . exp_condition_3 NE exp_condition_4
    (43) exp_condition_3 -> . exp_condition_4
    (44) exp_condition_4 -> . exp_condition_4 SGT exp_condition_5
    (45) exp_condition_4 -> . exp_condition_4 SLT exp_condition_5
    (46) exp_condition_4 -> . exp_condition_5
    (47) exp_condition_5 -> . exp_condition_5 SGE exp_condition_6
    (48) exp_condition_5 -> . exp_condition_5 SLE exp_condition_6
    (49) exp_condition_5 -> . exp_condition_6
    (50) exp_condition_6 -> . exp_condition_6 SEQ exp_condition_7
    (51) exp_condition_6 -> . exp_condition_6 SNE exp_condition_7
    (52) exp_condition_6 -> . exp_condition_7
    (53) exp_condition_7 -> . exp_condition_7 CMP exp_condition_8
    (54) exp_condition_7 -> . exp_condition_8
    (55) exp_condition_8 -> . attcond
    (56) exp_condition_8 -> . LPAREN exp_condition RPAREN logic exp_condition_logic
    (88) attcond -> . exp_assignment
    (89) attcond -> . NUMBER
    (90) attcond -> . TRUE
    (91) attcond -> . FALSE
    (62) exp_assignment -> . ID_SC EQUALS arithmetic
    (63) exp_assignment -> . ID_LI EQUALS arithmetic
    (64) exp_assignment -> . ID_SC
    (65) exp_assignment -> . ID_LI
    (66) exp_assignment -> . INCREMENT ID_SC
    (67) exp_assignment -> . DECREMENT ID_SC
    (68) exp_assignment -> . ID_SC INCREMENT
    (69) exp_assignment -> . ID_SC DECREMENT

    LPAREN          shift and go to state 94
    NUMBER          shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 21

    exp_condition                  shift and go to state 182
    exp_condition_2                shift and go to state 44
    exp_condition_3                shift and go to state 45
    exp_condition_4                shift and go to state 46
    exp_condition_5                shift and go to state 47
    exp_condition_6                shift and go to state 48
    exp_condition_7                shift and go to state 49
    exp_condition_8                shift and go to state 50
    attcond                        shift and go to state 80
    exp_assignment                 shift and go to state 96

state 179

    (16) if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode . RBRACE

    RBRACE          shift and go to state 183


state 180

    (18) elsif -> ELSIF LPAREN exp_condition . RPAREN LBRACE blockcode RBRACE
    (19) elsif -> ELSIF LPAREN exp_condition . RPAREN LBRACE blockcode RBRACE elsif2
    (35) exp_condition -> exp_condition . GT exp_condition_2
    (36) exp_condition -> exp_condition . LT exp_condition_2

    RPAREN          shift and go to state 184
    GT              shift and go to state 81
    LT              shift and go to state 82


state 181

    (25) for -> FOR LPAREN for_assignments SEMICOLON exp_condition SEMICOLON for_assignments RPAREN LBRACE blockcode . RBRACE

    RBRACE          shift and go to state 185


state 182

    (58) exp_condition_logic -> LPAREN exp_condition RPAREN logic LPAREN exp_condition . RPAREN
    (35) exp_condition -> exp_condition . GT exp_condition_2
    (36) exp_condition -> exp_condition . LT exp_condition_2

    RPAREN          shift and go to state 186
    GT              shift and go to state 81
    LT              shift and go to state 82


state 183

    (16) if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .

    RETURN          reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    BREAK           reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    CONTINUE        reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    IF              reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    ID_SC           reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    ID_LI           reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    INCREMENT       reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    DECREMENT       reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    ID              reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    FOR             reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    DO              reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    WHILE           reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    SUB             reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    $end            reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    RBRACE          reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)


state 184

    (18) elsif -> ELSIF LPAREN exp_condition RPAREN . LBRACE blockcode RBRACE
    (19) elsif -> ELSIF LPAREN exp_condition RPAREN . LBRACE blockcode RBRACE elsif2

    LBRACE          shift and go to state 187


state 185

    (25) for -> FOR LPAREN for_assignments SEMICOLON exp_condition SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .

    RETURN          reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp_condition SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    BREAK           reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp_condition SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    CONTINUE        reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp_condition SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    IF              reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp_condition SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    ID_SC           reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp_condition SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    ID_LI           reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp_condition SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    INCREMENT       reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp_condition SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    DECREMENT       reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp_condition SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    ID              reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp_condition SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    FOR             reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp_condition SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    DO              reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp_condition SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    WHILE           reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp_condition SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    SUB             reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp_condition SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    $end            reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp_condition SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    RBRACE          reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp_condition SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)


state 186

    (58) exp_condition_logic -> LPAREN exp_condition RPAREN logic LPAREN exp_condition RPAREN .

    CMP             reduce using rule 58 (exp_condition_logic -> LPAREN exp_condition RPAREN logic LPAREN exp_condition RPAREN .)
    SEQ             reduce using rule 58 (exp_condition_logic -> LPAREN exp_condition RPAREN logic LPAREN exp_condition RPAREN .)
    SNE             reduce using rule 58 (exp_condition_logic -> LPAREN exp_condition RPAREN logic LPAREN exp_condition RPAREN .)
    SGE             reduce using rule 58 (exp_condition_logic -> LPAREN exp_condition RPAREN logic LPAREN exp_condition RPAREN .)
    SLE             reduce using rule 58 (exp_condition_logic -> LPAREN exp_condition RPAREN logic LPAREN exp_condition RPAREN .)
    SGT             reduce using rule 58 (exp_condition_logic -> LPAREN exp_condition RPAREN logic LPAREN exp_condition RPAREN .)
    SLT             reduce using rule 58 (exp_condition_logic -> LPAREN exp_condition RPAREN logic LPAREN exp_condition RPAREN .)
    EQ              reduce using rule 58 (exp_condition_logic -> LPAREN exp_condition RPAREN logic LPAREN exp_condition RPAREN .)
    NE              reduce using rule 58 (exp_condition_logic -> LPAREN exp_condition RPAREN logic LPAREN exp_condition RPAREN .)
    GE              reduce using rule 58 (exp_condition_logic -> LPAREN exp_condition RPAREN logic LPAREN exp_condition RPAREN .)
    LE              reduce using rule 58 (exp_condition_logic -> LPAREN exp_condition RPAREN logic LPAREN exp_condition RPAREN .)
    GT              reduce using rule 58 (exp_condition_logic -> LPAREN exp_condition RPAREN logic LPAREN exp_condition RPAREN .)
    LT              reduce using rule 58 (exp_condition_logic -> LPAREN exp_condition RPAREN logic LPAREN exp_condition RPAREN .)
    XOR             reduce using rule 58 (exp_condition_logic -> LPAREN exp_condition RPAREN logic LPAREN exp_condition RPAREN .)
    TIMES           reduce using rule 58 (exp_condition_logic -> LPAREN exp_condition RPAREN logic LPAREN exp_condition RPAREN .)
    DIVIDE          reduce using rule 58 (exp_condition_logic -> LPAREN exp_condition RPAREN logic LPAREN exp_condition RPAREN .)
    MODULO          reduce using rule 58 (exp_condition_logic -> LPAREN exp_condition RPAREN logic LPAREN exp_condition RPAREN .)
    PLUS            reduce using rule 58 (exp_condition_logic -> LPAREN exp_condition RPAREN logic LPAREN exp_condition RPAREN .)
    MINUS           reduce using rule 58 (exp_condition_logic -> LPAREN exp_condition RPAREN logic LPAREN exp_condition RPAREN .)
    SEMICOLON       reduce using rule 58 (exp_condition_logic -> LPAREN exp_condition RPAREN logic LPAREN exp_condition RPAREN .)
    RPAREN          reduce using rule 58 (exp_condition_logic -> LPAREN exp_condition RPAREN logic LPAREN exp_condition RPAREN .)
    RETURN          reduce using rule 58 (exp_condition_logic -> LPAREN exp_condition RPAREN logic LPAREN exp_condition RPAREN .)
    BREAK           reduce using rule 58 (exp_condition_logic -> LPAREN exp_condition RPAREN logic LPAREN exp_condition RPAREN .)
    CONTINUE        reduce using rule 58 (exp_condition_logic -> LPAREN exp_condition RPAREN logic LPAREN exp_condition RPAREN .)
    IF              reduce using rule 58 (exp_condition_logic -> LPAREN exp_condition RPAREN logic LPAREN exp_condition RPAREN .)
    ID_SC           reduce using rule 58 (exp_condition_logic -> LPAREN exp_condition RPAREN logic LPAREN exp_condition RPAREN .)
    ID_LI           reduce using rule 58 (exp_condition_logic -> LPAREN exp_condition RPAREN logic LPAREN exp_condition RPAREN .)
    INCREMENT       reduce using rule 58 (exp_condition_logic -> LPAREN exp_condition RPAREN logic LPAREN exp_condition RPAREN .)
    DECREMENT       reduce using rule 58 (exp_condition_logic -> LPAREN exp_condition RPAREN logic LPAREN exp_condition RPAREN .)
    ID              reduce using rule 58 (exp_condition_logic -> LPAREN exp_condition RPAREN logic LPAREN exp_condition RPAREN .)
    FOR             reduce using rule 58 (exp_condition_logic -> LPAREN exp_condition RPAREN logic LPAREN exp_condition RPAREN .)
    DO              reduce using rule 58 (exp_condition_logic -> LPAREN exp_condition RPAREN logic LPAREN exp_condition RPAREN .)
    WHILE           reduce using rule 58 (exp_condition_logic -> LPAREN exp_condition RPAREN logic LPAREN exp_condition RPAREN .)
    SUB             reduce using rule 58 (exp_condition_logic -> LPAREN exp_condition RPAREN logic LPAREN exp_condition RPAREN .)
    $end            reduce using rule 58 (exp_condition_logic -> LPAREN exp_condition RPAREN logic LPAREN exp_condition RPAREN .)
    RBRACE          reduce using rule 58 (exp_condition_logic -> LPAREN exp_condition RPAREN logic LPAREN exp_condition RPAREN .)
    COMMA           reduce using rule 58 (exp_condition_logic -> LPAREN exp_condition RPAREN logic LPAREN exp_condition RPAREN .)


state 187

    (18) elsif -> ELSIF LPAREN exp_condition RPAREN LBRACE . blockcode RBRACE
    (19) elsif -> ELSIF LPAREN exp_condition RPAREN LBRACE . blockcode RBRACE elsif2
    (5) blockcode -> . command
    (6) blockcode -> . command blockcode
    (7) command -> . interations
    (8) command -> . if
    (9) command -> . exp_assignment
    (10) command -> . call
    (11) command -> . RETURN return SEMICOLON
    (12) command -> . BREAK SEMICOLON
    (13) command -> . CONTINUE SEMICOLON
    (22) interations -> . for
    (23) interations -> . dowhile
    (24) interations -> . while
    (14) if -> . IF LPAREN exp_condition RPAREN if_statement
    (62) exp_assignment -> . ID_SC EQUALS arithmetic
    (63) exp_assignment -> . ID_LI EQUALS arithmetic
    (64) exp_assignment -> . ID_SC
    (65) exp_assignment -> . ID_LI
    (66) exp_assignment -> . INCREMENT ID_SC
    (67) exp_assignment -> . DECREMENT ID_SC
    (68) exp_assignment -> . ID_SC INCREMENT
    (69) exp_assignment -> . ID_SC DECREMENT
    (92) call -> . ID LPAREN RPAREN
    (93) call -> . ID LPAREN function_assignments RPAREN
    (25) for -> . FOR LPAREN for_assignments SEMICOLON exp_condition SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (28) dowhile -> . DO LBRACE blockcode RBRACE WHILE LPAREN exp_condition RPAREN
    (29) while -> . WHILE LPAREN exp_condition RPAREN LBRACE blockcode RBRACE
    (30) while -> . WHILE LPAREN exp_condition RPAREN LBRACE RBRACE

    RETURN          shift and go to state 11
    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    IF              shift and go to state 17
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 21
    ID              shift and go to state 6
    FOR             shift and go to state 22
    DO              shift and go to state 23
    WHILE           shift and go to state 24

    blockcode                      shift and go to state 188
    command                        shift and go to state 4
    interations                    shift and go to state 7
    if                             shift and go to state 8
    exp_assignment                 shift and go to state 9
    call                           shift and go to state 10
    for                            shift and go to state 14
    dowhile                        shift and go to state 15
    while                          shift and go to state 16

state 188

    (18) elsif -> ELSIF LPAREN exp_condition RPAREN LBRACE blockcode . RBRACE
    (19) elsif -> ELSIF LPAREN exp_condition RPAREN LBRACE blockcode . RBRACE elsif2

    RBRACE          shift and go to state 189


state 189

    (18) elsif -> ELSIF LPAREN exp_condition RPAREN LBRACE blockcode RBRACE .
    (19) elsif -> ELSIF LPAREN exp_condition RPAREN LBRACE blockcode RBRACE . elsif2
    (20) elsif2 -> . elsif
    (21) elsif2 -> . ELSE LBRACE blockcode RBRACE
    (18) elsif -> . ELSIF LPAREN exp_condition RPAREN LBRACE blockcode RBRACE
    (19) elsif -> . ELSIF LPAREN exp_condition RPAREN LBRACE blockcode RBRACE elsif2

    RETURN          reduce using rule 18 (elsif -> ELSIF LPAREN exp_condition RPAREN LBRACE blockcode RBRACE .)
    BREAK           reduce using rule 18 (elsif -> ELSIF LPAREN exp_condition RPAREN LBRACE blockcode RBRACE .)
    CONTINUE        reduce using rule 18 (elsif -> ELSIF LPAREN exp_condition RPAREN LBRACE blockcode RBRACE .)
    IF              reduce using rule 18 (elsif -> ELSIF LPAREN exp_condition RPAREN LBRACE blockcode RBRACE .)
    ID_SC           reduce using rule 18 (elsif -> ELSIF LPAREN exp_condition RPAREN LBRACE blockcode RBRACE .)
    ID_LI           reduce using rule 18 (elsif -> ELSIF LPAREN exp_condition RPAREN LBRACE blockcode RBRACE .)
    INCREMENT       reduce using rule 18 (elsif -> ELSIF LPAREN exp_condition RPAREN LBRACE blockcode RBRACE .)
    DECREMENT       reduce using rule 18 (elsif -> ELSIF LPAREN exp_condition RPAREN LBRACE blockcode RBRACE .)
    ID              reduce using rule 18 (elsif -> ELSIF LPAREN exp_condition RPAREN LBRACE blockcode RBRACE .)
    FOR             reduce using rule 18 (elsif -> ELSIF LPAREN exp_condition RPAREN LBRACE blockcode RBRACE .)
    DO              reduce using rule 18 (elsif -> ELSIF LPAREN exp_condition RPAREN LBRACE blockcode RBRACE .)
    WHILE           reduce using rule 18 (elsif -> ELSIF LPAREN exp_condition RPAREN LBRACE blockcode RBRACE .)
    SUB             reduce using rule 18 (elsif -> ELSIF LPAREN exp_condition RPAREN LBRACE blockcode RBRACE .)
    $end            reduce using rule 18 (elsif -> ELSIF LPAREN exp_condition RPAREN LBRACE blockcode RBRACE .)
    RBRACE          reduce using rule 18 (elsif -> ELSIF LPAREN exp_condition RPAREN LBRACE blockcode RBRACE .)
    ELSE            shift and go to state 192
    ELSIF           shift and go to state 171

    elsif2                         shift and go to state 190
    elsif                          shift and go to state 191

state 190

    (19) elsif -> ELSIF LPAREN exp_condition RPAREN LBRACE blockcode RBRACE elsif2 .

    RETURN          reduce using rule 19 (elsif -> ELSIF LPAREN exp_condition RPAREN LBRACE blockcode RBRACE elsif2 .)
    BREAK           reduce using rule 19 (elsif -> ELSIF LPAREN exp_condition RPAREN LBRACE blockcode RBRACE elsif2 .)
    CONTINUE        reduce using rule 19 (elsif -> ELSIF LPAREN exp_condition RPAREN LBRACE blockcode RBRACE elsif2 .)
    IF              reduce using rule 19 (elsif -> ELSIF LPAREN exp_condition RPAREN LBRACE blockcode RBRACE elsif2 .)
    ID_SC           reduce using rule 19 (elsif -> ELSIF LPAREN exp_condition RPAREN LBRACE blockcode RBRACE elsif2 .)
    ID_LI           reduce using rule 19 (elsif -> ELSIF LPAREN exp_condition RPAREN LBRACE blockcode RBRACE elsif2 .)
    INCREMENT       reduce using rule 19 (elsif -> ELSIF LPAREN exp_condition RPAREN LBRACE blockcode RBRACE elsif2 .)
    DECREMENT       reduce using rule 19 (elsif -> ELSIF LPAREN exp_condition RPAREN LBRACE blockcode RBRACE elsif2 .)
    ID              reduce using rule 19 (elsif -> ELSIF LPAREN exp_condition RPAREN LBRACE blockcode RBRACE elsif2 .)
    FOR             reduce using rule 19 (elsif -> ELSIF LPAREN exp_condition RPAREN LBRACE blockcode RBRACE elsif2 .)
    DO              reduce using rule 19 (elsif -> ELSIF LPAREN exp_condition RPAREN LBRACE blockcode RBRACE elsif2 .)
    WHILE           reduce using rule 19 (elsif -> ELSIF LPAREN exp_condition RPAREN LBRACE blockcode RBRACE elsif2 .)
    SUB             reduce using rule 19 (elsif -> ELSIF LPAREN exp_condition RPAREN LBRACE blockcode RBRACE elsif2 .)
    $end            reduce using rule 19 (elsif -> ELSIF LPAREN exp_condition RPAREN LBRACE blockcode RBRACE elsif2 .)
    RBRACE          reduce using rule 19 (elsif -> ELSIF LPAREN exp_condition RPAREN LBRACE blockcode RBRACE elsif2 .)


state 191

    (20) elsif2 -> elsif .

    RETURN          reduce using rule 20 (elsif2 -> elsif .)
    BREAK           reduce using rule 20 (elsif2 -> elsif .)
    CONTINUE        reduce using rule 20 (elsif2 -> elsif .)
    IF              reduce using rule 20 (elsif2 -> elsif .)
    ID_SC           reduce using rule 20 (elsif2 -> elsif .)
    ID_LI           reduce using rule 20 (elsif2 -> elsif .)
    INCREMENT       reduce using rule 20 (elsif2 -> elsif .)
    DECREMENT       reduce using rule 20 (elsif2 -> elsif .)
    ID              reduce using rule 20 (elsif2 -> elsif .)
    FOR             reduce using rule 20 (elsif2 -> elsif .)
    DO              reduce using rule 20 (elsif2 -> elsif .)
    WHILE           reduce using rule 20 (elsif2 -> elsif .)
    SUB             reduce using rule 20 (elsif2 -> elsif .)
    $end            reduce using rule 20 (elsif2 -> elsif .)
    RBRACE          reduce using rule 20 (elsif2 -> elsif .)


state 192

    (21) elsif2 -> ELSE . LBRACE blockcode RBRACE

    LBRACE          shift and go to state 193


state 193

    (21) elsif2 -> ELSE LBRACE . blockcode RBRACE
    (5) blockcode -> . command
    (6) blockcode -> . command blockcode
    (7) command -> . interations
    (8) command -> . if
    (9) command -> . exp_assignment
    (10) command -> . call
    (11) command -> . RETURN return SEMICOLON
    (12) command -> . BREAK SEMICOLON
    (13) command -> . CONTINUE SEMICOLON
    (22) interations -> . for
    (23) interations -> . dowhile
    (24) interations -> . while
    (14) if -> . IF LPAREN exp_condition RPAREN if_statement
    (62) exp_assignment -> . ID_SC EQUALS arithmetic
    (63) exp_assignment -> . ID_LI EQUALS arithmetic
    (64) exp_assignment -> . ID_SC
    (65) exp_assignment -> . ID_LI
    (66) exp_assignment -> . INCREMENT ID_SC
    (67) exp_assignment -> . DECREMENT ID_SC
    (68) exp_assignment -> . ID_SC INCREMENT
    (69) exp_assignment -> . ID_SC DECREMENT
    (92) call -> . ID LPAREN RPAREN
    (93) call -> . ID LPAREN function_assignments RPAREN
    (25) for -> . FOR LPAREN for_assignments SEMICOLON exp_condition SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (28) dowhile -> . DO LBRACE blockcode RBRACE WHILE LPAREN exp_condition RPAREN
    (29) while -> . WHILE LPAREN exp_condition RPAREN LBRACE blockcode RBRACE
    (30) while -> . WHILE LPAREN exp_condition RPAREN LBRACE RBRACE

    RETURN          shift and go to state 11
    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    IF              shift and go to state 17
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 21
    ID              shift and go to state 6
    FOR             shift and go to state 22
    DO              shift and go to state 23
    WHILE           shift and go to state 24

    blockcode                      shift and go to state 194
    command                        shift and go to state 4
    interations                    shift and go to state 7
    if                             shift and go to state 8
    exp_assignment                 shift and go to state 9
    call                           shift and go to state 10
    for                            shift and go to state 14
    dowhile                        shift and go to state 15
    while                          shift and go to state 16

state 194

    (21) elsif2 -> ELSE LBRACE blockcode . RBRACE

    RBRACE          shift and go to state 195


state 195

    (21) elsif2 -> ELSE LBRACE blockcode RBRACE .

    RETURN          reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    BREAK           reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    CONTINUE        reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    IF              reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    ID_SC           reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    ID_LI           reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    INCREMENT       reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    DECREMENT       reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    ID              reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    FOR             reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    DO              reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    WHILE           reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    SUB             reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    $end            reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    RBRACE          reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RETURN in state 4 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 4 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 4 resolved as shift
WARNING: shift/reduce conflict for IF in state 4 resolved as shift
WARNING: shift/reduce conflict for ID_SC in state 4 resolved as shift
WARNING: shift/reduce conflict for ID_LI in state 4 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 4 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 4 resolved as shift
WARNING: shift/reduce conflict for ID in state 4 resolved as shift
WARNING: shift/reduce conflict for FOR in state 4 resolved as shift
WARNING: shift/reduce conflict for DO in state 4 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 4 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 18 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 18 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 37 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 37 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 37 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 37 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 38 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 38 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 38 resolved as shift
WARNING: shift/reduce conflict for XOR in state 40 resolved as shift
WARNING: shift/reduce conflict for GT in state 42 resolved as shift
WARNING: shift/reduce conflict for LT in state 42 resolved as shift
WARNING: shift/reduce conflict for GE in state 44 resolved as shift
WARNING: shift/reduce conflict for LE in state 44 resolved as shift
WARNING: shift/reduce conflict for EQ in state 45 resolved as shift
WARNING: shift/reduce conflict for NE in state 45 resolved as shift
WARNING: shift/reduce conflict for SGT in state 46 resolved as shift
WARNING: shift/reduce conflict for SLT in state 46 resolved as shift
WARNING: shift/reduce conflict for SGE in state 47 resolved as shift
WARNING: shift/reduce conflict for SLE in state 47 resolved as shift
WARNING: shift/reduce conflict for SEQ in state 48 resolved as shift
WARNING: shift/reduce conflict for SNE in state 48 resolved as shift
WARNING: shift/reduce conflict for CMP in state 49 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 75 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 110 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 110 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 111 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 111 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 111 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 111 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 111 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 111 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 112 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 112 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 112 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 112 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 112 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 112 resolved as shift
WARNING: shift/reduce conflict for GE in state 119 resolved as shift
WARNING: shift/reduce conflict for LE in state 119 resolved as shift
WARNING: shift/reduce conflict for GE in state 120 resolved as shift
WARNING: shift/reduce conflict for LE in state 120 resolved as shift
WARNING: shift/reduce conflict for EQ in state 121 resolved as shift
WARNING: shift/reduce conflict for NE in state 121 resolved as shift
WARNING: shift/reduce conflict for EQ in state 122 resolved as shift
WARNING: shift/reduce conflict for NE in state 122 resolved as shift
WARNING: shift/reduce conflict for SGT in state 123 resolved as shift
WARNING: shift/reduce conflict for SLT in state 123 resolved as shift
WARNING: shift/reduce conflict for SGT in state 124 resolved as shift
WARNING: shift/reduce conflict for SLT in state 124 resolved as shift
WARNING: shift/reduce conflict for SGE in state 125 resolved as shift
WARNING: shift/reduce conflict for SLE in state 125 resolved as shift
WARNING: shift/reduce conflict for SGE in state 126 resolved as shift
WARNING: shift/reduce conflict for SLE in state 126 resolved as shift
WARNING: shift/reduce conflict for SEQ in state 127 resolved as shift
WARNING: shift/reduce conflict for SNE in state 127 resolved as shift
WARNING: shift/reduce conflict for SEQ in state 128 resolved as shift
WARNING: shift/reduce conflict for SNE in state 128 resolved as shift
WARNING: shift/reduce conflict for CMP in state 129 resolved as shift
WARNING: shift/reduce conflict for CMP in state 130 resolved as shift
WARNING: reduce/reduce conflict in state 31 resolved using rule (exp_condition_8 -> attcond)
WARNING: rejected rule (return -> attcond) in state 31
WARNING: reduce/reduce conflict in state 33 resolved using rule (exp3 -> exp_assignment)
WARNING: rejected rule (attcond -> exp_assignment) in state 33
WARNING: reduce/reduce conflict in state 34 resolved using rule (exp3 -> NUMBER)
WARNING: rejected rule (attcond -> NUMBER) in state 34
WARNING: reduce/reduce conflict in state 35 resolved using rule (exp3 -> TRUE)
WARNING: rejected rule (attcond -> TRUE) in state 35
WARNING: reduce/reduce conflict in state 36 resolved using rule (exp3 -> FALSE)
WARNING: rejected rule (attcond -> FALSE) in state 36
WARNING: reduce/reduce conflict in state 37 resolved using rule (arithmetic -> exp)
WARNING: rejected rule (exp3 -> exp) in state 37
WARNING: reduce/reduce conflict in state 76 resolved using rule (exp3 -> NUMBER)
WARNING: rejected rule (attcond -> NUMBER) in state 76
WARNING: reduce/reduce conflict in state 77 resolved using rule (exp3 -> exp_assignment)
WARNING: rejected rule (attcond -> exp_assignment) in state 77
WARNING: reduce/reduce conflict in state 78 resolved using rule (exp3 -> TRUE)
WARNING: rejected rule (attcond -> TRUE) in state 78
WARNING: reduce/reduce conflict in state 79 resolved using rule (exp3 -> FALSE)
WARNING: rejected rule (attcond -> FALSE) in state 79
WARNING: reduce/reduce conflict in state 111 resolved using rule (exp -> exp PLUS exp1)
WARNING: rejected rule (exp -> exp1) in state 111
WARNING: reduce/reduce conflict in state 112 resolved using rule (exp -> exp MINUS exp1)
WARNING: rejected rule (exp -> exp1) in state 112
WARNING: reduce/reduce conflict in state 113 resolved using rule (exp1 -> exp1 TIMES exp2)
WARNING: rejected rule (exp1 -> exp2) in state 113
WARNING: reduce/reduce conflict in state 114 resolved using rule (exp1 -> exp1 DIVIDE exp2)
WARNING: rejected rule (exp1 -> exp2) in state 114
WARNING: reduce/reduce conflict in state 115 resolved using rule (exp1 -> exp1 MODULO exp2)
WARNING: rejected rule (exp1 -> exp2) in state 115
WARNING: reduce/reduce conflict in state 116 resolved using rule (exp1 -> exp2)
WARNING: rejected rule (exp2 -> exp3 XOR exp2) in state 116
WARNING: Rule (return -> attcond) is never reduced
WARNING: Rule (exp2 -> exp3 XOR exp2) is never reduced

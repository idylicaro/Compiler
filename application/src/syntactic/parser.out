Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ANDEQUAL
    COLON
    EXP
    LBRACKET
    LNOT
    LSHIFT
    LSHIFTEQUAL
    NO
    OREQUAL
    PERIOD
    Q
    QQ
    QR
    QW
    QX
    RBRACKET
    RSHIFT
    RSHIFTEQUAL
    S
    TERNARY
    TR
    UNLESS
    UNTIL
    XOREQUAL

Grammar

Rule 0     S' -> init
Rule 1     init -> command init
Rule 2     init -> command
Rule 3     init -> function init
Rule 4     init -> function
Rule 5     blockcode -> command
Rule 6     blockcode -> blockcode command
Rule 7     command -> interations
Rule 8     command -> if
Rule 9     command -> exp SEMICOLON
Rule 10    command -> call SEMICOLON
Rule 11    command -> RETURN return SEMICOLON
Rule 12    command -> BREAK SEMICOLON
Rule 13    command -> CONTINUE SEMICOLON
Rule 14    if -> IF LPAREN exp RPAREN if_statement
Rule 15    if_statement -> LBRACE blockcode RBRACE
Rule 16    if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE
Rule 17    if_statement -> LBRACE blockcode RBRACE elsif
Rule 18    elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE
Rule 19    elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2
Rule 20    elsif2 -> elsif
Rule 21    elsif2 -> ELSE LBRACE blockcode RBRACE
Rule 22    interations -> for
Rule 23    interations -> dowhile
Rule 24    interations -> while
Rule 25    for -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
Rule 26    for_assignments -> exp
Rule 27    for_assignments -> exp COMMA for_assignments
Rule 28    dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN
Rule 29    while -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE
Rule 30    while -> WHILE LPAREN exp RPAREN LBRACE RBRACE
Rule 31    function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE
Rule 32    function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE
Rule 33    function_assignments -> exp
Rule 34    function_assignments -> exp COMMA function_assignments
Rule 35    call -> ID LPAREN RPAREN
Rule 36    call -> ID LPAREN function_assignments RPAREN
Rule 37    return -> exp
Rule 38    exp -> ID_SC EQUALS exp_lor
Rule 39    exp -> ID_LI EQUALS exp_lor
Rule 40    exp -> ID_SC MINUSEQUAL exp_lor
Rule 41    exp -> ID_SC PLUSEQUAL exp_lor
Rule 42    exp -> ID_SC MODEQUAL exp_lor
Rule 43    exp -> ID_SC DIVEQUAL exp_lor
Rule 44    exp -> ID_SC TIMESEQUAL exp_lor
Rule 45    exp -> exp_lor
Rule 46    exp_lor -> exp_lor LOR exp_land
Rule 47    exp_lor -> exp_land
Rule 48    exp_land -> exp_land LAND exp_or
Rule 49    exp_land -> exp_or
Rule 50    exp_or -> exp_or OR exp_and
Rule 51    exp_or -> exp_and
Rule 52    exp_and -> exp_and AND exp_comp
Rule 53    exp_and -> exp_comp_eq
Rule 54    exp_comp_eq -> exp_comp_eq EQ exp_comp
Rule 55    exp_comp_eq -> exp_comp_eq NE exp_comp
Rule 56    exp_comp_eq -> exp_comp_eq SEQ exp_comp
Rule 57    exp_comp_eq -> exp_comp_eq SNE exp_comp
Rule 58    exp_comp_eq -> exp_comp_eq CMP exp_comp
Rule 59    exp_comp_eq -> exp_comp
Rule 60    exp_comp -> exp_comp GT exp_plusminus
Rule 61    exp_comp -> exp_comp LT exp_plusminus
Rule 62    exp_comp -> exp_comp GE exp_plusminus
Rule 63    exp_comp -> exp_comp LE exp_plusminus
Rule 64    exp_comp -> exp_comp SLT exp_plusminus
Rule 65    exp_comp -> exp_comp SGT exp_plusminus
Rule 66    exp_comp -> exp_comp SGE exp_plusminus
Rule 67    exp_comp -> exp_comp SLE exp_plusminus
Rule 68    exp_comp -> exp_plusminus
Rule 69    exp_plusminus -> exp_plusminus PLUS exp_times_divides
Rule 70    exp_plusminus -> exp_plusminus MINUS exp_times_divides
Rule 71    exp_plusminus -> exp_times_divides
Rule 72    exp_times_divides -> exp_times_divides TIMES exp_lnot
Rule 73    exp_times_divides -> exp_times_divides DIVIDE exp_lnot
Rule 74    exp_times_divides -> exp_times_divides MODULO exp_lnot
Rule 75    exp_times_divides -> exp_lnot
Rule 76    exp_lnot -> XOR exp_lnot
Rule 77    exp_lnot -> exp_decrement_increment
Rule 78    exp_decrement_increment -> <empty>
Rule 79    exp_decrement_increment -> INCREMENT ID_SC
Rule 80    exp_decrement_increment -> DECREMENT ID_SC
Rule 81    exp_decrement_increment -> ID_SC INCREMENT
Rule 82    exp_decrement_increment -> ID_SC DECREMENT
Rule 83    exp_decrement_increment -> exp_lastlayer
Rule 84    exp_lastlayer -> LPAREN exp RPAREN
Rule 85    exp_lastlayer -> ID_SC
Rule 86    exp_lastlayer -> ID_LI
Rule 87    exp_lastlayer -> NUMBER
Rule 88    exp_lastlayer -> call
Rule 89    exp_lastlayer -> TRUE
Rule 90    exp_lastlayer -> FALSE

Terminals, with rules where they appear

AND                  : 52
ANDEQUAL             : 
BREAK                : 12
CMP                  : 58
COLON                : 
COMMA                : 27 34
CONTINUE             : 13
DECREMENT            : 80 82
DIVEQUAL             : 43
DIVIDE               : 73
DO                   : 28
ELSE                 : 16 21
ELSIF                : 18 19
EQ                   : 54
EQUALS               : 38 39
EXP                  : 
FALSE                : 90
FOR                  : 25
GE                   : 62
GT                   : 60
ID                   : 31 32 35 36
ID_LI                : 39 86
ID_SC                : 38 40 41 42 43 44 79 80 81 82 85
IF                   : 14
INCREMENT            : 79 81
LAND                 : 48
LBRACE               : 15 16 16 17 18 19 21 25 28 29 30 31 32
LBRACKET             : 
LE                   : 63
LNOT                 : 
LOR                  : 46
LPAREN               : 14 18 19 25 28 29 30 31 32 35 36 84
LSHIFT               : 
LSHIFTEQUAL          : 
LT                   : 61
MINUS                : 70
MINUSEQUAL           : 40
MODEQUAL             : 42
MODULO               : 74
NE                   : 55
NO                   : 
NUMBER               : 87
OR                   : 50
OREQUAL              : 
PERIOD               : 
PLUS                 : 69
PLUSEQUAL            : 41
Q                    : 
QQ                   : 
QR                   : 
QW                   : 
QX                   : 
RBRACE               : 15 16 16 17 18 19 21 25 28 29 30 31 32
RBRACKET             : 
RETURN               : 11
RPAREN               : 14 18 19 25 28 29 30 31 32 35 36 84
RSHIFT               : 
RSHIFTEQUAL          : 
S                    : 
SEMICOLON            : 9 10 11 12 13 25 25
SEQ                  : 56
SGE                  : 66
SGT                  : 65
SLE                  : 67
SLT                  : 64
SNE                  : 57
SUB                  : 31 32
TERNARY              : 
TIMES                : 72
TIMESEQUAL           : 44
TR                   : 
TRUE                 : 89
UNLESS               : 
UNTIL                : 
WHILE                : 28 29 30
XOR                  : 76
XOREQUAL             : 
error                : 

Nonterminals, with rules where they appear

blockcode            : 6 15 16 16 17 18 19 21 25 28 29 31 32
call                 : 10 88
command              : 1 2 5 6
dowhile              : 23
elsif                : 17 20
elsif2               : 19
exp                  : 9 14 18 19 25 26 27 28 29 30 33 34 37 84
exp_and              : 50 51 52
exp_comp             : 52 54 55 56 57 58 59 60 61 62 63 64 65 66 67
exp_comp_eq          : 53 54 55 56 57 58
exp_decrement_increment : 77
exp_land             : 46 47 48
exp_lastlayer        : 83
exp_lnot             : 72 73 74 75 76
exp_lor              : 38 39 40 41 42 43 44 45 46
exp_or               : 48 49 50
exp_plusminus        : 60 61 62 63 64 65 66 67 68 69 70
exp_times_divides    : 69 70 71 72 73 74
for                  : 22
for_assignments      : 25 25 27
function             : 3 4
function_assignments : 32 34 36
if                   : 8
if_statement         : 14
init                 : 1 3 0
interations          : 7
return               : 11
while                : 24

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . command init
    (2) init -> . command
    (3) init -> . function init
    (4) init -> . function
    (7) command -> . interations
    (8) command -> . if
    (9) command -> . exp SEMICOLON
    (10) command -> . call SEMICOLON
    (11) command -> . RETURN return SEMICOLON
    (12) command -> . BREAK SEMICOLON
    (13) command -> . CONTINUE SEMICOLON
    (31) function -> . SUB ID LPAREN RPAREN LBRACE blockcode RBRACE
    (32) function -> . SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE
    (22) interations -> . for
    (23) interations -> . dowhile
    (24) interations -> . while
    (14) if -> . IF LPAREN exp RPAREN if_statement
    (38) exp -> . ID_SC EQUALS exp_lor
    (39) exp -> . ID_LI EQUALS exp_lor
    (40) exp -> . ID_SC MINUSEQUAL exp_lor
    (41) exp -> . ID_SC PLUSEQUAL exp_lor
    (42) exp -> . ID_SC MODEQUAL exp_lor
    (43) exp -> . ID_SC DIVEQUAL exp_lor
    (44) exp -> . ID_SC TIMESEQUAL exp_lor
    (45) exp -> . exp_lor
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN
    (25) for -> . FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (28) dowhile -> . DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN
    (29) while -> . WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE
    (30) while -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (46) exp_lor -> . exp_lor LOR exp_land
    (47) exp_lor -> . exp_land
    (48) exp_land -> . exp_land LAND exp_or
    (49) exp_land -> . exp_or
    (50) exp_or -> . exp_or OR exp_and
    (51) exp_or -> . exp_and
    (52) exp_and -> . exp_and AND exp_comp
    (53) exp_and -> . exp_comp_eq
    (54) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (55) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (56) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (57) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (58) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (59) exp_comp_eq -> . exp_comp
    (60) exp_comp -> . exp_comp GT exp_plusminus
    (61) exp_comp -> . exp_comp LT exp_plusminus
    (62) exp_comp -> . exp_comp GE exp_plusminus
    (63) exp_comp -> . exp_comp LE exp_plusminus
    (64) exp_comp -> . exp_comp SLT exp_plusminus
    (65) exp_comp -> . exp_comp SGT exp_plusminus
    (66) exp_comp -> . exp_comp SGE exp_plusminus
    (67) exp_comp -> . exp_comp SLE exp_plusminus
    (68) exp_comp -> . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE

    RETURN          shift and go to state 8
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    SUB             shift and go to state 11
    IF              shift and go to state 17
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 20
    ID              shift and go to state 12
    FOR             shift and go to state 21
    DO              shift and go to state 22
    WHILE           shift and go to state 23
    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    SEMICOLON       reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    init                           shift and go to state 1
    command                        shift and go to state 2
    function                       shift and go to state 3
    interations                    shift and go to state 4
    if                             shift and go to state 5
    exp                            shift and go to state 6
    call                           shift and go to state 7
    for                            shift and go to state 14
    dowhile                        shift and go to state 15
    while                          shift and go to state 16
    exp_lor                        shift and go to state 19
    exp_land                       shift and go to state 24
    exp_or                         shift and go to state 25
    exp_and                        shift and go to state 26
    exp_comp                       shift and go to state 27
    exp_comp_eq                    shift and go to state 28
    exp_plusminus                  shift and go to state 29
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36

state 1

    (0) S' -> init .



state 2

    (1) init -> command . init
    (2) init -> command .
    (1) init -> . command init
    (2) init -> . command
    (3) init -> . function init
    (4) init -> . function
    (7) command -> . interations
    (8) command -> . if
    (9) command -> . exp SEMICOLON
    (10) command -> . call SEMICOLON
    (11) command -> . RETURN return SEMICOLON
    (12) command -> . BREAK SEMICOLON
    (13) command -> . CONTINUE SEMICOLON
    (31) function -> . SUB ID LPAREN RPAREN LBRACE blockcode RBRACE
    (32) function -> . SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE
    (22) interations -> . for
    (23) interations -> . dowhile
    (24) interations -> . while
    (14) if -> . IF LPAREN exp RPAREN if_statement
    (38) exp -> . ID_SC EQUALS exp_lor
    (39) exp -> . ID_LI EQUALS exp_lor
    (40) exp -> . ID_SC MINUSEQUAL exp_lor
    (41) exp -> . ID_SC PLUSEQUAL exp_lor
    (42) exp -> . ID_SC MODEQUAL exp_lor
    (43) exp -> . ID_SC DIVEQUAL exp_lor
    (44) exp -> . ID_SC TIMESEQUAL exp_lor
    (45) exp -> . exp_lor
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN
    (25) for -> . FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (28) dowhile -> . DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN
    (29) while -> . WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE
    (30) while -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (46) exp_lor -> . exp_lor LOR exp_land
    (47) exp_lor -> . exp_land
    (48) exp_land -> . exp_land LAND exp_or
    (49) exp_land -> . exp_or
    (50) exp_or -> . exp_or OR exp_and
    (51) exp_or -> . exp_and
    (52) exp_and -> . exp_and AND exp_comp
    (53) exp_and -> . exp_comp_eq
    (54) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (55) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (56) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (57) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (58) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (59) exp_comp_eq -> . exp_comp
    (60) exp_comp -> . exp_comp GT exp_plusminus
    (61) exp_comp -> . exp_comp LT exp_plusminus
    (62) exp_comp -> . exp_comp GE exp_plusminus
    (63) exp_comp -> . exp_comp LE exp_plusminus
    (64) exp_comp -> . exp_comp SLT exp_plusminus
    (65) exp_comp -> . exp_comp SGT exp_plusminus
    (66) exp_comp -> . exp_comp SGE exp_plusminus
    (67) exp_comp -> . exp_comp SLE exp_plusminus
    (68) exp_comp -> . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE

    $end            reduce using rule 2 (init -> command .)
    RETURN          shift and go to state 8
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    SUB             shift and go to state 11
    IF              shift and go to state 17
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 20
    ID              shift and go to state 12
    FOR             shift and go to state 21
    DO              shift and go to state 22
    WHILE           shift and go to state 23
    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    SEMICOLON       reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    command                        shift and go to state 2
    init                           shift and go to state 40
    function                       shift and go to state 3
    interations                    shift and go to state 4
    if                             shift and go to state 5
    exp                            shift and go to state 6
    call                           shift and go to state 7
    for                            shift and go to state 14
    dowhile                        shift and go to state 15
    while                          shift and go to state 16
    exp_lor                        shift and go to state 19
    exp_land                       shift and go to state 24
    exp_or                         shift and go to state 25
    exp_and                        shift and go to state 26
    exp_comp                       shift and go to state 27
    exp_comp_eq                    shift and go to state 28
    exp_plusminus                  shift and go to state 29
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36

state 3

    (3) init -> function . init
    (4) init -> function .
    (1) init -> . command init
    (2) init -> . command
    (3) init -> . function init
    (4) init -> . function
    (7) command -> . interations
    (8) command -> . if
    (9) command -> . exp SEMICOLON
    (10) command -> . call SEMICOLON
    (11) command -> . RETURN return SEMICOLON
    (12) command -> . BREAK SEMICOLON
    (13) command -> . CONTINUE SEMICOLON
    (31) function -> . SUB ID LPAREN RPAREN LBRACE blockcode RBRACE
    (32) function -> . SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE
    (22) interations -> . for
    (23) interations -> . dowhile
    (24) interations -> . while
    (14) if -> . IF LPAREN exp RPAREN if_statement
    (38) exp -> . ID_SC EQUALS exp_lor
    (39) exp -> . ID_LI EQUALS exp_lor
    (40) exp -> . ID_SC MINUSEQUAL exp_lor
    (41) exp -> . ID_SC PLUSEQUAL exp_lor
    (42) exp -> . ID_SC MODEQUAL exp_lor
    (43) exp -> . ID_SC DIVEQUAL exp_lor
    (44) exp -> . ID_SC TIMESEQUAL exp_lor
    (45) exp -> . exp_lor
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN
    (25) for -> . FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (28) dowhile -> . DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN
    (29) while -> . WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE
    (30) while -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (46) exp_lor -> . exp_lor LOR exp_land
    (47) exp_lor -> . exp_land
    (48) exp_land -> . exp_land LAND exp_or
    (49) exp_land -> . exp_or
    (50) exp_or -> . exp_or OR exp_and
    (51) exp_or -> . exp_and
    (52) exp_and -> . exp_and AND exp_comp
    (53) exp_and -> . exp_comp_eq
    (54) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (55) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (56) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (57) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (58) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (59) exp_comp_eq -> . exp_comp
    (60) exp_comp -> . exp_comp GT exp_plusminus
    (61) exp_comp -> . exp_comp LT exp_plusminus
    (62) exp_comp -> . exp_comp GE exp_plusminus
    (63) exp_comp -> . exp_comp LE exp_plusminus
    (64) exp_comp -> . exp_comp SLT exp_plusminus
    (65) exp_comp -> . exp_comp SGT exp_plusminus
    (66) exp_comp -> . exp_comp SGE exp_plusminus
    (67) exp_comp -> . exp_comp SLE exp_plusminus
    (68) exp_comp -> . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE

    $end            reduce using rule 4 (init -> function .)
    RETURN          shift and go to state 8
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    SUB             shift and go to state 11
    IF              shift and go to state 17
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 20
    ID              shift and go to state 12
    FOR             shift and go to state 21
    DO              shift and go to state 22
    WHILE           shift and go to state 23
    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    SEMICOLON       reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    function                       shift and go to state 3
    init                           shift and go to state 41
    command                        shift and go to state 2
    interations                    shift and go to state 4
    if                             shift and go to state 5
    exp                            shift and go to state 6
    call                           shift and go to state 7
    for                            shift and go to state 14
    dowhile                        shift and go to state 15
    while                          shift and go to state 16
    exp_lor                        shift and go to state 19
    exp_land                       shift and go to state 24
    exp_or                         shift and go to state 25
    exp_and                        shift and go to state 26
    exp_comp                       shift and go to state 27
    exp_comp_eq                    shift and go to state 28
    exp_plusminus                  shift and go to state 29
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36

state 4

    (7) command -> interations .

    RETURN          reduce using rule 7 (command -> interations .)
    BREAK           reduce using rule 7 (command -> interations .)
    CONTINUE        reduce using rule 7 (command -> interations .)
    SUB             reduce using rule 7 (command -> interations .)
    IF              reduce using rule 7 (command -> interations .)
    ID_SC           reduce using rule 7 (command -> interations .)
    ID_LI           reduce using rule 7 (command -> interations .)
    ID              reduce using rule 7 (command -> interations .)
    FOR             reduce using rule 7 (command -> interations .)
    DO              reduce using rule 7 (command -> interations .)
    WHILE           reduce using rule 7 (command -> interations .)
    XOR             reduce using rule 7 (command -> interations .)
    INCREMENT       reduce using rule 7 (command -> interations .)
    DECREMENT       reduce using rule 7 (command -> interations .)
    LPAREN          reduce using rule 7 (command -> interations .)
    NUMBER          reduce using rule 7 (command -> interations .)
    TRUE            reduce using rule 7 (command -> interations .)
    FALSE           reduce using rule 7 (command -> interations .)
    SEMICOLON       reduce using rule 7 (command -> interations .)
    LOR             reduce using rule 7 (command -> interations .)
    LAND            reduce using rule 7 (command -> interations .)
    OR              reduce using rule 7 (command -> interations .)
    AND             reduce using rule 7 (command -> interations .)
    EQ              reduce using rule 7 (command -> interations .)
    NE              reduce using rule 7 (command -> interations .)
    SEQ             reduce using rule 7 (command -> interations .)
    SNE             reduce using rule 7 (command -> interations .)
    CMP             reduce using rule 7 (command -> interations .)
    GT              reduce using rule 7 (command -> interations .)
    LT              reduce using rule 7 (command -> interations .)
    GE              reduce using rule 7 (command -> interations .)
    LE              reduce using rule 7 (command -> interations .)
    SLT             reduce using rule 7 (command -> interations .)
    SGT             reduce using rule 7 (command -> interations .)
    SGE             reduce using rule 7 (command -> interations .)
    SLE             reduce using rule 7 (command -> interations .)
    PLUS            reduce using rule 7 (command -> interations .)
    MINUS           reduce using rule 7 (command -> interations .)
    TIMES           reduce using rule 7 (command -> interations .)
    DIVIDE          reduce using rule 7 (command -> interations .)
    MODULO          reduce using rule 7 (command -> interations .)
    $end            reduce using rule 7 (command -> interations .)
    RBRACE          reduce using rule 7 (command -> interations .)


state 5

    (8) command -> if .

    RETURN          reduce using rule 8 (command -> if .)
    BREAK           reduce using rule 8 (command -> if .)
    CONTINUE        reduce using rule 8 (command -> if .)
    SUB             reduce using rule 8 (command -> if .)
    IF              reduce using rule 8 (command -> if .)
    ID_SC           reduce using rule 8 (command -> if .)
    ID_LI           reduce using rule 8 (command -> if .)
    ID              reduce using rule 8 (command -> if .)
    FOR             reduce using rule 8 (command -> if .)
    DO              reduce using rule 8 (command -> if .)
    WHILE           reduce using rule 8 (command -> if .)
    XOR             reduce using rule 8 (command -> if .)
    INCREMENT       reduce using rule 8 (command -> if .)
    DECREMENT       reduce using rule 8 (command -> if .)
    LPAREN          reduce using rule 8 (command -> if .)
    NUMBER          reduce using rule 8 (command -> if .)
    TRUE            reduce using rule 8 (command -> if .)
    FALSE           reduce using rule 8 (command -> if .)
    SEMICOLON       reduce using rule 8 (command -> if .)
    LOR             reduce using rule 8 (command -> if .)
    LAND            reduce using rule 8 (command -> if .)
    OR              reduce using rule 8 (command -> if .)
    AND             reduce using rule 8 (command -> if .)
    EQ              reduce using rule 8 (command -> if .)
    NE              reduce using rule 8 (command -> if .)
    SEQ             reduce using rule 8 (command -> if .)
    SNE             reduce using rule 8 (command -> if .)
    CMP             reduce using rule 8 (command -> if .)
    GT              reduce using rule 8 (command -> if .)
    LT              reduce using rule 8 (command -> if .)
    GE              reduce using rule 8 (command -> if .)
    LE              reduce using rule 8 (command -> if .)
    SLT             reduce using rule 8 (command -> if .)
    SGT             reduce using rule 8 (command -> if .)
    SGE             reduce using rule 8 (command -> if .)
    SLE             reduce using rule 8 (command -> if .)
    PLUS            reduce using rule 8 (command -> if .)
    MINUS           reduce using rule 8 (command -> if .)
    TIMES           reduce using rule 8 (command -> if .)
    DIVIDE          reduce using rule 8 (command -> if .)
    MODULO          reduce using rule 8 (command -> if .)
    $end            reduce using rule 8 (command -> if .)
    RBRACE          reduce using rule 8 (command -> if .)


state 6

    (9) command -> exp . SEMICOLON

    SEMICOLON       shift and go to state 42


state 7

    (10) command -> call . SEMICOLON
    (88) exp_lastlayer -> call .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 43
    TIMES           reduce using rule 88 (exp_lastlayer -> call .)
    DIVIDE          reduce using rule 88 (exp_lastlayer -> call .)
    MODULO          reduce using rule 88 (exp_lastlayer -> call .)
    PLUS            reduce using rule 88 (exp_lastlayer -> call .)
    MINUS           reduce using rule 88 (exp_lastlayer -> call .)
    GT              reduce using rule 88 (exp_lastlayer -> call .)
    LT              reduce using rule 88 (exp_lastlayer -> call .)
    GE              reduce using rule 88 (exp_lastlayer -> call .)
    LE              reduce using rule 88 (exp_lastlayer -> call .)
    SLT             reduce using rule 88 (exp_lastlayer -> call .)
    SGT             reduce using rule 88 (exp_lastlayer -> call .)
    SGE             reduce using rule 88 (exp_lastlayer -> call .)
    SLE             reduce using rule 88 (exp_lastlayer -> call .)
    EQ              reduce using rule 88 (exp_lastlayer -> call .)
    NE              reduce using rule 88 (exp_lastlayer -> call .)
    SEQ             reduce using rule 88 (exp_lastlayer -> call .)
    SNE             reduce using rule 88 (exp_lastlayer -> call .)
    CMP             reduce using rule 88 (exp_lastlayer -> call .)
    AND             reduce using rule 88 (exp_lastlayer -> call .)
    OR              reduce using rule 88 (exp_lastlayer -> call .)
    LAND            reduce using rule 88 (exp_lastlayer -> call .)
    LOR             reduce using rule 88 (exp_lastlayer -> call .)

  ! SEMICOLON       [ reduce using rule 88 (exp_lastlayer -> call .) ]


state 8

    (11) command -> RETURN . return SEMICOLON
    (37) return -> . exp
    (38) exp -> . ID_SC EQUALS exp_lor
    (39) exp -> . ID_LI EQUALS exp_lor
    (40) exp -> . ID_SC MINUSEQUAL exp_lor
    (41) exp -> . ID_SC PLUSEQUAL exp_lor
    (42) exp -> . ID_SC MODEQUAL exp_lor
    (43) exp -> . ID_SC DIVEQUAL exp_lor
    (44) exp -> . ID_SC TIMESEQUAL exp_lor
    (45) exp -> . exp_lor
    (46) exp_lor -> . exp_lor LOR exp_land
    (47) exp_lor -> . exp_land
    (48) exp_land -> . exp_land LAND exp_or
    (49) exp_land -> . exp_or
    (50) exp_or -> . exp_or OR exp_and
    (51) exp_or -> . exp_and
    (52) exp_and -> . exp_and AND exp_comp
    (53) exp_and -> . exp_comp_eq
    (54) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (55) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (56) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (57) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (58) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (59) exp_comp_eq -> . exp_comp
    (60) exp_comp -> . exp_comp GT exp_plusminus
    (61) exp_comp -> . exp_comp LT exp_plusminus
    (62) exp_comp -> . exp_comp GE exp_plusminus
    (63) exp_comp -> . exp_comp LE exp_plusminus
    (64) exp_comp -> . exp_comp SLT exp_plusminus
    (65) exp_comp -> . exp_comp SGT exp_plusminus
    (66) exp_comp -> . exp_comp SGE exp_plusminus
    (67) exp_comp -> . exp_comp SLE exp_plusminus
    (68) exp_comp -> . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN

    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 20
    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    SEMICOLON       reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 12

    return                         shift and go to state 44
    exp                            shift and go to state 45
    exp_lor                        shift and go to state 19
    exp_land                       shift and go to state 24
    exp_or                         shift and go to state 25
    exp_and                        shift and go to state 26
    exp_comp                       shift and go to state 27
    exp_comp_eq                    shift and go to state 28
    exp_plusminus                  shift and go to state 29
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36
    call                           shift and go to state 46

state 9

    (12) command -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 47


state 10

    (13) command -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 48


state 11

    (31) function -> SUB . ID LPAREN RPAREN LBRACE blockcode RBRACE
    (32) function -> SUB . ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE

    ID              shift and go to state 49


state 12

    (35) call -> ID . LPAREN RPAREN
    (36) call -> ID . LPAREN function_assignments RPAREN

    LPAREN          shift and go to state 50


state 13

    (84) exp_lastlayer -> LPAREN . exp RPAREN
    (38) exp -> . ID_SC EQUALS exp_lor
    (39) exp -> . ID_LI EQUALS exp_lor
    (40) exp -> . ID_SC MINUSEQUAL exp_lor
    (41) exp -> . ID_SC PLUSEQUAL exp_lor
    (42) exp -> . ID_SC MODEQUAL exp_lor
    (43) exp -> . ID_SC DIVEQUAL exp_lor
    (44) exp -> . ID_SC TIMESEQUAL exp_lor
    (45) exp -> . exp_lor
    (46) exp_lor -> . exp_lor LOR exp_land
    (47) exp_lor -> . exp_land
    (48) exp_land -> . exp_land LAND exp_or
    (49) exp_land -> . exp_or
    (50) exp_or -> . exp_or OR exp_and
    (51) exp_or -> . exp_and
    (52) exp_and -> . exp_and AND exp_comp
    (53) exp_and -> . exp_comp_eq
    (54) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (55) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (56) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (57) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (58) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (59) exp_comp_eq -> . exp_comp
    (60) exp_comp -> . exp_comp GT exp_plusminus
    (61) exp_comp -> . exp_comp LT exp_plusminus
    (62) exp_comp -> . exp_comp GE exp_plusminus
    (63) exp_comp -> . exp_comp LE exp_plusminus
    (64) exp_comp -> . exp_comp SLT exp_plusminus
    (65) exp_comp -> . exp_comp SGT exp_plusminus
    (66) exp_comp -> . exp_comp SGE exp_plusminus
    (67) exp_comp -> . exp_comp SLE exp_plusminus
    (68) exp_comp -> . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN

    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 20
    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    RPAREN          reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 12

    exp                            shift and go to state 51
    exp_lor                        shift and go to state 19
    exp_land                       shift and go to state 24
    exp_or                         shift and go to state 25
    exp_and                        shift and go to state 26
    exp_comp                       shift and go to state 27
    exp_comp_eq                    shift and go to state 28
    exp_plusminus                  shift and go to state 29
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36
    call                           shift and go to state 46

state 14

    (22) interations -> for .

    RETURN          reduce using rule 22 (interations -> for .)
    BREAK           reduce using rule 22 (interations -> for .)
    CONTINUE        reduce using rule 22 (interations -> for .)
    SUB             reduce using rule 22 (interations -> for .)
    IF              reduce using rule 22 (interations -> for .)
    ID_SC           reduce using rule 22 (interations -> for .)
    ID_LI           reduce using rule 22 (interations -> for .)
    ID              reduce using rule 22 (interations -> for .)
    FOR             reduce using rule 22 (interations -> for .)
    DO              reduce using rule 22 (interations -> for .)
    WHILE           reduce using rule 22 (interations -> for .)
    XOR             reduce using rule 22 (interations -> for .)
    INCREMENT       reduce using rule 22 (interations -> for .)
    DECREMENT       reduce using rule 22 (interations -> for .)
    LPAREN          reduce using rule 22 (interations -> for .)
    NUMBER          reduce using rule 22 (interations -> for .)
    TRUE            reduce using rule 22 (interations -> for .)
    FALSE           reduce using rule 22 (interations -> for .)
    SEMICOLON       reduce using rule 22 (interations -> for .)
    LOR             reduce using rule 22 (interations -> for .)
    LAND            reduce using rule 22 (interations -> for .)
    OR              reduce using rule 22 (interations -> for .)
    AND             reduce using rule 22 (interations -> for .)
    EQ              reduce using rule 22 (interations -> for .)
    NE              reduce using rule 22 (interations -> for .)
    SEQ             reduce using rule 22 (interations -> for .)
    SNE             reduce using rule 22 (interations -> for .)
    CMP             reduce using rule 22 (interations -> for .)
    GT              reduce using rule 22 (interations -> for .)
    LT              reduce using rule 22 (interations -> for .)
    GE              reduce using rule 22 (interations -> for .)
    LE              reduce using rule 22 (interations -> for .)
    SLT             reduce using rule 22 (interations -> for .)
    SGT             reduce using rule 22 (interations -> for .)
    SGE             reduce using rule 22 (interations -> for .)
    SLE             reduce using rule 22 (interations -> for .)
    PLUS            reduce using rule 22 (interations -> for .)
    MINUS           reduce using rule 22 (interations -> for .)
    TIMES           reduce using rule 22 (interations -> for .)
    DIVIDE          reduce using rule 22 (interations -> for .)
    MODULO          reduce using rule 22 (interations -> for .)
    $end            reduce using rule 22 (interations -> for .)
    RBRACE          reduce using rule 22 (interations -> for .)


state 15

    (23) interations -> dowhile .

    RETURN          reduce using rule 23 (interations -> dowhile .)
    BREAK           reduce using rule 23 (interations -> dowhile .)
    CONTINUE        reduce using rule 23 (interations -> dowhile .)
    SUB             reduce using rule 23 (interations -> dowhile .)
    IF              reduce using rule 23 (interations -> dowhile .)
    ID_SC           reduce using rule 23 (interations -> dowhile .)
    ID_LI           reduce using rule 23 (interations -> dowhile .)
    ID              reduce using rule 23 (interations -> dowhile .)
    FOR             reduce using rule 23 (interations -> dowhile .)
    DO              reduce using rule 23 (interations -> dowhile .)
    WHILE           reduce using rule 23 (interations -> dowhile .)
    XOR             reduce using rule 23 (interations -> dowhile .)
    INCREMENT       reduce using rule 23 (interations -> dowhile .)
    DECREMENT       reduce using rule 23 (interations -> dowhile .)
    LPAREN          reduce using rule 23 (interations -> dowhile .)
    NUMBER          reduce using rule 23 (interations -> dowhile .)
    TRUE            reduce using rule 23 (interations -> dowhile .)
    FALSE           reduce using rule 23 (interations -> dowhile .)
    SEMICOLON       reduce using rule 23 (interations -> dowhile .)
    LOR             reduce using rule 23 (interations -> dowhile .)
    LAND            reduce using rule 23 (interations -> dowhile .)
    OR              reduce using rule 23 (interations -> dowhile .)
    AND             reduce using rule 23 (interations -> dowhile .)
    EQ              reduce using rule 23 (interations -> dowhile .)
    NE              reduce using rule 23 (interations -> dowhile .)
    SEQ             reduce using rule 23 (interations -> dowhile .)
    SNE             reduce using rule 23 (interations -> dowhile .)
    CMP             reduce using rule 23 (interations -> dowhile .)
    GT              reduce using rule 23 (interations -> dowhile .)
    LT              reduce using rule 23 (interations -> dowhile .)
    GE              reduce using rule 23 (interations -> dowhile .)
    LE              reduce using rule 23 (interations -> dowhile .)
    SLT             reduce using rule 23 (interations -> dowhile .)
    SGT             reduce using rule 23 (interations -> dowhile .)
    SGE             reduce using rule 23 (interations -> dowhile .)
    SLE             reduce using rule 23 (interations -> dowhile .)
    PLUS            reduce using rule 23 (interations -> dowhile .)
    MINUS           reduce using rule 23 (interations -> dowhile .)
    TIMES           reduce using rule 23 (interations -> dowhile .)
    DIVIDE          reduce using rule 23 (interations -> dowhile .)
    MODULO          reduce using rule 23 (interations -> dowhile .)
    $end            reduce using rule 23 (interations -> dowhile .)
    RBRACE          reduce using rule 23 (interations -> dowhile .)


state 16

    (24) interations -> while .

    RETURN          reduce using rule 24 (interations -> while .)
    BREAK           reduce using rule 24 (interations -> while .)
    CONTINUE        reduce using rule 24 (interations -> while .)
    SUB             reduce using rule 24 (interations -> while .)
    IF              reduce using rule 24 (interations -> while .)
    ID_SC           reduce using rule 24 (interations -> while .)
    ID_LI           reduce using rule 24 (interations -> while .)
    ID              reduce using rule 24 (interations -> while .)
    FOR             reduce using rule 24 (interations -> while .)
    DO              reduce using rule 24 (interations -> while .)
    WHILE           reduce using rule 24 (interations -> while .)
    XOR             reduce using rule 24 (interations -> while .)
    INCREMENT       reduce using rule 24 (interations -> while .)
    DECREMENT       reduce using rule 24 (interations -> while .)
    LPAREN          reduce using rule 24 (interations -> while .)
    NUMBER          reduce using rule 24 (interations -> while .)
    TRUE            reduce using rule 24 (interations -> while .)
    FALSE           reduce using rule 24 (interations -> while .)
    SEMICOLON       reduce using rule 24 (interations -> while .)
    LOR             reduce using rule 24 (interations -> while .)
    LAND            reduce using rule 24 (interations -> while .)
    OR              reduce using rule 24 (interations -> while .)
    AND             reduce using rule 24 (interations -> while .)
    EQ              reduce using rule 24 (interations -> while .)
    NE              reduce using rule 24 (interations -> while .)
    SEQ             reduce using rule 24 (interations -> while .)
    SNE             reduce using rule 24 (interations -> while .)
    CMP             reduce using rule 24 (interations -> while .)
    GT              reduce using rule 24 (interations -> while .)
    LT              reduce using rule 24 (interations -> while .)
    GE              reduce using rule 24 (interations -> while .)
    LE              reduce using rule 24 (interations -> while .)
    SLT             reduce using rule 24 (interations -> while .)
    SGT             reduce using rule 24 (interations -> while .)
    SGE             reduce using rule 24 (interations -> while .)
    SLE             reduce using rule 24 (interations -> while .)
    PLUS            reduce using rule 24 (interations -> while .)
    MINUS           reduce using rule 24 (interations -> while .)
    TIMES           reduce using rule 24 (interations -> while .)
    DIVIDE          reduce using rule 24 (interations -> while .)
    MODULO          reduce using rule 24 (interations -> while .)
    $end            reduce using rule 24 (interations -> while .)
    RBRACE          reduce using rule 24 (interations -> while .)


state 17

    (14) if -> IF . LPAREN exp RPAREN if_statement

    LPAREN          shift and go to state 52


state 18

    (38) exp -> ID_SC . EQUALS exp_lor
    (40) exp -> ID_SC . MINUSEQUAL exp_lor
    (41) exp -> ID_SC . PLUSEQUAL exp_lor
    (42) exp -> ID_SC . MODEQUAL exp_lor
    (43) exp -> ID_SC . DIVEQUAL exp_lor
    (44) exp -> ID_SC . TIMESEQUAL exp_lor
    (81) exp_decrement_increment -> ID_SC . INCREMENT
    (82) exp_decrement_increment -> ID_SC . DECREMENT
    (85) exp_lastlayer -> ID_SC .

    EQUALS          shift and go to state 53
    MINUSEQUAL      shift and go to state 54
    PLUSEQUAL       shift and go to state 55
    MODEQUAL        shift and go to state 56
    DIVEQUAL        shift and go to state 57
    TIMESEQUAL      shift and go to state 58
    INCREMENT       shift and go to state 59
    DECREMENT       shift and go to state 60
    TIMES           reduce using rule 85 (exp_lastlayer -> ID_SC .)
    DIVIDE          reduce using rule 85 (exp_lastlayer -> ID_SC .)
    MODULO          reduce using rule 85 (exp_lastlayer -> ID_SC .)
    PLUS            reduce using rule 85 (exp_lastlayer -> ID_SC .)
    MINUS           reduce using rule 85 (exp_lastlayer -> ID_SC .)
    GT              reduce using rule 85 (exp_lastlayer -> ID_SC .)
    LT              reduce using rule 85 (exp_lastlayer -> ID_SC .)
    GE              reduce using rule 85 (exp_lastlayer -> ID_SC .)
    LE              reduce using rule 85 (exp_lastlayer -> ID_SC .)
    SLT             reduce using rule 85 (exp_lastlayer -> ID_SC .)
    SGT             reduce using rule 85 (exp_lastlayer -> ID_SC .)
    SGE             reduce using rule 85 (exp_lastlayer -> ID_SC .)
    SLE             reduce using rule 85 (exp_lastlayer -> ID_SC .)
    EQ              reduce using rule 85 (exp_lastlayer -> ID_SC .)
    NE              reduce using rule 85 (exp_lastlayer -> ID_SC .)
    SEQ             reduce using rule 85 (exp_lastlayer -> ID_SC .)
    SNE             reduce using rule 85 (exp_lastlayer -> ID_SC .)
    CMP             reduce using rule 85 (exp_lastlayer -> ID_SC .)
    AND             reduce using rule 85 (exp_lastlayer -> ID_SC .)
    OR              reduce using rule 85 (exp_lastlayer -> ID_SC .)
    LAND            reduce using rule 85 (exp_lastlayer -> ID_SC .)
    LOR             reduce using rule 85 (exp_lastlayer -> ID_SC .)
    SEMICOLON       reduce using rule 85 (exp_lastlayer -> ID_SC .)
    RPAREN          reduce using rule 85 (exp_lastlayer -> ID_SC .)
    COMMA           reduce using rule 85 (exp_lastlayer -> ID_SC .)


state 19

    (45) exp -> exp_lor .
    (46) exp_lor -> exp_lor . LOR exp_land

    SEMICOLON       reduce using rule 45 (exp -> exp_lor .)
    RPAREN          reduce using rule 45 (exp -> exp_lor .)
    COMMA           reduce using rule 45 (exp -> exp_lor .)
    LOR             shift and go to state 61


state 20

    (39) exp -> ID_LI . EQUALS exp_lor
    (86) exp_lastlayer -> ID_LI .

    EQUALS          shift and go to state 62
    TIMES           reduce using rule 86 (exp_lastlayer -> ID_LI .)
    DIVIDE          reduce using rule 86 (exp_lastlayer -> ID_LI .)
    MODULO          reduce using rule 86 (exp_lastlayer -> ID_LI .)
    PLUS            reduce using rule 86 (exp_lastlayer -> ID_LI .)
    MINUS           reduce using rule 86 (exp_lastlayer -> ID_LI .)
    GT              reduce using rule 86 (exp_lastlayer -> ID_LI .)
    LT              reduce using rule 86 (exp_lastlayer -> ID_LI .)
    GE              reduce using rule 86 (exp_lastlayer -> ID_LI .)
    LE              reduce using rule 86 (exp_lastlayer -> ID_LI .)
    SLT             reduce using rule 86 (exp_lastlayer -> ID_LI .)
    SGT             reduce using rule 86 (exp_lastlayer -> ID_LI .)
    SGE             reduce using rule 86 (exp_lastlayer -> ID_LI .)
    SLE             reduce using rule 86 (exp_lastlayer -> ID_LI .)
    EQ              reduce using rule 86 (exp_lastlayer -> ID_LI .)
    NE              reduce using rule 86 (exp_lastlayer -> ID_LI .)
    SEQ             reduce using rule 86 (exp_lastlayer -> ID_LI .)
    SNE             reduce using rule 86 (exp_lastlayer -> ID_LI .)
    CMP             reduce using rule 86 (exp_lastlayer -> ID_LI .)
    AND             reduce using rule 86 (exp_lastlayer -> ID_LI .)
    OR              reduce using rule 86 (exp_lastlayer -> ID_LI .)
    LAND            reduce using rule 86 (exp_lastlayer -> ID_LI .)
    LOR             reduce using rule 86 (exp_lastlayer -> ID_LI .)
    SEMICOLON       reduce using rule 86 (exp_lastlayer -> ID_LI .)
    RPAREN          reduce using rule 86 (exp_lastlayer -> ID_LI .)
    COMMA           reduce using rule 86 (exp_lastlayer -> ID_LI .)


state 21

    (25) for -> FOR . LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE

    LPAREN          shift and go to state 63


state 22

    (28) dowhile -> DO . LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN

    LBRACE          shift and go to state 64


state 23

    (29) while -> WHILE . LPAREN exp RPAREN LBRACE blockcode RBRACE
    (30) while -> WHILE . LPAREN exp RPAREN LBRACE RBRACE

    LPAREN          shift and go to state 65


state 24

    (47) exp_lor -> exp_land .
    (48) exp_land -> exp_land . LAND exp_or

    LOR             reduce using rule 47 (exp_lor -> exp_land .)
    SEMICOLON       reduce using rule 47 (exp_lor -> exp_land .)
    RPAREN          reduce using rule 47 (exp_lor -> exp_land .)
    COMMA           reduce using rule 47 (exp_lor -> exp_land .)
    LAND            shift and go to state 66


state 25

    (49) exp_land -> exp_or .
    (50) exp_or -> exp_or . OR exp_and

    LAND            reduce using rule 49 (exp_land -> exp_or .)
    LOR             reduce using rule 49 (exp_land -> exp_or .)
    SEMICOLON       reduce using rule 49 (exp_land -> exp_or .)
    RPAREN          reduce using rule 49 (exp_land -> exp_or .)
    COMMA           reduce using rule 49 (exp_land -> exp_or .)
    OR              shift and go to state 67


state 26

    (51) exp_or -> exp_and .
    (52) exp_and -> exp_and . AND exp_comp

    OR              reduce using rule 51 (exp_or -> exp_and .)
    LAND            reduce using rule 51 (exp_or -> exp_and .)
    LOR             reduce using rule 51 (exp_or -> exp_and .)
    SEMICOLON       reduce using rule 51 (exp_or -> exp_and .)
    RPAREN          reduce using rule 51 (exp_or -> exp_and .)
    COMMA           reduce using rule 51 (exp_or -> exp_and .)
    AND             shift and go to state 68


state 27

    (59) exp_comp_eq -> exp_comp .
    (60) exp_comp -> exp_comp . GT exp_plusminus
    (61) exp_comp -> exp_comp . LT exp_plusminus
    (62) exp_comp -> exp_comp . GE exp_plusminus
    (63) exp_comp -> exp_comp . LE exp_plusminus
    (64) exp_comp -> exp_comp . SLT exp_plusminus
    (65) exp_comp -> exp_comp . SGT exp_plusminus
    (66) exp_comp -> exp_comp . SGE exp_plusminus
    (67) exp_comp -> exp_comp . SLE exp_plusminus

    EQ              reduce using rule 59 (exp_comp_eq -> exp_comp .)
    NE              reduce using rule 59 (exp_comp_eq -> exp_comp .)
    SEQ             reduce using rule 59 (exp_comp_eq -> exp_comp .)
    SNE             reduce using rule 59 (exp_comp_eq -> exp_comp .)
    CMP             reduce using rule 59 (exp_comp_eq -> exp_comp .)
    AND             reduce using rule 59 (exp_comp_eq -> exp_comp .)
    OR              reduce using rule 59 (exp_comp_eq -> exp_comp .)
    LAND            reduce using rule 59 (exp_comp_eq -> exp_comp .)
    LOR             reduce using rule 59 (exp_comp_eq -> exp_comp .)
    SEMICOLON       reduce using rule 59 (exp_comp_eq -> exp_comp .)
    RPAREN          reduce using rule 59 (exp_comp_eq -> exp_comp .)
    COMMA           reduce using rule 59 (exp_comp_eq -> exp_comp .)
    GT              shift and go to state 69
    LT              shift and go to state 70
    GE              shift and go to state 71
    LE              shift and go to state 72
    SLT             shift and go to state 73
    SGT             shift and go to state 74
    SGE             shift and go to state 75
    SLE             shift and go to state 76


state 28

    (53) exp_and -> exp_comp_eq .
    (54) exp_comp_eq -> exp_comp_eq . EQ exp_comp
    (55) exp_comp_eq -> exp_comp_eq . NE exp_comp
    (56) exp_comp_eq -> exp_comp_eq . SEQ exp_comp
    (57) exp_comp_eq -> exp_comp_eq . SNE exp_comp
    (58) exp_comp_eq -> exp_comp_eq . CMP exp_comp

    AND             reduce using rule 53 (exp_and -> exp_comp_eq .)
    OR              reduce using rule 53 (exp_and -> exp_comp_eq .)
    LAND            reduce using rule 53 (exp_and -> exp_comp_eq .)
    LOR             reduce using rule 53 (exp_and -> exp_comp_eq .)
    SEMICOLON       reduce using rule 53 (exp_and -> exp_comp_eq .)
    RPAREN          reduce using rule 53 (exp_and -> exp_comp_eq .)
    COMMA           reduce using rule 53 (exp_and -> exp_comp_eq .)
    EQ              shift and go to state 77
    NE              shift and go to state 78
    SEQ             shift and go to state 79
    SNE             shift and go to state 80
    CMP             shift and go to state 81


state 29

    (68) exp_comp -> exp_plusminus .
    (69) exp_plusminus -> exp_plusminus . PLUS exp_times_divides
    (70) exp_plusminus -> exp_plusminus . MINUS exp_times_divides

    GT              reduce using rule 68 (exp_comp -> exp_plusminus .)
    LT              reduce using rule 68 (exp_comp -> exp_plusminus .)
    GE              reduce using rule 68 (exp_comp -> exp_plusminus .)
    LE              reduce using rule 68 (exp_comp -> exp_plusminus .)
    SLT             reduce using rule 68 (exp_comp -> exp_plusminus .)
    SGT             reduce using rule 68 (exp_comp -> exp_plusminus .)
    SGE             reduce using rule 68 (exp_comp -> exp_plusminus .)
    SLE             reduce using rule 68 (exp_comp -> exp_plusminus .)
    EQ              reduce using rule 68 (exp_comp -> exp_plusminus .)
    NE              reduce using rule 68 (exp_comp -> exp_plusminus .)
    SEQ             reduce using rule 68 (exp_comp -> exp_plusminus .)
    SNE             reduce using rule 68 (exp_comp -> exp_plusminus .)
    CMP             reduce using rule 68 (exp_comp -> exp_plusminus .)
    AND             reduce using rule 68 (exp_comp -> exp_plusminus .)
    OR              reduce using rule 68 (exp_comp -> exp_plusminus .)
    LAND            reduce using rule 68 (exp_comp -> exp_plusminus .)
    LOR             reduce using rule 68 (exp_comp -> exp_plusminus .)
    SEMICOLON       reduce using rule 68 (exp_comp -> exp_plusminus .)
    RPAREN          reduce using rule 68 (exp_comp -> exp_plusminus .)
    COMMA           reduce using rule 68 (exp_comp -> exp_plusminus .)
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83


state 30

    (71) exp_plusminus -> exp_times_divides .
    (72) exp_times_divides -> exp_times_divides . TIMES exp_lnot
    (73) exp_times_divides -> exp_times_divides . DIVIDE exp_lnot
    (74) exp_times_divides -> exp_times_divides . MODULO exp_lnot

    PLUS            reduce using rule 71 (exp_plusminus -> exp_times_divides .)
    MINUS           reduce using rule 71 (exp_plusminus -> exp_times_divides .)
    GT              reduce using rule 71 (exp_plusminus -> exp_times_divides .)
    LT              reduce using rule 71 (exp_plusminus -> exp_times_divides .)
    GE              reduce using rule 71 (exp_plusminus -> exp_times_divides .)
    LE              reduce using rule 71 (exp_plusminus -> exp_times_divides .)
    SLT             reduce using rule 71 (exp_plusminus -> exp_times_divides .)
    SGT             reduce using rule 71 (exp_plusminus -> exp_times_divides .)
    SGE             reduce using rule 71 (exp_plusminus -> exp_times_divides .)
    SLE             reduce using rule 71 (exp_plusminus -> exp_times_divides .)
    EQ              reduce using rule 71 (exp_plusminus -> exp_times_divides .)
    NE              reduce using rule 71 (exp_plusminus -> exp_times_divides .)
    SEQ             reduce using rule 71 (exp_plusminus -> exp_times_divides .)
    SNE             reduce using rule 71 (exp_plusminus -> exp_times_divides .)
    CMP             reduce using rule 71 (exp_plusminus -> exp_times_divides .)
    AND             reduce using rule 71 (exp_plusminus -> exp_times_divides .)
    OR              reduce using rule 71 (exp_plusminus -> exp_times_divides .)
    LAND            reduce using rule 71 (exp_plusminus -> exp_times_divides .)
    LOR             reduce using rule 71 (exp_plusminus -> exp_times_divides .)
    SEMICOLON       reduce using rule 71 (exp_plusminus -> exp_times_divides .)
    RPAREN          reduce using rule 71 (exp_plusminus -> exp_times_divides .)
    COMMA           reduce using rule 71 (exp_plusminus -> exp_times_divides .)
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 85
    MODULO          shift and go to state 86


state 31

    (75) exp_times_divides -> exp_lnot .

    TIMES           reduce using rule 75 (exp_times_divides -> exp_lnot .)
    DIVIDE          reduce using rule 75 (exp_times_divides -> exp_lnot .)
    MODULO          reduce using rule 75 (exp_times_divides -> exp_lnot .)
    PLUS            reduce using rule 75 (exp_times_divides -> exp_lnot .)
    MINUS           reduce using rule 75 (exp_times_divides -> exp_lnot .)
    GT              reduce using rule 75 (exp_times_divides -> exp_lnot .)
    LT              reduce using rule 75 (exp_times_divides -> exp_lnot .)
    GE              reduce using rule 75 (exp_times_divides -> exp_lnot .)
    LE              reduce using rule 75 (exp_times_divides -> exp_lnot .)
    SLT             reduce using rule 75 (exp_times_divides -> exp_lnot .)
    SGT             reduce using rule 75 (exp_times_divides -> exp_lnot .)
    SGE             reduce using rule 75 (exp_times_divides -> exp_lnot .)
    SLE             reduce using rule 75 (exp_times_divides -> exp_lnot .)
    EQ              reduce using rule 75 (exp_times_divides -> exp_lnot .)
    NE              reduce using rule 75 (exp_times_divides -> exp_lnot .)
    SEQ             reduce using rule 75 (exp_times_divides -> exp_lnot .)
    SNE             reduce using rule 75 (exp_times_divides -> exp_lnot .)
    CMP             reduce using rule 75 (exp_times_divides -> exp_lnot .)
    AND             reduce using rule 75 (exp_times_divides -> exp_lnot .)
    OR              reduce using rule 75 (exp_times_divides -> exp_lnot .)
    LAND            reduce using rule 75 (exp_times_divides -> exp_lnot .)
    LOR             reduce using rule 75 (exp_times_divides -> exp_lnot .)
    SEMICOLON       reduce using rule 75 (exp_times_divides -> exp_lnot .)
    RPAREN          reduce using rule 75 (exp_times_divides -> exp_lnot .)
    COMMA           reduce using rule 75 (exp_times_divides -> exp_lnot .)


state 32

    (76) exp_lnot -> XOR . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    SEMICOLON       reduce using rule 78 (exp_decrement_increment -> .)
    RPAREN          reduce using rule 78 (exp_decrement_increment -> .)
    COMMA           reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    ID_SC           shift and go to state 88
    LPAREN          shift and go to state 13
    ID_LI           shift and go to state 89
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 12

    exp_lnot                       shift and go to state 87
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36
    call                           shift and go to state 46

state 33

    (77) exp_lnot -> exp_decrement_increment .

    TIMES           reduce using rule 77 (exp_lnot -> exp_decrement_increment .)
    DIVIDE          reduce using rule 77 (exp_lnot -> exp_decrement_increment .)
    MODULO          reduce using rule 77 (exp_lnot -> exp_decrement_increment .)
    PLUS            reduce using rule 77 (exp_lnot -> exp_decrement_increment .)
    MINUS           reduce using rule 77 (exp_lnot -> exp_decrement_increment .)
    GT              reduce using rule 77 (exp_lnot -> exp_decrement_increment .)
    LT              reduce using rule 77 (exp_lnot -> exp_decrement_increment .)
    GE              reduce using rule 77 (exp_lnot -> exp_decrement_increment .)
    LE              reduce using rule 77 (exp_lnot -> exp_decrement_increment .)
    SLT             reduce using rule 77 (exp_lnot -> exp_decrement_increment .)
    SGT             reduce using rule 77 (exp_lnot -> exp_decrement_increment .)
    SGE             reduce using rule 77 (exp_lnot -> exp_decrement_increment .)
    SLE             reduce using rule 77 (exp_lnot -> exp_decrement_increment .)
    EQ              reduce using rule 77 (exp_lnot -> exp_decrement_increment .)
    NE              reduce using rule 77 (exp_lnot -> exp_decrement_increment .)
    SEQ             reduce using rule 77 (exp_lnot -> exp_decrement_increment .)
    SNE             reduce using rule 77 (exp_lnot -> exp_decrement_increment .)
    CMP             reduce using rule 77 (exp_lnot -> exp_decrement_increment .)
    AND             reduce using rule 77 (exp_lnot -> exp_decrement_increment .)
    OR              reduce using rule 77 (exp_lnot -> exp_decrement_increment .)
    LAND            reduce using rule 77 (exp_lnot -> exp_decrement_increment .)
    LOR             reduce using rule 77 (exp_lnot -> exp_decrement_increment .)
    SEMICOLON       reduce using rule 77 (exp_lnot -> exp_decrement_increment .)
    RPAREN          reduce using rule 77 (exp_lnot -> exp_decrement_increment .)
    COMMA           reduce using rule 77 (exp_lnot -> exp_decrement_increment .)


state 34

    (79) exp_decrement_increment -> INCREMENT . ID_SC

    ID_SC           shift and go to state 90


state 35

    (80) exp_decrement_increment -> DECREMENT . ID_SC

    ID_SC           shift and go to state 91


state 36

    (83) exp_decrement_increment -> exp_lastlayer .

    TIMES           reduce using rule 83 (exp_decrement_increment -> exp_lastlayer .)
    DIVIDE          reduce using rule 83 (exp_decrement_increment -> exp_lastlayer .)
    MODULO          reduce using rule 83 (exp_decrement_increment -> exp_lastlayer .)
    PLUS            reduce using rule 83 (exp_decrement_increment -> exp_lastlayer .)
    MINUS           reduce using rule 83 (exp_decrement_increment -> exp_lastlayer .)
    GT              reduce using rule 83 (exp_decrement_increment -> exp_lastlayer .)
    LT              reduce using rule 83 (exp_decrement_increment -> exp_lastlayer .)
    GE              reduce using rule 83 (exp_decrement_increment -> exp_lastlayer .)
    LE              reduce using rule 83 (exp_decrement_increment -> exp_lastlayer .)
    SLT             reduce using rule 83 (exp_decrement_increment -> exp_lastlayer .)
    SGT             reduce using rule 83 (exp_decrement_increment -> exp_lastlayer .)
    SGE             reduce using rule 83 (exp_decrement_increment -> exp_lastlayer .)
    SLE             reduce using rule 83 (exp_decrement_increment -> exp_lastlayer .)
    EQ              reduce using rule 83 (exp_decrement_increment -> exp_lastlayer .)
    NE              reduce using rule 83 (exp_decrement_increment -> exp_lastlayer .)
    SEQ             reduce using rule 83 (exp_decrement_increment -> exp_lastlayer .)
    SNE             reduce using rule 83 (exp_decrement_increment -> exp_lastlayer .)
    CMP             reduce using rule 83 (exp_decrement_increment -> exp_lastlayer .)
    AND             reduce using rule 83 (exp_decrement_increment -> exp_lastlayer .)
    OR              reduce using rule 83 (exp_decrement_increment -> exp_lastlayer .)
    LAND            reduce using rule 83 (exp_decrement_increment -> exp_lastlayer .)
    LOR             reduce using rule 83 (exp_decrement_increment -> exp_lastlayer .)
    SEMICOLON       reduce using rule 83 (exp_decrement_increment -> exp_lastlayer .)
    RPAREN          reduce using rule 83 (exp_decrement_increment -> exp_lastlayer .)
    COMMA           reduce using rule 83 (exp_decrement_increment -> exp_lastlayer .)


state 37

    (87) exp_lastlayer -> NUMBER .

    TIMES           reduce using rule 87 (exp_lastlayer -> NUMBER .)
    DIVIDE          reduce using rule 87 (exp_lastlayer -> NUMBER .)
    MODULO          reduce using rule 87 (exp_lastlayer -> NUMBER .)
    PLUS            reduce using rule 87 (exp_lastlayer -> NUMBER .)
    MINUS           reduce using rule 87 (exp_lastlayer -> NUMBER .)
    GT              reduce using rule 87 (exp_lastlayer -> NUMBER .)
    LT              reduce using rule 87 (exp_lastlayer -> NUMBER .)
    GE              reduce using rule 87 (exp_lastlayer -> NUMBER .)
    LE              reduce using rule 87 (exp_lastlayer -> NUMBER .)
    SLT             reduce using rule 87 (exp_lastlayer -> NUMBER .)
    SGT             reduce using rule 87 (exp_lastlayer -> NUMBER .)
    SGE             reduce using rule 87 (exp_lastlayer -> NUMBER .)
    SLE             reduce using rule 87 (exp_lastlayer -> NUMBER .)
    EQ              reduce using rule 87 (exp_lastlayer -> NUMBER .)
    NE              reduce using rule 87 (exp_lastlayer -> NUMBER .)
    SEQ             reduce using rule 87 (exp_lastlayer -> NUMBER .)
    SNE             reduce using rule 87 (exp_lastlayer -> NUMBER .)
    CMP             reduce using rule 87 (exp_lastlayer -> NUMBER .)
    AND             reduce using rule 87 (exp_lastlayer -> NUMBER .)
    OR              reduce using rule 87 (exp_lastlayer -> NUMBER .)
    LAND            reduce using rule 87 (exp_lastlayer -> NUMBER .)
    LOR             reduce using rule 87 (exp_lastlayer -> NUMBER .)
    SEMICOLON       reduce using rule 87 (exp_lastlayer -> NUMBER .)
    RPAREN          reduce using rule 87 (exp_lastlayer -> NUMBER .)
    COMMA           reduce using rule 87 (exp_lastlayer -> NUMBER .)


state 38

    (89) exp_lastlayer -> TRUE .

    TIMES           reduce using rule 89 (exp_lastlayer -> TRUE .)
    DIVIDE          reduce using rule 89 (exp_lastlayer -> TRUE .)
    MODULO          reduce using rule 89 (exp_lastlayer -> TRUE .)
    PLUS            reduce using rule 89 (exp_lastlayer -> TRUE .)
    MINUS           reduce using rule 89 (exp_lastlayer -> TRUE .)
    GT              reduce using rule 89 (exp_lastlayer -> TRUE .)
    LT              reduce using rule 89 (exp_lastlayer -> TRUE .)
    GE              reduce using rule 89 (exp_lastlayer -> TRUE .)
    LE              reduce using rule 89 (exp_lastlayer -> TRUE .)
    SLT             reduce using rule 89 (exp_lastlayer -> TRUE .)
    SGT             reduce using rule 89 (exp_lastlayer -> TRUE .)
    SGE             reduce using rule 89 (exp_lastlayer -> TRUE .)
    SLE             reduce using rule 89 (exp_lastlayer -> TRUE .)
    EQ              reduce using rule 89 (exp_lastlayer -> TRUE .)
    NE              reduce using rule 89 (exp_lastlayer -> TRUE .)
    SEQ             reduce using rule 89 (exp_lastlayer -> TRUE .)
    SNE             reduce using rule 89 (exp_lastlayer -> TRUE .)
    CMP             reduce using rule 89 (exp_lastlayer -> TRUE .)
    AND             reduce using rule 89 (exp_lastlayer -> TRUE .)
    OR              reduce using rule 89 (exp_lastlayer -> TRUE .)
    LAND            reduce using rule 89 (exp_lastlayer -> TRUE .)
    LOR             reduce using rule 89 (exp_lastlayer -> TRUE .)
    SEMICOLON       reduce using rule 89 (exp_lastlayer -> TRUE .)
    RPAREN          reduce using rule 89 (exp_lastlayer -> TRUE .)
    COMMA           reduce using rule 89 (exp_lastlayer -> TRUE .)


state 39

    (90) exp_lastlayer -> FALSE .

    TIMES           reduce using rule 90 (exp_lastlayer -> FALSE .)
    DIVIDE          reduce using rule 90 (exp_lastlayer -> FALSE .)
    MODULO          reduce using rule 90 (exp_lastlayer -> FALSE .)
    PLUS            reduce using rule 90 (exp_lastlayer -> FALSE .)
    MINUS           reduce using rule 90 (exp_lastlayer -> FALSE .)
    GT              reduce using rule 90 (exp_lastlayer -> FALSE .)
    LT              reduce using rule 90 (exp_lastlayer -> FALSE .)
    GE              reduce using rule 90 (exp_lastlayer -> FALSE .)
    LE              reduce using rule 90 (exp_lastlayer -> FALSE .)
    SLT             reduce using rule 90 (exp_lastlayer -> FALSE .)
    SGT             reduce using rule 90 (exp_lastlayer -> FALSE .)
    SGE             reduce using rule 90 (exp_lastlayer -> FALSE .)
    SLE             reduce using rule 90 (exp_lastlayer -> FALSE .)
    EQ              reduce using rule 90 (exp_lastlayer -> FALSE .)
    NE              reduce using rule 90 (exp_lastlayer -> FALSE .)
    SEQ             reduce using rule 90 (exp_lastlayer -> FALSE .)
    SNE             reduce using rule 90 (exp_lastlayer -> FALSE .)
    CMP             reduce using rule 90 (exp_lastlayer -> FALSE .)
    AND             reduce using rule 90 (exp_lastlayer -> FALSE .)
    OR              reduce using rule 90 (exp_lastlayer -> FALSE .)
    LAND            reduce using rule 90 (exp_lastlayer -> FALSE .)
    LOR             reduce using rule 90 (exp_lastlayer -> FALSE .)
    SEMICOLON       reduce using rule 90 (exp_lastlayer -> FALSE .)
    RPAREN          reduce using rule 90 (exp_lastlayer -> FALSE .)
    COMMA           reduce using rule 90 (exp_lastlayer -> FALSE .)


state 40

    (1) init -> command init .

    $end            reduce using rule 1 (init -> command init .)


state 41

    (3) init -> function init .

    $end            reduce using rule 3 (init -> function init .)


state 42

    (9) command -> exp SEMICOLON .

    RETURN          reduce using rule 9 (command -> exp SEMICOLON .)
    BREAK           reduce using rule 9 (command -> exp SEMICOLON .)
    CONTINUE        reduce using rule 9 (command -> exp SEMICOLON .)
    SUB             reduce using rule 9 (command -> exp SEMICOLON .)
    IF              reduce using rule 9 (command -> exp SEMICOLON .)
    ID_SC           reduce using rule 9 (command -> exp SEMICOLON .)
    ID_LI           reduce using rule 9 (command -> exp SEMICOLON .)
    ID              reduce using rule 9 (command -> exp SEMICOLON .)
    FOR             reduce using rule 9 (command -> exp SEMICOLON .)
    DO              reduce using rule 9 (command -> exp SEMICOLON .)
    WHILE           reduce using rule 9 (command -> exp SEMICOLON .)
    XOR             reduce using rule 9 (command -> exp SEMICOLON .)
    INCREMENT       reduce using rule 9 (command -> exp SEMICOLON .)
    DECREMENT       reduce using rule 9 (command -> exp SEMICOLON .)
    LPAREN          reduce using rule 9 (command -> exp SEMICOLON .)
    NUMBER          reduce using rule 9 (command -> exp SEMICOLON .)
    TRUE            reduce using rule 9 (command -> exp SEMICOLON .)
    FALSE           reduce using rule 9 (command -> exp SEMICOLON .)
    SEMICOLON       reduce using rule 9 (command -> exp SEMICOLON .)
    LOR             reduce using rule 9 (command -> exp SEMICOLON .)
    LAND            reduce using rule 9 (command -> exp SEMICOLON .)
    OR              reduce using rule 9 (command -> exp SEMICOLON .)
    AND             reduce using rule 9 (command -> exp SEMICOLON .)
    EQ              reduce using rule 9 (command -> exp SEMICOLON .)
    NE              reduce using rule 9 (command -> exp SEMICOLON .)
    SEQ             reduce using rule 9 (command -> exp SEMICOLON .)
    SNE             reduce using rule 9 (command -> exp SEMICOLON .)
    CMP             reduce using rule 9 (command -> exp SEMICOLON .)
    GT              reduce using rule 9 (command -> exp SEMICOLON .)
    LT              reduce using rule 9 (command -> exp SEMICOLON .)
    GE              reduce using rule 9 (command -> exp SEMICOLON .)
    LE              reduce using rule 9 (command -> exp SEMICOLON .)
    SLT             reduce using rule 9 (command -> exp SEMICOLON .)
    SGT             reduce using rule 9 (command -> exp SEMICOLON .)
    SGE             reduce using rule 9 (command -> exp SEMICOLON .)
    SLE             reduce using rule 9 (command -> exp SEMICOLON .)
    PLUS            reduce using rule 9 (command -> exp SEMICOLON .)
    MINUS           reduce using rule 9 (command -> exp SEMICOLON .)
    TIMES           reduce using rule 9 (command -> exp SEMICOLON .)
    DIVIDE          reduce using rule 9 (command -> exp SEMICOLON .)
    MODULO          reduce using rule 9 (command -> exp SEMICOLON .)
    $end            reduce using rule 9 (command -> exp SEMICOLON .)
    RBRACE          reduce using rule 9 (command -> exp SEMICOLON .)


state 43

    (10) command -> call SEMICOLON .

    RETURN          reduce using rule 10 (command -> call SEMICOLON .)
    BREAK           reduce using rule 10 (command -> call SEMICOLON .)
    CONTINUE        reduce using rule 10 (command -> call SEMICOLON .)
    SUB             reduce using rule 10 (command -> call SEMICOLON .)
    IF              reduce using rule 10 (command -> call SEMICOLON .)
    ID_SC           reduce using rule 10 (command -> call SEMICOLON .)
    ID_LI           reduce using rule 10 (command -> call SEMICOLON .)
    ID              reduce using rule 10 (command -> call SEMICOLON .)
    FOR             reduce using rule 10 (command -> call SEMICOLON .)
    DO              reduce using rule 10 (command -> call SEMICOLON .)
    WHILE           reduce using rule 10 (command -> call SEMICOLON .)
    XOR             reduce using rule 10 (command -> call SEMICOLON .)
    INCREMENT       reduce using rule 10 (command -> call SEMICOLON .)
    DECREMENT       reduce using rule 10 (command -> call SEMICOLON .)
    LPAREN          reduce using rule 10 (command -> call SEMICOLON .)
    NUMBER          reduce using rule 10 (command -> call SEMICOLON .)
    TRUE            reduce using rule 10 (command -> call SEMICOLON .)
    FALSE           reduce using rule 10 (command -> call SEMICOLON .)
    SEMICOLON       reduce using rule 10 (command -> call SEMICOLON .)
    LOR             reduce using rule 10 (command -> call SEMICOLON .)
    LAND            reduce using rule 10 (command -> call SEMICOLON .)
    OR              reduce using rule 10 (command -> call SEMICOLON .)
    AND             reduce using rule 10 (command -> call SEMICOLON .)
    EQ              reduce using rule 10 (command -> call SEMICOLON .)
    NE              reduce using rule 10 (command -> call SEMICOLON .)
    SEQ             reduce using rule 10 (command -> call SEMICOLON .)
    SNE             reduce using rule 10 (command -> call SEMICOLON .)
    CMP             reduce using rule 10 (command -> call SEMICOLON .)
    GT              reduce using rule 10 (command -> call SEMICOLON .)
    LT              reduce using rule 10 (command -> call SEMICOLON .)
    GE              reduce using rule 10 (command -> call SEMICOLON .)
    LE              reduce using rule 10 (command -> call SEMICOLON .)
    SLT             reduce using rule 10 (command -> call SEMICOLON .)
    SGT             reduce using rule 10 (command -> call SEMICOLON .)
    SGE             reduce using rule 10 (command -> call SEMICOLON .)
    SLE             reduce using rule 10 (command -> call SEMICOLON .)
    PLUS            reduce using rule 10 (command -> call SEMICOLON .)
    MINUS           reduce using rule 10 (command -> call SEMICOLON .)
    TIMES           reduce using rule 10 (command -> call SEMICOLON .)
    DIVIDE          reduce using rule 10 (command -> call SEMICOLON .)
    MODULO          reduce using rule 10 (command -> call SEMICOLON .)
    $end            reduce using rule 10 (command -> call SEMICOLON .)
    RBRACE          reduce using rule 10 (command -> call SEMICOLON .)


state 44

    (11) command -> RETURN return . SEMICOLON

    SEMICOLON       shift and go to state 92


state 45

    (37) return -> exp .

    SEMICOLON       reduce using rule 37 (return -> exp .)


state 46

    (88) exp_lastlayer -> call .

    TIMES           reduce using rule 88 (exp_lastlayer -> call .)
    DIVIDE          reduce using rule 88 (exp_lastlayer -> call .)
    MODULO          reduce using rule 88 (exp_lastlayer -> call .)
    PLUS            reduce using rule 88 (exp_lastlayer -> call .)
    MINUS           reduce using rule 88 (exp_lastlayer -> call .)
    GT              reduce using rule 88 (exp_lastlayer -> call .)
    LT              reduce using rule 88 (exp_lastlayer -> call .)
    GE              reduce using rule 88 (exp_lastlayer -> call .)
    LE              reduce using rule 88 (exp_lastlayer -> call .)
    SLT             reduce using rule 88 (exp_lastlayer -> call .)
    SGT             reduce using rule 88 (exp_lastlayer -> call .)
    SGE             reduce using rule 88 (exp_lastlayer -> call .)
    SLE             reduce using rule 88 (exp_lastlayer -> call .)
    EQ              reduce using rule 88 (exp_lastlayer -> call .)
    NE              reduce using rule 88 (exp_lastlayer -> call .)
    SEQ             reduce using rule 88 (exp_lastlayer -> call .)
    SNE             reduce using rule 88 (exp_lastlayer -> call .)
    CMP             reduce using rule 88 (exp_lastlayer -> call .)
    AND             reduce using rule 88 (exp_lastlayer -> call .)
    OR              reduce using rule 88 (exp_lastlayer -> call .)
    LAND            reduce using rule 88 (exp_lastlayer -> call .)
    LOR             reduce using rule 88 (exp_lastlayer -> call .)
    SEMICOLON       reduce using rule 88 (exp_lastlayer -> call .)
    RPAREN          reduce using rule 88 (exp_lastlayer -> call .)
    COMMA           reduce using rule 88 (exp_lastlayer -> call .)


state 47

    (12) command -> BREAK SEMICOLON .

    RETURN          reduce using rule 12 (command -> BREAK SEMICOLON .)
    BREAK           reduce using rule 12 (command -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 12 (command -> BREAK SEMICOLON .)
    SUB             reduce using rule 12 (command -> BREAK SEMICOLON .)
    IF              reduce using rule 12 (command -> BREAK SEMICOLON .)
    ID_SC           reduce using rule 12 (command -> BREAK SEMICOLON .)
    ID_LI           reduce using rule 12 (command -> BREAK SEMICOLON .)
    ID              reduce using rule 12 (command -> BREAK SEMICOLON .)
    FOR             reduce using rule 12 (command -> BREAK SEMICOLON .)
    DO              reduce using rule 12 (command -> BREAK SEMICOLON .)
    WHILE           reduce using rule 12 (command -> BREAK SEMICOLON .)
    XOR             reduce using rule 12 (command -> BREAK SEMICOLON .)
    INCREMENT       reduce using rule 12 (command -> BREAK SEMICOLON .)
    DECREMENT       reduce using rule 12 (command -> BREAK SEMICOLON .)
    LPAREN          reduce using rule 12 (command -> BREAK SEMICOLON .)
    NUMBER          reduce using rule 12 (command -> BREAK SEMICOLON .)
    TRUE            reduce using rule 12 (command -> BREAK SEMICOLON .)
    FALSE           reduce using rule 12 (command -> BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 12 (command -> BREAK SEMICOLON .)
    LOR             reduce using rule 12 (command -> BREAK SEMICOLON .)
    LAND            reduce using rule 12 (command -> BREAK SEMICOLON .)
    OR              reduce using rule 12 (command -> BREAK SEMICOLON .)
    AND             reduce using rule 12 (command -> BREAK SEMICOLON .)
    EQ              reduce using rule 12 (command -> BREAK SEMICOLON .)
    NE              reduce using rule 12 (command -> BREAK SEMICOLON .)
    SEQ             reduce using rule 12 (command -> BREAK SEMICOLON .)
    SNE             reduce using rule 12 (command -> BREAK SEMICOLON .)
    CMP             reduce using rule 12 (command -> BREAK SEMICOLON .)
    GT              reduce using rule 12 (command -> BREAK SEMICOLON .)
    LT              reduce using rule 12 (command -> BREAK SEMICOLON .)
    GE              reduce using rule 12 (command -> BREAK SEMICOLON .)
    LE              reduce using rule 12 (command -> BREAK SEMICOLON .)
    SLT             reduce using rule 12 (command -> BREAK SEMICOLON .)
    SGT             reduce using rule 12 (command -> BREAK SEMICOLON .)
    SGE             reduce using rule 12 (command -> BREAK SEMICOLON .)
    SLE             reduce using rule 12 (command -> BREAK SEMICOLON .)
    PLUS            reduce using rule 12 (command -> BREAK SEMICOLON .)
    MINUS           reduce using rule 12 (command -> BREAK SEMICOLON .)
    TIMES           reduce using rule 12 (command -> BREAK SEMICOLON .)
    DIVIDE          reduce using rule 12 (command -> BREAK SEMICOLON .)
    MODULO          reduce using rule 12 (command -> BREAK SEMICOLON .)
    $end            reduce using rule 12 (command -> BREAK SEMICOLON .)
    RBRACE          reduce using rule 12 (command -> BREAK SEMICOLON .)


state 48

    (13) command -> CONTINUE SEMICOLON .

    RETURN          reduce using rule 13 (command -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 13 (command -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 13 (command -> CONTINUE SEMICOLON .)
    SUB             reduce using rule 13 (command -> CONTINUE SEMICOLON .)
    IF              reduce using rule 13 (command -> CONTINUE SEMICOLON .)
    ID_SC           reduce using rule 13 (command -> CONTINUE SEMICOLON .)
    ID_LI           reduce using rule 13 (command -> CONTINUE SEMICOLON .)
    ID              reduce using rule 13 (command -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 13 (command -> CONTINUE SEMICOLON .)
    DO              reduce using rule 13 (command -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 13 (command -> CONTINUE SEMICOLON .)
    XOR             reduce using rule 13 (command -> CONTINUE SEMICOLON .)
    INCREMENT       reduce using rule 13 (command -> CONTINUE SEMICOLON .)
    DECREMENT       reduce using rule 13 (command -> CONTINUE SEMICOLON .)
    LPAREN          reduce using rule 13 (command -> CONTINUE SEMICOLON .)
    NUMBER          reduce using rule 13 (command -> CONTINUE SEMICOLON .)
    TRUE            reduce using rule 13 (command -> CONTINUE SEMICOLON .)
    FALSE           reduce using rule 13 (command -> CONTINUE SEMICOLON .)
    SEMICOLON       reduce using rule 13 (command -> CONTINUE SEMICOLON .)
    LOR             reduce using rule 13 (command -> CONTINUE SEMICOLON .)
    LAND            reduce using rule 13 (command -> CONTINUE SEMICOLON .)
    OR              reduce using rule 13 (command -> CONTINUE SEMICOLON .)
    AND             reduce using rule 13 (command -> CONTINUE SEMICOLON .)
    EQ              reduce using rule 13 (command -> CONTINUE SEMICOLON .)
    NE              reduce using rule 13 (command -> CONTINUE SEMICOLON .)
    SEQ             reduce using rule 13 (command -> CONTINUE SEMICOLON .)
    SNE             reduce using rule 13 (command -> CONTINUE SEMICOLON .)
    CMP             reduce using rule 13 (command -> CONTINUE SEMICOLON .)
    GT              reduce using rule 13 (command -> CONTINUE SEMICOLON .)
    LT              reduce using rule 13 (command -> CONTINUE SEMICOLON .)
    GE              reduce using rule 13 (command -> CONTINUE SEMICOLON .)
    LE              reduce using rule 13 (command -> CONTINUE SEMICOLON .)
    SLT             reduce using rule 13 (command -> CONTINUE SEMICOLON .)
    SGT             reduce using rule 13 (command -> CONTINUE SEMICOLON .)
    SGE             reduce using rule 13 (command -> CONTINUE SEMICOLON .)
    SLE             reduce using rule 13 (command -> CONTINUE SEMICOLON .)
    PLUS            reduce using rule 13 (command -> CONTINUE SEMICOLON .)
    MINUS           reduce using rule 13 (command -> CONTINUE SEMICOLON .)
    TIMES           reduce using rule 13 (command -> CONTINUE SEMICOLON .)
    DIVIDE          reduce using rule 13 (command -> CONTINUE SEMICOLON .)
    MODULO          reduce using rule 13 (command -> CONTINUE SEMICOLON .)
    $end            reduce using rule 13 (command -> CONTINUE SEMICOLON .)
    RBRACE          reduce using rule 13 (command -> CONTINUE SEMICOLON .)


state 49

    (31) function -> SUB ID . LPAREN RPAREN LBRACE blockcode RBRACE
    (32) function -> SUB ID . LPAREN function_assignments RPAREN LBRACE blockcode RBRACE

    LPAREN          shift and go to state 93


state 50

    (35) call -> ID LPAREN . RPAREN
    (36) call -> ID LPAREN . function_assignments RPAREN
    (33) function_assignments -> . exp
    (34) function_assignments -> . exp COMMA function_assignments
    (38) exp -> . ID_SC EQUALS exp_lor
    (39) exp -> . ID_LI EQUALS exp_lor
    (40) exp -> . ID_SC MINUSEQUAL exp_lor
    (41) exp -> . ID_SC PLUSEQUAL exp_lor
    (42) exp -> . ID_SC MODEQUAL exp_lor
    (43) exp -> . ID_SC DIVEQUAL exp_lor
    (44) exp -> . ID_SC TIMESEQUAL exp_lor
    (45) exp -> . exp_lor
    (46) exp_lor -> . exp_lor LOR exp_land
    (47) exp_lor -> . exp_land
    (48) exp_land -> . exp_land LAND exp_or
    (49) exp_land -> . exp_or
    (50) exp_or -> . exp_or OR exp_and
    (51) exp_or -> . exp_and
    (52) exp_and -> . exp_and AND exp_comp
    (53) exp_and -> . exp_comp_eq
    (54) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (55) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (56) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (57) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (58) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (59) exp_comp_eq -> . exp_comp
    (60) exp_comp -> . exp_comp GT exp_plusminus
    (61) exp_comp -> . exp_comp LT exp_plusminus
    (62) exp_comp -> . exp_comp GE exp_plusminus
    (63) exp_comp -> . exp_comp LE exp_plusminus
    (64) exp_comp -> . exp_comp SLT exp_plusminus
    (65) exp_comp -> . exp_comp SGT exp_plusminus
    (66) exp_comp -> . exp_comp SGE exp_plusminus
    (67) exp_comp -> . exp_comp SLE exp_plusminus
    (68) exp_comp -> . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 94
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 20
    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    COMMA           reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 12

  ! RPAREN          [ reduce using rule 78 (exp_decrement_increment -> .) ]

    function_assignments           shift and go to state 95
    exp                            shift and go to state 96
    exp_lor                        shift and go to state 19
    exp_land                       shift and go to state 24
    exp_or                         shift and go to state 25
    exp_and                        shift and go to state 26
    exp_comp                       shift and go to state 27
    exp_comp_eq                    shift and go to state 28
    exp_plusminus                  shift and go to state 29
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36
    call                           shift and go to state 46

state 51

    (84) exp_lastlayer -> LPAREN exp . RPAREN

    RPAREN          shift and go to state 97


state 52

    (14) if -> IF LPAREN . exp RPAREN if_statement
    (38) exp -> . ID_SC EQUALS exp_lor
    (39) exp -> . ID_LI EQUALS exp_lor
    (40) exp -> . ID_SC MINUSEQUAL exp_lor
    (41) exp -> . ID_SC PLUSEQUAL exp_lor
    (42) exp -> . ID_SC MODEQUAL exp_lor
    (43) exp -> . ID_SC DIVEQUAL exp_lor
    (44) exp -> . ID_SC TIMESEQUAL exp_lor
    (45) exp -> . exp_lor
    (46) exp_lor -> . exp_lor LOR exp_land
    (47) exp_lor -> . exp_land
    (48) exp_land -> . exp_land LAND exp_or
    (49) exp_land -> . exp_or
    (50) exp_or -> . exp_or OR exp_and
    (51) exp_or -> . exp_and
    (52) exp_and -> . exp_and AND exp_comp
    (53) exp_and -> . exp_comp_eq
    (54) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (55) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (56) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (57) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (58) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (59) exp_comp_eq -> . exp_comp
    (60) exp_comp -> . exp_comp GT exp_plusminus
    (61) exp_comp -> . exp_comp LT exp_plusminus
    (62) exp_comp -> . exp_comp GE exp_plusminus
    (63) exp_comp -> . exp_comp LE exp_plusminus
    (64) exp_comp -> . exp_comp SLT exp_plusminus
    (65) exp_comp -> . exp_comp SGT exp_plusminus
    (66) exp_comp -> . exp_comp SGE exp_plusminus
    (67) exp_comp -> . exp_comp SLE exp_plusminus
    (68) exp_comp -> . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN

    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 20
    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    RPAREN          reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 12

    exp                            shift and go to state 98
    exp_lor                        shift and go to state 19
    exp_land                       shift and go to state 24
    exp_or                         shift and go to state 25
    exp_and                        shift and go to state 26
    exp_comp                       shift and go to state 27
    exp_comp_eq                    shift and go to state 28
    exp_plusminus                  shift and go to state 29
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36
    call                           shift and go to state 46

state 53

    (38) exp -> ID_SC EQUALS . exp_lor
    (46) exp_lor -> . exp_lor LOR exp_land
    (47) exp_lor -> . exp_land
    (48) exp_land -> . exp_land LAND exp_or
    (49) exp_land -> . exp_or
    (50) exp_or -> . exp_or OR exp_and
    (51) exp_or -> . exp_and
    (52) exp_and -> . exp_and AND exp_comp
    (53) exp_and -> . exp_comp_eq
    (54) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (55) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (56) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (57) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (58) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (59) exp_comp_eq -> . exp_comp
    (60) exp_comp -> . exp_comp GT exp_plusminus
    (61) exp_comp -> . exp_comp LT exp_plusminus
    (62) exp_comp -> . exp_comp GE exp_plusminus
    (63) exp_comp -> . exp_comp LE exp_plusminus
    (64) exp_comp -> . exp_comp SLT exp_plusminus
    (65) exp_comp -> . exp_comp SGT exp_plusminus
    (66) exp_comp -> . exp_comp SGE exp_plusminus
    (67) exp_comp -> . exp_comp SLE exp_plusminus
    (68) exp_comp -> . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    SEMICOLON       reduce using rule 78 (exp_decrement_increment -> .)
    RPAREN          reduce using rule 78 (exp_decrement_increment -> .)
    COMMA           reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    ID_SC           shift and go to state 88
    LPAREN          shift and go to state 13
    ID_LI           shift and go to state 89
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 12

    exp_lor                        shift and go to state 99
    exp_land                       shift and go to state 24
    exp_or                         shift and go to state 25
    exp_and                        shift and go to state 26
    exp_comp                       shift and go to state 27
    exp_comp_eq                    shift and go to state 28
    exp_plusminus                  shift and go to state 29
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36
    call                           shift and go to state 46

state 54

    (40) exp -> ID_SC MINUSEQUAL . exp_lor
    (46) exp_lor -> . exp_lor LOR exp_land
    (47) exp_lor -> . exp_land
    (48) exp_land -> . exp_land LAND exp_or
    (49) exp_land -> . exp_or
    (50) exp_or -> . exp_or OR exp_and
    (51) exp_or -> . exp_and
    (52) exp_and -> . exp_and AND exp_comp
    (53) exp_and -> . exp_comp_eq
    (54) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (55) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (56) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (57) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (58) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (59) exp_comp_eq -> . exp_comp
    (60) exp_comp -> . exp_comp GT exp_plusminus
    (61) exp_comp -> . exp_comp LT exp_plusminus
    (62) exp_comp -> . exp_comp GE exp_plusminus
    (63) exp_comp -> . exp_comp LE exp_plusminus
    (64) exp_comp -> . exp_comp SLT exp_plusminus
    (65) exp_comp -> . exp_comp SGT exp_plusminus
    (66) exp_comp -> . exp_comp SGE exp_plusminus
    (67) exp_comp -> . exp_comp SLE exp_plusminus
    (68) exp_comp -> . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    SEMICOLON       reduce using rule 78 (exp_decrement_increment -> .)
    RPAREN          reduce using rule 78 (exp_decrement_increment -> .)
    COMMA           reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    ID_SC           shift and go to state 88
    LPAREN          shift and go to state 13
    ID_LI           shift and go to state 89
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 12

    exp_lor                        shift and go to state 100
    exp_land                       shift and go to state 24
    exp_or                         shift and go to state 25
    exp_and                        shift and go to state 26
    exp_comp                       shift and go to state 27
    exp_comp_eq                    shift and go to state 28
    exp_plusminus                  shift and go to state 29
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36
    call                           shift and go to state 46

state 55

    (41) exp -> ID_SC PLUSEQUAL . exp_lor
    (46) exp_lor -> . exp_lor LOR exp_land
    (47) exp_lor -> . exp_land
    (48) exp_land -> . exp_land LAND exp_or
    (49) exp_land -> . exp_or
    (50) exp_or -> . exp_or OR exp_and
    (51) exp_or -> . exp_and
    (52) exp_and -> . exp_and AND exp_comp
    (53) exp_and -> . exp_comp_eq
    (54) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (55) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (56) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (57) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (58) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (59) exp_comp_eq -> . exp_comp
    (60) exp_comp -> . exp_comp GT exp_plusminus
    (61) exp_comp -> . exp_comp LT exp_plusminus
    (62) exp_comp -> . exp_comp GE exp_plusminus
    (63) exp_comp -> . exp_comp LE exp_plusminus
    (64) exp_comp -> . exp_comp SLT exp_plusminus
    (65) exp_comp -> . exp_comp SGT exp_plusminus
    (66) exp_comp -> . exp_comp SGE exp_plusminus
    (67) exp_comp -> . exp_comp SLE exp_plusminus
    (68) exp_comp -> . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    SEMICOLON       reduce using rule 78 (exp_decrement_increment -> .)
    RPAREN          reduce using rule 78 (exp_decrement_increment -> .)
    COMMA           reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    ID_SC           shift and go to state 88
    LPAREN          shift and go to state 13
    ID_LI           shift and go to state 89
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 12

    exp_lor                        shift and go to state 101
    exp_land                       shift and go to state 24
    exp_or                         shift and go to state 25
    exp_and                        shift and go to state 26
    exp_comp                       shift and go to state 27
    exp_comp_eq                    shift and go to state 28
    exp_plusminus                  shift and go to state 29
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36
    call                           shift and go to state 46

state 56

    (42) exp -> ID_SC MODEQUAL . exp_lor
    (46) exp_lor -> . exp_lor LOR exp_land
    (47) exp_lor -> . exp_land
    (48) exp_land -> . exp_land LAND exp_or
    (49) exp_land -> . exp_or
    (50) exp_or -> . exp_or OR exp_and
    (51) exp_or -> . exp_and
    (52) exp_and -> . exp_and AND exp_comp
    (53) exp_and -> . exp_comp_eq
    (54) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (55) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (56) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (57) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (58) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (59) exp_comp_eq -> . exp_comp
    (60) exp_comp -> . exp_comp GT exp_plusminus
    (61) exp_comp -> . exp_comp LT exp_plusminus
    (62) exp_comp -> . exp_comp GE exp_plusminus
    (63) exp_comp -> . exp_comp LE exp_plusminus
    (64) exp_comp -> . exp_comp SLT exp_plusminus
    (65) exp_comp -> . exp_comp SGT exp_plusminus
    (66) exp_comp -> . exp_comp SGE exp_plusminus
    (67) exp_comp -> . exp_comp SLE exp_plusminus
    (68) exp_comp -> . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    SEMICOLON       reduce using rule 78 (exp_decrement_increment -> .)
    RPAREN          reduce using rule 78 (exp_decrement_increment -> .)
    COMMA           reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    ID_SC           shift and go to state 88
    LPAREN          shift and go to state 13
    ID_LI           shift and go to state 89
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 12

    exp_lor                        shift and go to state 102
    exp_land                       shift and go to state 24
    exp_or                         shift and go to state 25
    exp_and                        shift and go to state 26
    exp_comp                       shift and go to state 27
    exp_comp_eq                    shift and go to state 28
    exp_plusminus                  shift and go to state 29
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36
    call                           shift and go to state 46

state 57

    (43) exp -> ID_SC DIVEQUAL . exp_lor
    (46) exp_lor -> . exp_lor LOR exp_land
    (47) exp_lor -> . exp_land
    (48) exp_land -> . exp_land LAND exp_or
    (49) exp_land -> . exp_or
    (50) exp_or -> . exp_or OR exp_and
    (51) exp_or -> . exp_and
    (52) exp_and -> . exp_and AND exp_comp
    (53) exp_and -> . exp_comp_eq
    (54) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (55) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (56) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (57) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (58) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (59) exp_comp_eq -> . exp_comp
    (60) exp_comp -> . exp_comp GT exp_plusminus
    (61) exp_comp -> . exp_comp LT exp_plusminus
    (62) exp_comp -> . exp_comp GE exp_plusminus
    (63) exp_comp -> . exp_comp LE exp_plusminus
    (64) exp_comp -> . exp_comp SLT exp_plusminus
    (65) exp_comp -> . exp_comp SGT exp_plusminus
    (66) exp_comp -> . exp_comp SGE exp_plusminus
    (67) exp_comp -> . exp_comp SLE exp_plusminus
    (68) exp_comp -> . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    SEMICOLON       reduce using rule 78 (exp_decrement_increment -> .)
    RPAREN          reduce using rule 78 (exp_decrement_increment -> .)
    COMMA           reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    ID_SC           shift and go to state 88
    LPAREN          shift and go to state 13
    ID_LI           shift and go to state 89
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 12

    exp_lor                        shift and go to state 103
    exp_land                       shift and go to state 24
    exp_or                         shift and go to state 25
    exp_and                        shift and go to state 26
    exp_comp                       shift and go to state 27
    exp_comp_eq                    shift and go to state 28
    exp_plusminus                  shift and go to state 29
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36
    call                           shift and go to state 46

state 58

    (44) exp -> ID_SC TIMESEQUAL . exp_lor
    (46) exp_lor -> . exp_lor LOR exp_land
    (47) exp_lor -> . exp_land
    (48) exp_land -> . exp_land LAND exp_or
    (49) exp_land -> . exp_or
    (50) exp_or -> . exp_or OR exp_and
    (51) exp_or -> . exp_and
    (52) exp_and -> . exp_and AND exp_comp
    (53) exp_and -> . exp_comp_eq
    (54) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (55) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (56) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (57) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (58) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (59) exp_comp_eq -> . exp_comp
    (60) exp_comp -> . exp_comp GT exp_plusminus
    (61) exp_comp -> . exp_comp LT exp_plusminus
    (62) exp_comp -> . exp_comp GE exp_plusminus
    (63) exp_comp -> . exp_comp LE exp_plusminus
    (64) exp_comp -> . exp_comp SLT exp_plusminus
    (65) exp_comp -> . exp_comp SGT exp_plusminus
    (66) exp_comp -> . exp_comp SGE exp_plusminus
    (67) exp_comp -> . exp_comp SLE exp_plusminus
    (68) exp_comp -> . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    SEMICOLON       reduce using rule 78 (exp_decrement_increment -> .)
    RPAREN          reduce using rule 78 (exp_decrement_increment -> .)
    COMMA           reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    ID_SC           shift and go to state 88
    LPAREN          shift and go to state 13
    ID_LI           shift and go to state 89
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 12

    exp_lor                        shift and go to state 104
    exp_land                       shift and go to state 24
    exp_or                         shift and go to state 25
    exp_and                        shift and go to state 26
    exp_comp                       shift and go to state 27
    exp_comp_eq                    shift and go to state 28
    exp_plusminus                  shift and go to state 29
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36
    call                           shift and go to state 46

state 59

    (81) exp_decrement_increment -> ID_SC INCREMENT .

    TIMES           reduce using rule 81 (exp_decrement_increment -> ID_SC INCREMENT .)
    DIVIDE          reduce using rule 81 (exp_decrement_increment -> ID_SC INCREMENT .)
    MODULO          reduce using rule 81 (exp_decrement_increment -> ID_SC INCREMENT .)
    PLUS            reduce using rule 81 (exp_decrement_increment -> ID_SC INCREMENT .)
    MINUS           reduce using rule 81 (exp_decrement_increment -> ID_SC INCREMENT .)
    GT              reduce using rule 81 (exp_decrement_increment -> ID_SC INCREMENT .)
    LT              reduce using rule 81 (exp_decrement_increment -> ID_SC INCREMENT .)
    GE              reduce using rule 81 (exp_decrement_increment -> ID_SC INCREMENT .)
    LE              reduce using rule 81 (exp_decrement_increment -> ID_SC INCREMENT .)
    SLT             reduce using rule 81 (exp_decrement_increment -> ID_SC INCREMENT .)
    SGT             reduce using rule 81 (exp_decrement_increment -> ID_SC INCREMENT .)
    SGE             reduce using rule 81 (exp_decrement_increment -> ID_SC INCREMENT .)
    SLE             reduce using rule 81 (exp_decrement_increment -> ID_SC INCREMENT .)
    EQ              reduce using rule 81 (exp_decrement_increment -> ID_SC INCREMENT .)
    NE              reduce using rule 81 (exp_decrement_increment -> ID_SC INCREMENT .)
    SEQ             reduce using rule 81 (exp_decrement_increment -> ID_SC INCREMENT .)
    SNE             reduce using rule 81 (exp_decrement_increment -> ID_SC INCREMENT .)
    CMP             reduce using rule 81 (exp_decrement_increment -> ID_SC INCREMENT .)
    AND             reduce using rule 81 (exp_decrement_increment -> ID_SC INCREMENT .)
    OR              reduce using rule 81 (exp_decrement_increment -> ID_SC INCREMENT .)
    LAND            reduce using rule 81 (exp_decrement_increment -> ID_SC INCREMENT .)
    LOR             reduce using rule 81 (exp_decrement_increment -> ID_SC INCREMENT .)
    SEMICOLON       reduce using rule 81 (exp_decrement_increment -> ID_SC INCREMENT .)
    RPAREN          reduce using rule 81 (exp_decrement_increment -> ID_SC INCREMENT .)
    COMMA           reduce using rule 81 (exp_decrement_increment -> ID_SC INCREMENT .)


state 60

    (82) exp_decrement_increment -> ID_SC DECREMENT .

    TIMES           reduce using rule 82 (exp_decrement_increment -> ID_SC DECREMENT .)
    DIVIDE          reduce using rule 82 (exp_decrement_increment -> ID_SC DECREMENT .)
    MODULO          reduce using rule 82 (exp_decrement_increment -> ID_SC DECREMENT .)
    PLUS            reduce using rule 82 (exp_decrement_increment -> ID_SC DECREMENT .)
    MINUS           reduce using rule 82 (exp_decrement_increment -> ID_SC DECREMENT .)
    GT              reduce using rule 82 (exp_decrement_increment -> ID_SC DECREMENT .)
    LT              reduce using rule 82 (exp_decrement_increment -> ID_SC DECREMENT .)
    GE              reduce using rule 82 (exp_decrement_increment -> ID_SC DECREMENT .)
    LE              reduce using rule 82 (exp_decrement_increment -> ID_SC DECREMENT .)
    SLT             reduce using rule 82 (exp_decrement_increment -> ID_SC DECREMENT .)
    SGT             reduce using rule 82 (exp_decrement_increment -> ID_SC DECREMENT .)
    SGE             reduce using rule 82 (exp_decrement_increment -> ID_SC DECREMENT .)
    SLE             reduce using rule 82 (exp_decrement_increment -> ID_SC DECREMENT .)
    EQ              reduce using rule 82 (exp_decrement_increment -> ID_SC DECREMENT .)
    NE              reduce using rule 82 (exp_decrement_increment -> ID_SC DECREMENT .)
    SEQ             reduce using rule 82 (exp_decrement_increment -> ID_SC DECREMENT .)
    SNE             reduce using rule 82 (exp_decrement_increment -> ID_SC DECREMENT .)
    CMP             reduce using rule 82 (exp_decrement_increment -> ID_SC DECREMENT .)
    AND             reduce using rule 82 (exp_decrement_increment -> ID_SC DECREMENT .)
    OR              reduce using rule 82 (exp_decrement_increment -> ID_SC DECREMENT .)
    LAND            reduce using rule 82 (exp_decrement_increment -> ID_SC DECREMENT .)
    LOR             reduce using rule 82 (exp_decrement_increment -> ID_SC DECREMENT .)
    SEMICOLON       reduce using rule 82 (exp_decrement_increment -> ID_SC DECREMENT .)
    RPAREN          reduce using rule 82 (exp_decrement_increment -> ID_SC DECREMENT .)
    COMMA           reduce using rule 82 (exp_decrement_increment -> ID_SC DECREMENT .)


state 61

    (46) exp_lor -> exp_lor LOR . exp_land
    (48) exp_land -> . exp_land LAND exp_or
    (49) exp_land -> . exp_or
    (50) exp_or -> . exp_or OR exp_and
    (51) exp_or -> . exp_and
    (52) exp_and -> . exp_and AND exp_comp
    (53) exp_and -> . exp_comp_eq
    (54) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (55) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (56) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (57) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (58) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (59) exp_comp_eq -> . exp_comp
    (60) exp_comp -> . exp_comp GT exp_plusminus
    (61) exp_comp -> . exp_comp LT exp_plusminus
    (62) exp_comp -> . exp_comp GE exp_plusminus
    (63) exp_comp -> . exp_comp LE exp_plusminus
    (64) exp_comp -> . exp_comp SLT exp_plusminus
    (65) exp_comp -> . exp_comp SGT exp_plusminus
    (66) exp_comp -> . exp_comp SGE exp_plusminus
    (67) exp_comp -> . exp_comp SLE exp_plusminus
    (68) exp_comp -> . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    SEMICOLON       reduce using rule 78 (exp_decrement_increment -> .)
    RPAREN          reduce using rule 78 (exp_decrement_increment -> .)
    COMMA           reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    ID_SC           shift and go to state 88
    LPAREN          shift and go to state 13
    ID_LI           shift and go to state 89
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 12

    exp_land                       shift and go to state 105
    exp_or                         shift and go to state 25
    exp_and                        shift and go to state 26
    exp_comp                       shift and go to state 27
    exp_comp_eq                    shift and go to state 28
    exp_plusminus                  shift and go to state 29
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36
    call                           shift and go to state 46

state 62

    (39) exp -> ID_LI EQUALS . exp_lor
    (46) exp_lor -> . exp_lor LOR exp_land
    (47) exp_lor -> . exp_land
    (48) exp_land -> . exp_land LAND exp_or
    (49) exp_land -> . exp_or
    (50) exp_or -> . exp_or OR exp_and
    (51) exp_or -> . exp_and
    (52) exp_and -> . exp_and AND exp_comp
    (53) exp_and -> . exp_comp_eq
    (54) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (55) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (56) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (57) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (58) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (59) exp_comp_eq -> . exp_comp
    (60) exp_comp -> . exp_comp GT exp_plusminus
    (61) exp_comp -> . exp_comp LT exp_plusminus
    (62) exp_comp -> . exp_comp GE exp_plusminus
    (63) exp_comp -> . exp_comp LE exp_plusminus
    (64) exp_comp -> . exp_comp SLT exp_plusminus
    (65) exp_comp -> . exp_comp SGT exp_plusminus
    (66) exp_comp -> . exp_comp SGE exp_plusminus
    (67) exp_comp -> . exp_comp SLE exp_plusminus
    (68) exp_comp -> . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    SEMICOLON       reduce using rule 78 (exp_decrement_increment -> .)
    RPAREN          reduce using rule 78 (exp_decrement_increment -> .)
    COMMA           reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    ID_SC           shift and go to state 88
    LPAREN          shift and go to state 13
    ID_LI           shift and go to state 89
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 12

    exp_lor                        shift and go to state 106
    exp_land                       shift and go to state 24
    exp_or                         shift and go to state 25
    exp_and                        shift and go to state 26
    exp_comp                       shift and go to state 27
    exp_comp_eq                    shift and go to state 28
    exp_plusminus                  shift and go to state 29
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36
    call                           shift and go to state 46

state 63

    (25) for -> FOR LPAREN . for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (26) for_assignments -> . exp
    (27) for_assignments -> . exp COMMA for_assignments
    (38) exp -> . ID_SC EQUALS exp_lor
    (39) exp -> . ID_LI EQUALS exp_lor
    (40) exp -> . ID_SC MINUSEQUAL exp_lor
    (41) exp -> . ID_SC PLUSEQUAL exp_lor
    (42) exp -> . ID_SC MODEQUAL exp_lor
    (43) exp -> . ID_SC DIVEQUAL exp_lor
    (44) exp -> . ID_SC TIMESEQUAL exp_lor
    (45) exp -> . exp_lor
    (46) exp_lor -> . exp_lor LOR exp_land
    (47) exp_lor -> . exp_land
    (48) exp_land -> . exp_land LAND exp_or
    (49) exp_land -> . exp_or
    (50) exp_or -> . exp_or OR exp_and
    (51) exp_or -> . exp_and
    (52) exp_and -> . exp_and AND exp_comp
    (53) exp_and -> . exp_comp_eq
    (54) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (55) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (56) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (57) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (58) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (59) exp_comp_eq -> . exp_comp
    (60) exp_comp -> . exp_comp GT exp_plusminus
    (61) exp_comp -> . exp_comp LT exp_plusminus
    (62) exp_comp -> . exp_comp GE exp_plusminus
    (63) exp_comp -> . exp_comp LE exp_plusminus
    (64) exp_comp -> . exp_comp SLT exp_plusminus
    (65) exp_comp -> . exp_comp SGT exp_plusminus
    (66) exp_comp -> . exp_comp SGE exp_plusminus
    (67) exp_comp -> . exp_comp SLE exp_plusminus
    (68) exp_comp -> . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN

    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 20
    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    COMMA           reduce using rule 78 (exp_decrement_increment -> .)
    SEMICOLON       reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 12

    for_assignments                shift and go to state 107
    exp                            shift and go to state 108
    exp_lor                        shift and go to state 19
    exp_land                       shift and go to state 24
    exp_or                         shift and go to state 25
    exp_and                        shift and go to state 26
    exp_comp                       shift and go to state 27
    exp_comp_eq                    shift and go to state 28
    exp_plusminus                  shift and go to state 29
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36
    call                           shift and go to state 46

state 64

    (28) dowhile -> DO LBRACE . blockcode RBRACE WHILE LPAREN exp RPAREN
    (5) blockcode -> . command
    (6) blockcode -> . blockcode command
    (7) command -> . interations
    (8) command -> . if
    (9) command -> . exp SEMICOLON
    (10) command -> . call SEMICOLON
    (11) command -> . RETURN return SEMICOLON
    (12) command -> . BREAK SEMICOLON
    (13) command -> . CONTINUE SEMICOLON
    (22) interations -> . for
    (23) interations -> . dowhile
    (24) interations -> . while
    (14) if -> . IF LPAREN exp RPAREN if_statement
    (38) exp -> . ID_SC EQUALS exp_lor
    (39) exp -> . ID_LI EQUALS exp_lor
    (40) exp -> . ID_SC MINUSEQUAL exp_lor
    (41) exp -> . ID_SC PLUSEQUAL exp_lor
    (42) exp -> . ID_SC MODEQUAL exp_lor
    (43) exp -> . ID_SC DIVEQUAL exp_lor
    (44) exp -> . ID_SC TIMESEQUAL exp_lor
    (45) exp -> . exp_lor
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN
    (25) for -> . FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (28) dowhile -> . DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN
    (29) while -> . WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE
    (30) while -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (46) exp_lor -> . exp_lor LOR exp_land
    (47) exp_lor -> . exp_land
    (48) exp_land -> . exp_land LAND exp_or
    (49) exp_land -> . exp_or
    (50) exp_or -> . exp_or OR exp_and
    (51) exp_or -> . exp_and
    (52) exp_and -> . exp_and AND exp_comp
    (53) exp_and -> . exp_comp_eq
    (54) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (55) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (56) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (57) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (58) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (59) exp_comp_eq -> . exp_comp
    (60) exp_comp -> . exp_comp GT exp_plusminus
    (61) exp_comp -> . exp_comp LT exp_plusminus
    (62) exp_comp -> . exp_comp GE exp_plusminus
    (63) exp_comp -> . exp_comp LE exp_plusminus
    (64) exp_comp -> . exp_comp SLT exp_plusminus
    (65) exp_comp -> . exp_comp SGT exp_plusminus
    (66) exp_comp -> . exp_comp SGE exp_plusminus
    (67) exp_comp -> . exp_comp SLE exp_plusminus
    (68) exp_comp -> . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE

    RETURN          shift and go to state 8
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    IF              shift and go to state 17
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 20
    ID              shift and go to state 12
    FOR             shift and go to state 21
    DO              shift and go to state 22
    WHILE           shift and go to state 23
    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    SEMICOLON       reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    blockcode                      shift and go to state 109
    exp                            shift and go to state 6
    command                        shift and go to state 110
    interations                    shift and go to state 4
    if                             shift and go to state 5
    call                           shift and go to state 7
    for                            shift and go to state 14
    dowhile                        shift and go to state 15
    while                          shift and go to state 16
    exp_lor                        shift and go to state 19
    exp_land                       shift and go to state 24
    exp_or                         shift and go to state 25
    exp_and                        shift and go to state 26
    exp_comp                       shift and go to state 27
    exp_comp_eq                    shift and go to state 28
    exp_plusminus                  shift and go to state 29
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36

state 65

    (29) while -> WHILE LPAREN . exp RPAREN LBRACE blockcode RBRACE
    (30) while -> WHILE LPAREN . exp RPAREN LBRACE RBRACE
    (38) exp -> . ID_SC EQUALS exp_lor
    (39) exp -> . ID_LI EQUALS exp_lor
    (40) exp -> . ID_SC MINUSEQUAL exp_lor
    (41) exp -> . ID_SC PLUSEQUAL exp_lor
    (42) exp -> . ID_SC MODEQUAL exp_lor
    (43) exp -> . ID_SC DIVEQUAL exp_lor
    (44) exp -> . ID_SC TIMESEQUAL exp_lor
    (45) exp -> . exp_lor
    (46) exp_lor -> . exp_lor LOR exp_land
    (47) exp_lor -> . exp_land
    (48) exp_land -> . exp_land LAND exp_or
    (49) exp_land -> . exp_or
    (50) exp_or -> . exp_or OR exp_and
    (51) exp_or -> . exp_and
    (52) exp_and -> . exp_and AND exp_comp
    (53) exp_and -> . exp_comp_eq
    (54) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (55) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (56) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (57) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (58) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (59) exp_comp_eq -> . exp_comp
    (60) exp_comp -> . exp_comp GT exp_plusminus
    (61) exp_comp -> . exp_comp LT exp_plusminus
    (62) exp_comp -> . exp_comp GE exp_plusminus
    (63) exp_comp -> . exp_comp LE exp_plusminus
    (64) exp_comp -> . exp_comp SLT exp_plusminus
    (65) exp_comp -> . exp_comp SGT exp_plusminus
    (66) exp_comp -> . exp_comp SGE exp_plusminus
    (67) exp_comp -> . exp_comp SLE exp_plusminus
    (68) exp_comp -> . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN

    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 20
    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    RPAREN          reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 12

    exp                            shift and go to state 111
    exp_lor                        shift and go to state 19
    exp_land                       shift and go to state 24
    exp_or                         shift and go to state 25
    exp_and                        shift and go to state 26
    exp_comp                       shift and go to state 27
    exp_comp_eq                    shift and go to state 28
    exp_plusminus                  shift and go to state 29
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36
    call                           shift and go to state 46

state 66

    (48) exp_land -> exp_land LAND . exp_or
    (50) exp_or -> . exp_or OR exp_and
    (51) exp_or -> . exp_and
    (52) exp_and -> . exp_and AND exp_comp
    (53) exp_and -> . exp_comp_eq
    (54) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (55) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (56) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (57) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (58) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (59) exp_comp_eq -> . exp_comp
    (60) exp_comp -> . exp_comp GT exp_plusminus
    (61) exp_comp -> . exp_comp LT exp_plusminus
    (62) exp_comp -> . exp_comp GE exp_plusminus
    (63) exp_comp -> . exp_comp LE exp_plusminus
    (64) exp_comp -> . exp_comp SLT exp_plusminus
    (65) exp_comp -> . exp_comp SGT exp_plusminus
    (66) exp_comp -> . exp_comp SGE exp_plusminus
    (67) exp_comp -> . exp_comp SLE exp_plusminus
    (68) exp_comp -> . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    SEMICOLON       reduce using rule 78 (exp_decrement_increment -> .)
    RPAREN          reduce using rule 78 (exp_decrement_increment -> .)
    COMMA           reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    ID_SC           shift and go to state 88
    LPAREN          shift and go to state 13
    ID_LI           shift and go to state 89
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 12

    exp_or                         shift and go to state 112
    exp_and                        shift and go to state 26
    exp_comp                       shift and go to state 27
    exp_comp_eq                    shift and go to state 28
    exp_plusminus                  shift and go to state 29
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36
    call                           shift and go to state 46

state 67

    (50) exp_or -> exp_or OR . exp_and
    (52) exp_and -> . exp_and AND exp_comp
    (53) exp_and -> . exp_comp_eq
    (54) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (55) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (56) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (57) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (58) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (59) exp_comp_eq -> . exp_comp
    (60) exp_comp -> . exp_comp GT exp_plusminus
    (61) exp_comp -> . exp_comp LT exp_plusminus
    (62) exp_comp -> . exp_comp GE exp_plusminus
    (63) exp_comp -> . exp_comp LE exp_plusminus
    (64) exp_comp -> . exp_comp SLT exp_plusminus
    (65) exp_comp -> . exp_comp SGT exp_plusminus
    (66) exp_comp -> . exp_comp SGE exp_plusminus
    (67) exp_comp -> . exp_comp SLE exp_plusminus
    (68) exp_comp -> . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    SEMICOLON       reduce using rule 78 (exp_decrement_increment -> .)
    RPAREN          reduce using rule 78 (exp_decrement_increment -> .)
    COMMA           reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    ID_SC           shift and go to state 88
    LPAREN          shift and go to state 13
    ID_LI           shift and go to state 89
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 12

    exp_and                        shift and go to state 113
    exp_comp                       shift and go to state 27
    exp_comp_eq                    shift and go to state 28
    exp_plusminus                  shift and go to state 29
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36
    call                           shift and go to state 46

state 68

    (52) exp_and -> exp_and AND . exp_comp
    (60) exp_comp -> . exp_comp GT exp_plusminus
    (61) exp_comp -> . exp_comp LT exp_plusminus
    (62) exp_comp -> . exp_comp GE exp_plusminus
    (63) exp_comp -> . exp_comp LE exp_plusminus
    (64) exp_comp -> . exp_comp SLT exp_plusminus
    (65) exp_comp -> . exp_comp SGT exp_plusminus
    (66) exp_comp -> . exp_comp SGE exp_plusminus
    (67) exp_comp -> . exp_comp SLE exp_plusminus
    (68) exp_comp -> . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    SEMICOLON       reduce using rule 78 (exp_decrement_increment -> .)
    RPAREN          reduce using rule 78 (exp_decrement_increment -> .)
    COMMA           reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    ID_SC           shift and go to state 88
    LPAREN          shift and go to state 13
    ID_LI           shift and go to state 89
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 12

    exp_comp                       shift and go to state 114
    exp_plusminus                  shift and go to state 29
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36
    call                           shift and go to state 46

state 69

    (60) exp_comp -> exp_comp GT . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    SEMICOLON       reduce using rule 78 (exp_decrement_increment -> .)
    RPAREN          reduce using rule 78 (exp_decrement_increment -> .)
    COMMA           reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    ID_SC           shift and go to state 88
    LPAREN          shift and go to state 13
    ID_LI           shift and go to state 89
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 12

    exp_plusminus                  shift and go to state 115
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36
    call                           shift and go to state 46

state 70

    (61) exp_comp -> exp_comp LT . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    SEMICOLON       reduce using rule 78 (exp_decrement_increment -> .)
    RPAREN          reduce using rule 78 (exp_decrement_increment -> .)
    COMMA           reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    ID_SC           shift and go to state 88
    LPAREN          shift and go to state 13
    ID_LI           shift and go to state 89
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 12

    exp_plusminus                  shift and go to state 116
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36
    call                           shift and go to state 46

state 71

    (62) exp_comp -> exp_comp GE . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    SEMICOLON       reduce using rule 78 (exp_decrement_increment -> .)
    RPAREN          reduce using rule 78 (exp_decrement_increment -> .)
    COMMA           reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    ID_SC           shift and go to state 88
    LPAREN          shift and go to state 13
    ID_LI           shift and go to state 89
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 12

    exp_plusminus                  shift and go to state 117
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36
    call                           shift and go to state 46

state 72

    (63) exp_comp -> exp_comp LE . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    SEMICOLON       reduce using rule 78 (exp_decrement_increment -> .)
    RPAREN          reduce using rule 78 (exp_decrement_increment -> .)
    COMMA           reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    ID_SC           shift and go to state 88
    LPAREN          shift and go to state 13
    ID_LI           shift and go to state 89
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 12

    exp_plusminus                  shift and go to state 118
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36
    call                           shift and go to state 46

state 73

    (64) exp_comp -> exp_comp SLT . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    SEMICOLON       reduce using rule 78 (exp_decrement_increment -> .)
    RPAREN          reduce using rule 78 (exp_decrement_increment -> .)
    COMMA           reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    ID_SC           shift and go to state 88
    LPAREN          shift and go to state 13
    ID_LI           shift and go to state 89
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 12

    exp_plusminus                  shift and go to state 119
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36
    call                           shift and go to state 46

state 74

    (65) exp_comp -> exp_comp SGT . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    SEMICOLON       reduce using rule 78 (exp_decrement_increment -> .)
    RPAREN          reduce using rule 78 (exp_decrement_increment -> .)
    COMMA           reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    ID_SC           shift and go to state 88
    LPAREN          shift and go to state 13
    ID_LI           shift and go to state 89
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 12

    exp_plusminus                  shift and go to state 120
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36
    call                           shift and go to state 46

state 75

    (66) exp_comp -> exp_comp SGE . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    SEMICOLON       reduce using rule 78 (exp_decrement_increment -> .)
    RPAREN          reduce using rule 78 (exp_decrement_increment -> .)
    COMMA           reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    ID_SC           shift and go to state 88
    LPAREN          shift and go to state 13
    ID_LI           shift and go to state 89
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 12

    exp_plusminus                  shift and go to state 121
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36
    call                           shift and go to state 46

state 76

    (67) exp_comp -> exp_comp SLE . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    SEMICOLON       reduce using rule 78 (exp_decrement_increment -> .)
    RPAREN          reduce using rule 78 (exp_decrement_increment -> .)
    COMMA           reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    ID_SC           shift and go to state 88
    LPAREN          shift and go to state 13
    ID_LI           shift and go to state 89
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 12

    exp_plusminus                  shift and go to state 122
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36
    call                           shift and go to state 46

state 77

    (54) exp_comp_eq -> exp_comp_eq EQ . exp_comp
    (60) exp_comp -> . exp_comp GT exp_plusminus
    (61) exp_comp -> . exp_comp LT exp_plusminus
    (62) exp_comp -> . exp_comp GE exp_plusminus
    (63) exp_comp -> . exp_comp LE exp_plusminus
    (64) exp_comp -> . exp_comp SLT exp_plusminus
    (65) exp_comp -> . exp_comp SGT exp_plusminus
    (66) exp_comp -> . exp_comp SGE exp_plusminus
    (67) exp_comp -> . exp_comp SLE exp_plusminus
    (68) exp_comp -> . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    SEMICOLON       reduce using rule 78 (exp_decrement_increment -> .)
    RPAREN          reduce using rule 78 (exp_decrement_increment -> .)
    COMMA           reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    ID_SC           shift and go to state 88
    LPAREN          shift and go to state 13
    ID_LI           shift and go to state 89
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 12

    exp_comp                       shift and go to state 123
    exp_plusminus                  shift and go to state 29
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36
    call                           shift and go to state 46

state 78

    (55) exp_comp_eq -> exp_comp_eq NE . exp_comp
    (60) exp_comp -> . exp_comp GT exp_plusminus
    (61) exp_comp -> . exp_comp LT exp_plusminus
    (62) exp_comp -> . exp_comp GE exp_plusminus
    (63) exp_comp -> . exp_comp LE exp_plusminus
    (64) exp_comp -> . exp_comp SLT exp_plusminus
    (65) exp_comp -> . exp_comp SGT exp_plusminus
    (66) exp_comp -> . exp_comp SGE exp_plusminus
    (67) exp_comp -> . exp_comp SLE exp_plusminus
    (68) exp_comp -> . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    SEMICOLON       reduce using rule 78 (exp_decrement_increment -> .)
    RPAREN          reduce using rule 78 (exp_decrement_increment -> .)
    COMMA           reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    ID_SC           shift and go to state 88
    LPAREN          shift and go to state 13
    ID_LI           shift and go to state 89
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 12

    exp_comp                       shift and go to state 124
    exp_plusminus                  shift and go to state 29
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36
    call                           shift and go to state 46

state 79

    (56) exp_comp_eq -> exp_comp_eq SEQ . exp_comp
    (60) exp_comp -> . exp_comp GT exp_plusminus
    (61) exp_comp -> . exp_comp LT exp_plusminus
    (62) exp_comp -> . exp_comp GE exp_plusminus
    (63) exp_comp -> . exp_comp LE exp_plusminus
    (64) exp_comp -> . exp_comp SLT exp_plusminus
    (65) exp_comp -> . exp_comp SGT exp_plusminus
    (66) exp_comp -> . exp_comp SGE exp_plusminus
    (67) exp_comp -> . exp_comp SLE exp_plusminus
    (68) exp_comp -> . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    SEMICOLON       reduce using rule 78 (exp_decrement_increment -> .)
    RPAREN          reduce using rule 78 (exp_decrement_increment -> .)
    COMMA           reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    ID_SC           shift and go to state 88
    LPAREN          shift and go to state 13
    ID_LI           shift and go to state 89
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 12

    exp_comp                       shift and go to state 125
    exp_plusminus                  shift and go to state 29
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36
    call                           shift and go to state 46

state 80

    (57) exp_comp_eq -> exp_comp_eq SNE . exp_comp
    (60) exp_comp -> . exp_comp GT exp_plusminus
    (61) exp_comp -> . exp_comp LT exp_plusminus
    (62) exp_comp -> . exp_comp GE exp_plusminus
    (63) exp_comp -> . exp_comp LE exp_plusminus
    (64) exp_comp -> . exp_comp SLT exp_plusminus
    (65) exp_comp -> . exp_comp SGT exp_plusminus
    (66) exp_comp -> . exp_comp SGE exp_plusminus
    (67) exp_comp -> . exp_comp SLE exp_plusminus
    (68) exp_comp -> . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    SEMICOLON       reduce using rule 78 (exp_decrement_increment -> .)
    RPAREN          reduce using rule 78 (exp_decrement_increment -> .)
    COMMA           reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    ID_SC           shift and go to state 88
    LPAREN          shift and go to state 13
    ID_LI           shift and go to state 89
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 12

    exp_comp                       shift and go to state 126
    exp_plusminus                  shift and go to state 29
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36
    call                           shift and go to state 46

state 81

    (58) exp_comp_eq -> exp_comp_eq CMP . exp_comp
    (60) exp_comp -> . exp_comp GT exp_plusminus
    (61) exp_comp -> . exp_comp LT exp_plusminus
    (62) exp_comp -> . exp_comp GE exp_plusminus
    (63) exp_comp -> . exp_comp LE exp_plusminus
    (64) exp_comp -> . exp_comp SLT exp_plusminus
    (65) exp_comp -> . exp_comp SGT exp_plusminus
    (66) exp_comp -> . exp_comp SGE exp_plusminus
    (67) exp_comp -> . exp_comp SLE exp_plusminus
    (68) exp_comp -> . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    SEMICOLON       reduce using rule 78 (exp_decrement_increment -> .)
    RPAREN          reduce using rule 78 (exp_decrement_increment -> .)
    COMMA           reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    ID_SC           shift and go to state 88
    LPAREN          shift and go to state 13
    ID_LI           shift and go to state 89
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 12

    exp_comp                       shift and go to state 127
    exp_plusminus                  shift and go to state 29
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36
    call                           shift and go to state 46

state 82

    (69) exp_plusminus -> exp_plusminus PLUS . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    SEMICOLON       reduce using rule 78 (exp_decrement_increment -> .)
    RPAREN          reduce using rule 78 (exp_decrement_increment -> .)
    COMMA           reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    ID_SC           shift and go to state 88
    LPAREN          shift and go to state 13
    ID_LI           shift and go to state 89
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 12

    exp_times_divides              shift and go to state 128
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36
    call                           shift and go to state 46

state 83

    (70) exp_plusminus -> exp_plusminus MINUS . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    SEMICOLON       reduce using rule 78 (exp_decrement_increment -> .)
    RPAREN          reduce using rule 78 (exp_decrement_increment -> .)
    COMMA           reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    ID_SC           shift and go to state 88
    LPAREN          shift and go to state 13
    ID_LI           shift and go to state 89
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 12

    exp_times_divides              shift and go to state 129
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36
    call                           shift and go to state 46

state 84

    (72) exp_times_divides -> exp_times_divides TIMES . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    SEMICOLON       reduce using rule 78 (exp_decrement_increment -> .)
    RPAREN          reduce using rule 78 (exp_decrement_increment -> .)
    COMMA           reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    ID_SC           shift and go to state 88
    LPAREN          shift and go to state 13
    ID_LI           shift and go to state 89
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 12

    exp_lnot                       shift and go to state 130
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36
    call                           shift and go to state 46

state 85

    (73) exp_times_divides -> exp_times_divides DIVIDE . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    SEMICOLON       reduce using rule 78 (exp_decrement_increment -> .)
    RPAREN          reduce using rule 78 (exp_decrement_increment -> .)
    COMMA           reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    ID_SC           shift and go to state 88
    LPAREN          shift and go to state 13
    ID_LI           shift and go to state 89
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 12

    exp_lnot                       shift and go to state 131
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36
    call                           shift and go to state 46

state 86

    (74) exp_times_divides -> exp_times_divides MODULO . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    SEMICOLON       reduce using rule 78 (exp_decrement_increment -> .)
    RPAREN          reduce using rule 78 (exp_decrement_increment -> .)
    COMMA           reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    ID_SC           shift and go to state 88
    LPAREN          shift and go to state 13
    ID_LI           shift and go to state 89
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 12

    exp_lnot                       shift and go to state 132
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36
    call                           shift and go to state 46

state 87

    (76) exp_lnot -> XOR exp_lnot .

    TIMES           reduce using rule 76 (exp_lnot -> XOR exp_lnot .)
    DIVIDE          reduce using rule 76 (exp_lnot -> XOR exp_lnot .)
    MODULO          reduce using rule 76 (exp_lnot -> XOR exp_lnot .)
    PLUS            reduce using rule 76 (exp_lnot -> XOR exp_lnot .)
    MINUS           reduce using rule 76 (exp_lnot -> XOR exp_lnot .)
    GT              reduce using rule 76 (exp_lnot -> XOR exp_lnot .)
    LT              reduce using rule 76 (exp_lnot -> XOR exp_lnot .)
    GE              reduce using rule 76 (exp_lnot -> XOR exp_lnot .)
    LE              reduce using rule 76 (exp_lnot -> XOR exp_lnot .)
    SLT             reduce using rule 76 (exp_lnot -> XOR exp_lnot .)
    SGT             reduce using rule 76 (exp_lnot -> XOR exp_lnot .)
    SGE             reduce using rule 76 (exp_lnot -> XOR exp_lnot .)
    SLE             reduce using rule 76 (exp_lnot -> XOR exp_lnot .)
    EQ              reduce using rule 76 (exp_lnot -> XOR exp_lnot .)
    NE              reduce using rule 76 (exp_lnot -> XOR exp_lnot .)
    SEQ             reduce using rule 76 (exp_lnot -> XOR exp_lnot .)
    SNE             reduce using rule 76 (exp_lnot -> XOR exp_lnot .)
    CMP             reduce using rule 76 (exp_lnot -> XOR exp_lnot .)
    AND             reduce using rule 76 (exp_lnot -> XOR exp_lnot .)
    OR              reduce using rule 76 (exp_lnot -> XOR exp_lnot .)
    LAND            reduce using rule 76 (exp_lnot -> XOR exp_lnot .)
    LOR             reduce using rule 76 (exp_lnot -> XOR exp_lnot .)
    SEMICOLON       reduce using rule 76 (exp_lnot -> XOR exp_lnot .)
    RPAREN          reduce using rule 76 (exp_lnot -> XOR exp_lnot .)
    COMMA           reduce using rule 76 (exp_lnot -> XOR exp_lnot .)


state 88

    (81) exp_decrement_increment -> ID_SC . INCREMENT
    (82) exp_decrement_increment -> ID_SC . DECREMENT
    (85) exp_lastlayer -> ID_SC .

    INCREMENT       shift and go to state 59
    DECREMENT       shift and go to state 60
    TIMES           reduce using rule 85 (exp_lastlayer -> ID_SC .)
    DIVIDE          reduce using rule 85 (exp_lastlayer -> ID_SC .)
    MODULO          reduce using rule 85 (exp_lastlayer -> ID_SC .)
    PLUS            reduce using rule 85 (exp_lastlayer -> ID_SC .)
    MINUS           reduce using rule 85 (exp_lastlayer -> ID_SC .)
    GT              reduce using rule 85 (exp_lastlayer -> ID_SC .)
    LT              reduce using rule 85 (exp_lastlayer -> ID_SC .)
    GE              reduce using rule 85 (exp_lastlayer -> ID_SC .)
    LE              reduce using rule 85 (exp_lastlayer -> ID_SC .)
    SLT             reduce using rule 85 (exp_lastlayer -> ID_SC .)
    SGT             reduce using rule 85 (exp_lastlayer -> ID_SC .)
    SGE             reduce using rule 85 (exp_lastlayer -> ID_SC .)
    SLE             reduce using rule 85 (exp_lastlayer -> ID_SC .)
    EQ              reduce using rule 85 (exp_lastlayer -> ID_SC .)
    NE              reduce using rule 85 (exp_lastlayer -> ID_SC .)
    SEQ             reduce using rule 85 (exp_lastlayer -> ID_SC .)
    SNE             reduce using rule 85 (exp_lastlayer -> ID_SC .)
    CMP             reduce using rule 85 (exp_lastlayer -> ID_SC .)
    AND             reduce using rule 85 (exp_lastlayer -> ID_SC .)
    OR              reduce using rule 85 (exp_lastlayer -> ID_SC .)
    LAND            reduce using rule 85 (exp_lastlayer -> ID_SC .)
    LOR             reduce using rule 85 (exp_lastlayer -> ID_SC .)
    SEMICOLON       reduce using rule 85 (exp_lastlayer -> ID_SC .)
    RPAREN          reduce using rule 85 (exp_lastlayer -> ID_SC .)
    COMMA           reduce using rule 85 (exp_lastlayer -> ID_SC .)


state 89

    (86) exp_lastlayer -> ID_LI .

    TIMES           reduce using rule 86 (exp_lastlayer -> ID_LI .)
    DIVIDE          reduce using rule 86 (exp_lastlayer -> ID_LI .)
    MODULO          reduce using rule 86 (exp_lastlayer -> ID_LI .)
    PLUS            reduce using rule 86 (exp_lastlayer -> ID_LI .)
    MINUS           reduce using rule 86 (exp_lastlayer -> ID_LI .)
    GT              reduce using rule 86 (exp_lastlayer -> ID_LI .)
    LT              reduce using rule 86 (exp_lastlayer -> ID_LI .)
    GE              reduce using rule 86 (exp_lastlayer -> ID_LI .)
    LE              reduce using rule 86 (exp_lastlayer -> ID_LI .)
    SLT             reduce using rule 86 (exp_lastlayer -> ID_LI .)
    SGT             reduce using rule 86 (exp_lastlayer -> ID_LI .)
    SGE             reduce using rule 86 (exp_lastlayer -> ID_LI .)
    SLE             reduce using rule 86 (exp_lastlayer -> ID_LI .)
    EQ              reduce using rule 86 (exp_lastlayer -> ID_LI .)
    NE              reduce using rule 86 (exp_lastlayer -> ID_LI .)
    SEQ             reduce using rule 86 (exp_lastlayer -> ID_LI .)
    SNE             reduce using rule 86 (exp_lastlayer -> ID_LI .)
    CMP             reduce using rule 86 (exp_lastlayer -> ID_LI .)
    AND             reduce using rule 86 (exp_lastlayer -> ID_LI .)
    OR              reduce using rule 86 (exp_lastlayer -> ID_LI .)
    LAND            reduce using rule 86 (exp_lastlayer -> ID_LI .)
    LOR             reduce using rule 86 (exp_lastlayer -> ID_LI .)
    SEMICOLON       reduce using rule 86 (exp_lastlayer -> ID_LI .)
    RPAREN          reduce using rule 86 (exp_lastlayer -> ID_LI .)
    COMMA           reduce using rule 86 (exp_lastlayer -> ID_LI .)


state 90

    (79) exp_decrement_increment -> INCREMENT ID_SC .

    TIMES           reduce using rule 79 (exp_decrement_increment -> INCREMENT ID_SC .)
    DIVIDE          reduce using rule 79 (exp_decrement_increment -> INCREMENT ID_SC .)
    MODULO          reduce using rule 79 (exp_decrement_increment -> INCREMENT ID_SC .)
    PLUS            reduce using rule 79 (exp_decrement_increment -> INCREMENT ID_SC .)
    MINUS           reduce using rule 79 (exp_decrement_increment -> INCREMENT ID_SC .)
    GT              reduce using rule 79 (exp_decrement_increment -> INCREMENT ID_SC .)
    LT              reduce using rule 79 (exp_decrement_increment -> INCREMENT ID_SC .)
    GE              reduce using rule 79 (exp_decrement_increment -> INCREMENT ID_SC .)
    LE              reduce using rule 79 (exp_decrement_increment -> INCREMENT ID_SC .)
    SLT             reduce using rule 79 (exp_decrement_increment -> INCREMENT ID_SC .)
    SGT             reduce using rule 79 (exp_decrement_increment -> INCREMENT ID_SC .)
    SGE             reduce using rule 79 (exp_decrement_increment -> INCREMENT ID_SC .)
    SLE             reduce using rule 79 (exp_decrement_increment -> INCREMENT ID_SC .)
    EQ              reduce using rule 79 (exp_decrement_increment -> INCREMENT ID_SC .)
    NE              reduce using rule 79 (exp_decrement_increment -> INCREMENT ID_SC .)
    SEQ             reduce using rule 79 (exp_decrement_increment -> INCREMENT ID_SC .)
    SNE             reduce using rule 79 (exp_decrement_increment -> INCREMENT ID_SC .)
    CMP             reduce using rule 79 (exp_decrement_increment -> INCREMENT ID_SC .)
    AND             reduce using rule 79 (exp_decrement_increment -> INCREMENT ID_SC .)
    OR              reduce using rule 79 (exp_decrement_increment -> INCREMENT ID_SC .)
    LAND            reduce using rule 79 (exp_decrement_increment -> INCREMENT ID_SC .)
    LOR             reduce using rule 79 (exp_decrement_increment -> INCREMENT ID_SC .)
    SEMICOLON       reduce using rule 79 (exp_decrement_increment -> INCREMENT ID_SC .)
    RPAREN          reduce using rule 79 (exp_decrement_increment -> INCREMENT ID_SC .)
    COMMA           reduce using rule 79 (exp_decrement_increment -> INCREMENT ID_SC .)


state 91

    (80) exp_decrement_increment -> DECREMENT ID_SC .

    TIMES           reduce using rule 80 (exp_decrement_increment -> DECREMENT ID_SC .)
    DIVIDE          reduce using rule 80 (exp_decrement_increment -> DECREMENT ID_SC .)
    MODULO          reduce using rule 80 (exp_decrement_increment -> DECREMENT ID_SC .)
    PLUS            reduce using rule 80 (exp_decrement_increment -> DECREMENT ID_SC .)
    MINUS           reduce using rule 80 (exp_decrement_increment -> DECREMENT ID_SC .)
    GT              reduce using rule 80 (exp_decrement_increment -> DECREMENT ID_SC .)
    LT              reduce using rule 80 (exp_decrement_increment -> DECREMENT ID_SC .)
    GE              reduce using rule 80 (exp_decrement_increment -> DECREMENT ID_SC .)
    LE              reduce using rule 80 (exp_decrement_increment -> DECREMENT ID_SC .)
    SLT             reduce using rule 80 (exp_decrement_increment -> DECREMENT ID_SC .)
    SGT             reduce using rule 80 (exp_decrement_increment -> DECREMENT ID_SC .)
    SGE             reduce using rule 80 (exp_decrement_increment -> DECREMENT ID_SC .)
    SLE             reduce using rule 80 (exp_decrement_increment -> DECREMENT ID_SC .)
    EQ              reduce using rule 80 (exp_decrement_increment -> DECREMENT ID_SC .)
    NE              reduce using rule 80 (exp_decrement_increment -> DECREMENT ID_SC .)
    SEQ             reduce using rule 80 (exp_decrement_increment -> DECREMENT ID_SC .)
    SNE             reduce using rule 80 (exp_decrement_increment -> DECREMENT ID_SC .)
    CMP             reduce using rule 80 (exp_decrement_increment -> DECREMENT ID_SC .)
    AND             reduce using rule 80 (exp_decrement_increment -> DECREMENT ID_SC .)
    OR              reduce using rule 80 (exp_decrement_increment -> DECREMENT ID_SC .)
    LAND            reduce using rule 80 (exp_decrement_increment -> DECREMENT ID_SC .)
    LOR             reduce using rule 80 (exp_decrement_increment -> DECREMENT ID_SC .)
    SEMICOLON       reduce using rule 80 (exp_decrement_increment -> DECREMENT ID_SC .)
    RPAREN          reduce using rule 80 (exp_decrement_increment -> DECREMENT ID_SC .)
    COMMA           reduce using rule 80 (exp_decrement_increment -> DECREMENT ID_SC .)


state 92

    (11) command -> RETURN return SEMICOLON .

    RETURN          reduce using rule 11 (command -> RETURN return SEMICOLON .)
    BREAK           reduce using rule 11 (command -> RETURN return SEMICOLON .)
    CONTINUE        reduce using rule 11 (command -> RETURN return SEMICOLON .)
    SUB             reduce using rule 11 (command -> RETURN return SEMICOLON .)
    IF              reduce using rule 11 (command -> RETURN return SEMICOLON .)
    ID_SC           reduce using rule 11 (command -> RETURN return SEMICOLON .)
    ID_LI           reduce using rule 11 (command -> RETURN return SEMICOLON .)
    ID              reduce using rule 11 (command -> RETURN return SEMICOLON .)
    FOR             reduce using rule 11 (command -> RETURN return SEMICOLON .)
    DO              reduce using rule 11 (command -> RETURN return SEMICOLON .)
    WHILE           reduce using rule 11 (command -> RETURN return SEMICOLON .)
    XOR             reduce using rule 11 (command -> RETURN return SEMICOLON .)
    INCREMENT       reduce using rule 11 (command -> RETURN return SEMICOLON .)
    DECREMENT       reduce using rule 11 (command -> RETURN return SEMICOLON .)
    LPAREN          reduce using rule 11 (command -> RETURN return SEMICOLON .)
    NUMBER          reduce using rule 11 (command -> RETURN return SEMICOLON .)
    TRUE            reduce using rule 11 (command -> RETURN return SEMICOLON .)
    FALSE           reduce using rule 11 (command -> RETURN return SEMICOLON .)
    SEMICOLON       reduce using rule 11 (command -> RETURN return SEMICOLON .)
    LOR             reduce using rule 11 (command -> RETURN return SEMICOLON .)
    LAND            reduce using rule 11 (command -> RETURN return SEMICOLON .)
    OR              reduce using rule 11 (command -> RETURN return SEMICOLON .)
    AND             reduce using rule 11 (command -> RETURN return SEMICOLON .)
    EQ              reduce using rule 11 (command -> RETURN return SEMICOLON .)
    NE              reduce using rule 11 (command -> RETURN return SEMICOLON .)
    SEQ             reduce using rule 11 (command -> RETURN return SEMICOLON .)
    SNE             reduce using rule 11 (command -> RETURN return SEMICOLON .)
    CMP             reduce using rule 11 (command -> RETURN return SEMICOLON .)
    GT              reduce using rule 11 (command -> RETURN return SEMICOLON .)
    LT              reduce using rule 11 (command -> RETURN return SEMICOLON .)
    GE              reduce using rule 11 (command -> RETURN return SEMICOLON .)
    LE              reduce using rule 11 (command -> RETURN return SEMICOLON .)
    SLT             reduce using rule 11 (command -> RETURN return SEMICOLON .)
    SGT             reduce using rule 11 (command -> RETURN return SEMICOLON .)
    SGE             reduce using rule 11 (command -> RETURN return SEMICOLON .)
    SLE             reduce using rule 11 (command -> RETURN return SEMICOLON .)
    PLUS            reduce using rule 11 (command -> RETURN return SEMICOLON .)
    MINUS           reduce using rule 11 (command -> RETURN return SEMICOLON .)
    TIMES           reduce using rule 11 (command -> RETURN return SEMICOLON .)
    DIVIDE          reduce using rule 11 (command -> RETURN return SEMICOLON .)
    MODULO          reduce using rule 11 (command -> RETURN return SEMICOLON .)
    $end            reduce using rule 11 (command -> RETURN return SEMICOLON .)
    RBRACE          reduce using rule 11 (command -> RETURN return SEMICOLON .)


state 93

    (31) function -> SUB ID LPAREN . RPAREN LBRACE blockcode RBRACE
    (32) function -> SUB ID LPAREN . function_assignments RPAREN LBRACE blockcode RBRACE
    (33) function_assignments -> . exp
    (34) function_assignments -> . exp COMMA function_assignments
    (38) exp -> . ID_SC EQUALS exp_lor
    (39) exp -> . ID_LI EQUALS exp_lor
    (40) exp -> . ID_SC MINUSEQUAL exp_lor
    (41) exp -> . ID_SC PLUSEQUAL exp_lor
    (42) exp -> . ID_SC MODEQUAL exp_lor
    (43) exp -> . ID_SC DIVEQUAL exp_lor
    (44) exp -> . ID_SC TIMESEQUAL exp_lor
    (45) exp -> . exp_lor
    (46) exp_lor -> . exp_lor LOR exp_land
    (47) exp_lor -> . exp_land
    (48) exp_land -> . exp_land LAND exp_or
    (49) exp_land -> . exp_or
    (50) exp_or -> . exp_or OR exp_and
    (51) exp_or -> . exp_and
    (52) exp_and -> . exp_and AND exp_comp
    (53) exp_and -> . exp_comp_eq
    (54) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (55) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (56) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (57) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (58) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (59) exp_comp_eq -> . exp_comp
    (60) exp_comp -> . exp_comp GT exp_plusminus
    (61) exp_comp -> . exp_comp LT exp_plusminus
    (62) exp_comp -> . exp_comp GE exp_plusminus
    (63) exp_comp -> . exp_comp LE exp_plusminus
    (64) exp_comp -> . exp_comp SLT exp_plusminus
    (65) exp_comp -> . exp_comp SGT exp_plusminus
    (66) exp_comp -> . exp_comp SGE exp_plusminus
    (67) exp_comp -> . exp_comp SLE exp_plusminus
    (68) exp_comp -> . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 133
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 20
    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    COMMA           reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 12

  ! RPAREN          [ reduce using rule 78 (exp_decrement_increment -> .) ]

    function_assignments           shift and go to state 134
    exp                            shift and go to state 96
    exp_lor                        shift and go to state 19
    exp_land                       shift and go to state 24
    exp_or                         shift and go to state 25
    exp_and                        shift and go to state 26
    exp_comp                       shift and go to state 27
    exp_comp_eq                    shift and go to state 28
    exp_plusminus                  shift and go to state 29
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36
    call                           shift and go to state 46

state 94

    (35) call -> ID LPAREN RPAREN .

    SEMICOLON       reduce using rule 35 (call -> ID LPAREN RPAREN .)
    TIMES           reduce using rule 35 (call -> ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 35 (call -> ID LPAREN RPAREN .)
    MODULO          reduce using rule 35 (call -> ID LPAREN RPAREN .)
    PLUS            reduce using rule 35 (call -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 35 (call -> ID LPAREN RPAREN .)
    GT              reduce using rule 35 (call -> ID LPAREN RPAREN .)
    LT              reduce using rule 35 (call -> ID LPAREN RPAREN .)
    GE              reduce using rule 35 (call -> ID LPAREN RPAREN .)
    LE              reduce using rule 35 (call -> ID LPAREN RPAREN .)
    SLT             reduce using rule 35 (call -> ID LPAREN RPAREN .)
    SGT             reduce using rule 35 (call -> ID LPAREN RPAREN .)
    SGE             reduce using rule 35 (call -> ID LPAREN RPAREN .)
    SLE             reduce using rule 35 (call -> ID LPAREN RPAREN .)
    EQ              reduce using rule 35 (call -> ID LPAREN RPAREN .)
    NE              reduce using rule 35 (call -> ID LPAREN RPAREN .)
    SEQ             reduce using rule 35 (call -> ID LPAREN RPAREN .)
    SNE             reduce using rule 35 (call -> ID LPAREN RPAREN .)
    CMP             reduce using rule 35 (call -> ID LPAREN RPAREN .)
    AND             reduce using rule 35 (call -> ID LPAREN RPAREN .)
    OR              reduce using rule 35 (call -> ID LPAREN RPAREN .)
    LAND            reduce using rule 35 (call -> ID LPAREN RPAREN .)
    LOR             reduce using rule 35 (call -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 35 (call -> ID LPAREN RPAREN .)
    COMMA           reduce using rule 35 (call -> ID LPAREN RPAREN .)


state 95

    (36) call -> ID LPAREN function_assignments . RPAREN

    RPAREN          shift and go to state 135


state 96

    (33) function_assignments -> exp .
    (34) function_assignments -> exp . COMMA function_assignments

    RPAREN          reduce using rule 33 (function_assignments -> exp .)
    COMMA           shift and go to state 136


state 97

    (84) exp_lastlayer -> LPAREN exp RPAREN .

    TIMES           reduce using rule 84 (exp_lastlayer -> LPAREN exp RPAREN .)
    DIVIDE          reduce using rule 84 (exp_lastlayer -> LPAREN exp RPAREN .)
    MODULO          reduce using rule 84 (exp_lastlayer -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 84 (exp_lastlayer -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 84 (exp_lastlayer -> LPAREN exp RPAREN .)
    GT              reduce using rule 84 (exp_lastlayer -> LPAREN exp RPAREN .)
    LT              reduce using rule 84 (exp_lastlayer -> LPAREN exp RPAREN .)
    GE              reduce using rule 84 (exp_lastlayer -> LPAREN exp RPAREN .)
    LE              reduce using rule 84 (exp_lastlayer -> LPAREN exp RPAREN .)
    SLT             reduce using rule 84 (exp_lastlayer -> LPAREN exp RPAREN .)
    SGT             reduce using rule 84 (exp_lastlayer -> LPAREN exp RPAREN .)
    SGE             reduce using rule 84 (exp_lastlayer -> LPAREN exp RPAREN .)
    SLE             reduce using rule 84 (exp_lastlayer -> LPAREN exp RPAREN .)
    EQ              reduce using rule 84 (exp_lastlayer -> LPAREN exp RPAREN .)
    NE              reduce using rule 84 (exp_lastlayer -> LPAREN exp RPAREN .)
    SEQ             reduce using rule 84 (exp_lastlayer -> LPAREN exp RPAREN .)
    SNE             reduce using rule 84 (exp_lastlayer -> LPAREN exp RPAREN .)
    CMP             reduce using rule 84 (exp_lastlayer -> LPAREN exp RPAREN .)
    AND             reduce using rule 84 (exp_lastlayer -> LPAREN exp RPAREN .)
    OR              reduce using rule 84 (exp_lastlayer -> LPAREN exp RPAREN .)
    LAND            reduce using rule 84 (exp_lastlayer -> LPAREN exp RPAREN .)
    LOR             reduce using rule 84 (exp_lastlayer -> LPAREN exp RPAREN .)
    SEMICOLON       reduce using rule 84 (exp_lastlayer -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 84 (exp_lastlayer -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 84 (exp_lastlayer -> LPAREN exp RPAREN .)


state 98

    (14) if -> IF LPAREN exp . RPAREN if_statement

    RPAREN          shift and go to state 137


state 99

    (38) exp -> ID_SC EQUALS exp_lor .
    (46) exp_lor -> exp_lor . LOR exp_land

    SEMICOLON       reduce using rule 38 (exp -> ID_SC EQUALS exp_lor .)
    RPAREN          reduce using rule 38 (exp -> ID_SC EQUALS exp_lor .)
    COMMA           reduce using rule 38 (exp -> ID_SC EQUALS exp_lor .)
    LOR             shift and go to state 61


state 100

    (40) exp -> ID_SC MINUSEQUAL exp_lor .
    (46) exp_lor -> exp_lor . LOR exp_land

    SEMICOLON       reduce using rule 40 (exp -> ID_SC MINUSEQUAL exp_lor .)
    RPAREN          reduce using rule 40 (exp -> ID_SC MINUSEQUAL exp_lor .)
    COMMA           reduce using rule 40 (exp -> ID_SC MINUSEQUAL exp_lor .)
    LOR             shift and go to state 61


state 101

    (41) exp -> ID_SC PLUSEQUAL exp_lor .
    (46) exp_lor -> exp_lor . LOR exp_land

    SEMICOLON       reduce using rule 41 (exp -> ID_SC PLUSEQUAL exp_lor .)
    RPAREN          reduce using rule 41 (exp -> ID_SC PLUSEQUAL exp_lor .)
    COMMA           reduce using rule 41 (exp -> ID_SC PLUSEQUAL exp_lor .)
    LOR             shift and go to state 61


state 102

    (42) exp -> ID_SC MODEQUAL exp_lor .
    (46) exp_lor -> exp_lor . LOR exp_land

    SEMICOLON       reduce using rule 42 (exp -> ID_SC MODEQUAL exp_lor .)
    RPAREN          reduce using rule 42 (exp -> ID_SC MODEQUAL exp_lor .)
    COMMA           reduce using rule 42 (exp -> ID_SC MODEQUAL exp_lor .)
    LOR             shift and go to state 61


state 103

    (43) exp -> ID_SC DIVEQUAL exp_lor .
    (46) exp_lor -> exp_lor . LOR exp_land

    SEMICOLON       reduce using rule 43 (exp -> ID_SC DIVEQUAL exp_lor .)
    RPAREN          reduce using rule 43 (exp -> ID_SC DIVEQUAL exp_lor .)
    COMMA           reduce using rule 43 (exp -> ID_SC DIVEQUAL exp_lor .)
    LOR             shift and go to state 61


state 104

    (44) exp -> ID_SC TIMESEQUAL exp_lor .
    (46) exp_lor -> exp_lor . LOR exp_land

    SEMICOLON       reduce using rule 44 (exp -> ID_SC TIMESEQUAL exp_lor .)
    RPAREN          reduce using rule 44 (exp -> ID_SC TIMESEQUAL exp_lor .)
    COMMA           reduce using rule 44 (exp -> ID_SC TIMESEQUAL exp_lor .)
    LOR             shift and go to state 61


state 105

    (46) exp_lor -> exp_lor LOR exp_land .
    (48) exp_land -> exp_land . LAND exp_or

    LOR             reduce using rule 46 (exp_lor -> exp_lor LOR exp_land .)
    SEMICOLON       reduce using rule 46 (exp_lor -> exp_lor LOR exp_land .)
    RPAREN          reduce using rule 46 (exp_lor -> exp_lor LOR exp_land .)
    COMMA           reduce using rule 46 (exp_lor -> exp_lor LOR exp_land .)
    LAND            shift and go to state 66


state 106

    (39) exp -> ID_LI EQUALS exp_lor .
    (46) exp_lor -> exp_lor . LOR exp_land

    SEMICOLON       reduce using rule 39 (exp -> ID_LI EQUALS exp_lor .)
    RPAREN          reduce using rule 39 (exp -> ID_LI EQUALS exp_lor .)
    COMMA           reduce using rule 39 (exp -> ID_LI EQUALS exp_lor .)
    LOR             shift and go to state 61


state 107

    (25) for -> FOR LPAREN for_assignments . SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE

    SEMICOLON       shift and go to state 138


state 108

    (26) for_assignments -> exp .
    (27) for_assignments -> exp . COMMA for_assignments

    SEMICOLON       reduce using rule 26 (for_assignments -> exp .)
    RPAREN          reduce using rule 26 (for_assignments -> exp .)
    COMMA           shift and go to state 139


state 109

    (28) dowhile -> DO LBRACE blockcode . RBRACE WHILE LPAREN exp RPAREN
    (6) blockcode -> blockcode . command
    (7) command -> . interations
    (8) command -> . if
    (9) command -> . exp SEMICOLON
    (10) command -> . call SEMICOLON
    (11) command -> . RETURN return SEMICOLON
    (12) command -> . BREAK SEMICOLON
    (13) command -> . CONTINUE SEMICOLON
    (22) interations -> . for
    (23) interations -> . dowhile
    (24) interations -> . while
    (14) if -> . IF LPAREN exp RPAREN if_statement
    (38) exp -> . ID_SC EQUALS exp_lor
    (39) exp -> . ID_LI EQUALS exp_lor
    (40) exp -> . ID_SC MINUSEQUAL exp_lor
    (41) exp -> . ID_SC PLUSEQUAL exp_lor
    (42) exp -> . ID_SC MODEQUAL exp_lor
    (43) exp -> . ID_SC DIVEQUAL exp_lor
    (44) exp -> . ID_SC TIMESEQUAL exp_lor
    (45) exp -> . exp_lor
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN
    (25) for -> . FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (28) dowhile -> . DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN
    (29) while -> . WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE
    (30) while -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (46) exp_lor -> . exp_lor LOR exp_land
    (47) exp_lor -> . exp_land
    (48) exp_land -> . exp_land LAND exp_or
    (49) exp_land -> . exp_or
    (50) exp_or -> . exp_or OR exp_and
    (51) exp_or -> . exp_and
    (52) exp_and -> . exp_and AND exp_comp
    (53) exp_and -> . exp_comp_eq
    (54) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (55) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (56) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (57) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (58) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (59) exp_comp_eq -> . exp_comp
    (60) exp_comp -> . exp_comp GT exp_plusminus
    (61) exp_comp -> . exp_comp LT exp_plusminus
    (62) exp_comp -> . exp_comp GE exp_plusminus
    (63) exp_comp -> . exp_comp LE exp_plusminus
    (64) exp_comp -> . exp_comp SLT exp_plusminus
    (65) exp_comp -> . exp_comp SGT exp_plusminus
    (66) exp_comp -> . exp_comp SGE exp_plusminus
    (67) exp_comp -> . exp_comp SLE exp_plusminus
    (68) exp_comp -> . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE

    RBRACE          shift and go to state 140
    RETURN          shift and go to state 8
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    IF              shift and go to state 17
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 20
    ID              shift and go to state 12
    FOR             shift and go to state 21
    DO              shift and go to state 22
    WHILE           shift and go to state 23
    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    SEMICOLON       reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    exp                            shift and go to state 6
    command                        shift and go to state 141
    interations                    shift and go to state 4
    if                             shift and go to state 5
    call                           shift and go to state 7
    for                            shift and go to state 14
    dowhile                        shift and go to state 15
    while                          shift and go to state 16
    exp_lor                        shift and go to state 19
    exp_land                       shift and go to state 24
    exp_or                         shift and go to state 25
    exp_and                        shift and go to state 26
    exp_comp                       shift and go to state 27
    exp_comp_eq                    shift and go to state 28
    exp_plusminus                  shift and go to state 29
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36

state 110

    (5) blockcode -> command .

    RBRACE          reduce using rule 5 (blockcode -> command .)
    RETURN          reduce using rule 5 (blockcode -> command .)
    BREAK           reduce using rule 5 (blockcode -> command .)
    CONTINUE        reduce using rule 5 (blockcode -> command .)
    IF              reduce using rule 5 (blockcode -> command .)
    ID_SC           reduce using rule 5 (blockcode -> command .)
    ID_LI           reduce using rule 5 (blockcode -> command .)
    ID              reduce using rule 5 (blockcode -> command .)
    FOR             reduce using rule 5 (blockcode -> command .)
    DO              reduce using rule 5 (blockcode -> command .)
    WHILE           reduce using rule 5 (blockcode -> command .)
    XOR             reduce using rule 5 (blockcode -> command .)
    INCREMENT       reduce using rule 5 (blockcode -> command .)
    DECREMENT       reduce using rule 5 (blockcode -> command .)
    LPAREN          reduce using rule 5 (blockcode -> command .)
    NUMBER          reduce using rule 5 (blockcode -> command .)
    TRUE            reduce using rule 5 (blockcode -> command .)
    FALSE           reduce using rule 5 (blockcode -> command .)
    SEMICOLON       reduce using rule 5 (blockcode -> command .)
    LOR             reduce using rule 5 (blockcode -> command .)
    LAND            reduce using rule 5 (blockcode -> command .)
    OR              reduce using rule 5 (blockcode -> command .)
    AND             reduce using rule 5 (blockcode -> command .)
    EQ              reduce using rule 5 (blockcode -> command .)
    NE              reduce using rule 5 (blockcode -> command .)
    SEQ             reduce using rule 5 (blockcode -> command .)
    SNE             reduce using rule 5 (blockcode -> command .)
    CMP             reduce using rule 5 (blockcode -> command .)
    GT              reduce using rule 5 (blockcode -> command .)
    LT              reduce using rule 5 (blockcode -> command .)
    GE              reduce using rule 5 (blockcode -> command .)
    LE              reduce using rule 5 (blockcode -> command .)
    SLT             reduce using rule 5 (blockcode -> command .)
    SGT             reduce using rule 5 (blockcode -> command .)
    SGE             reduce using rule 5 (blockcode -> command .)
    SLE             reduce using rule 5 (blockcode -> command .)
    PLUS            reduce using rule 5 (blockcode -> command .)
    MINUS           reduce using rule 5 (blockcode -> command .)
    TIMES           reduce using rule 5 (blockcode -> command .)
    DIVIDE          reduce using rule 5 (blockcode -> command .)
    MODULO          reduce using rule 5 (blockcode -> command .)


state 111

    (29) while -> WHILE LPAREN exp . RPAREN LBRACE blockcode RBRACE
    (30) while -> WHILE LPAREN exp . RPAREN LBRACE RBRACE

    RPAREN          shift and go to state 142


state 112

    (48) exp_land -> exp_land LAND exp_or .
    (50) exp_or -> exp_or . OR exp_and

    LAND            reduce using rule 48 (exp_land -> exp_land LAND exp_or .)
    LOR             reduce using rule 48 (exp_land -> exp_land LAND exp_or .)
    SEMICOLON       reduce using rule 48 (exp_land -> exp_land LAND exp_or .)
    RPAREN          reduce using rule 48 (exp_land -> exp_land LAND exp_or .)
    COMMA           reduce using rule 48 (exp_land -> exp_land LAND exp_or .)
    OR              shift and go to state 67


state 113

    (50) exp_or -> exp_or OR exp_and .
    (52) exp_and -> exp_and . AND exp_comp

    OR              reduce using rule 50 (exp_or -> exp_or OR exp_and .)
    LAND            reduce using rule 50 (exp_or -> exp_or OR exp_and .)
    LOR             reduce using rule 50 (exp_or -> exp_or OR exp_and .)
    SEMICOLON       reduce using rule 50 (exp_or -> exp_or OR exp_and .)
    RPAREN          reduce using rule 50 (exp_or -> exp_or OR exp_and .)
    COMMA           reduce using rule 50 (exp_or -> exp_or OR exp_and .)
    AND             shift and go to state 68


state 114

    (52) exp_and -> exp_and AND exp_comp .
    (60) exp_comp -> exp_comp . GT exp_plusminus
    (61) exp_comp -> exp_comp . LT exp_plusminus
    (62) exp_comp -> exp_comp . GE exp_plusminus
    (63) exp_comp -> exp_comp . LE exp_plusminus
    (64) exp_comp -> exp_comp . SLT exp_plusminus
    (65) exp_comp -> exp_comp . SGT exp_plusminus
    (66) exp_comp -> exp_comp . SGE exp_plusminus
    (67) exp_comp -> exp_comp . SLE exp_plusminus

    AND             reduce using rule 52 (exp_and -> exp_and AND exp_comp .)
    OR              reduce using rule 52 (exp_and -> exp_and AND exp_comp .)
    LAND            reduce using rule 52 (exp_and -> exp_and AND exp_comp .)
    LOR             reduce using rule 52 (exp_and -> exp_and AND exp_comp .)
    SEMICOLON       reduce using rule 52 (exp_and -> exp_and AND exp_comp .)
    RPAREN          reduce using rule 52 (exp_and -> exp_and AND exp_comp .)
    COMMA           reduce using rule 52 (exp_and -> exp_and AND exp_comp .)
    GT              shift and go to state 69
    LT              shift and go to state 70
    GE              shift and go to state 71
    LE              shift and go to state 72
    SLT             shift and go to state 73
    SGT             shift and go to state 74
    SGE             shift and go to state 75
    SLE             shift and go to state 76


state 115

    (60) exp_comp -> exp_comp GT exp_plusminus .
    (69) exp_plusminus -> exp_plusminus . PLUS exp_times_divides
    (70) exp_plusminus -> exp_plusminus . MINUS exp_times_divides

    GT              reduce using rule 60 (exp_comp -> exp_comp GT exp_plusminus .)
    LT              reduce using rule 60 (exp_comp -> exp_comp GT exp_plusminus .)
    GE              reduce using rule 60 (exp_comp -> exp_comp GT exp_plusminus .)
    LE              reduce using rule 60 (exp_comp -> exp_comp GT exp_plusminus .)
    SLT             reduce using rule 60 (exp_comp -> exp_comp GT exp_plusminus .)
    SGT             reduce using rule 60 (exp_comp -> exp_comp GT exp_plusminus .)
    SGE             reduce using rule 60 (exp_comp -> exp_comp GT exp_plusminus .)
    SLE             reduce using rule 60 (exp_comp -> exp_comp GT exp_plusminus .)
    EQ              reduce using rule 60 (exp_comp -> exp_comp GT exp_plusminus .)
    NE              reduce using rule 60 (exp_comp -> exp_comp GT exp_plusminus .)
    SEQ             reduce using rule 60 (exp_comp -> exp_comp GT exp_plusminus .)
    SNE             reduce using rule 60 (exp_comp -> exp_comp GT exp_plusminus .)
    CMP             reduce using rule 60 (exp_comp -> exp_comp GT exp_plusminus .)
    AND             reduce using rule 60 (exp_comp -> exp_comp GT exp_plusminus .)
    OR              reduce using rule 60 (exp_comp -> exp_comp GT exp_plusminus .)
    LAND            reduce using rule 60 (exp_comp -> exp_comp GT exp_plusminus .)
    LOR             reduce using rule 60 (exp_comp -> exp_comp GT exp_plusminus .)
    SEMICOLON       reduce using rule 60 (exp_comp -> exp_comp GT exp_plusminus .)
    RPAREN          reduce using rule 60 (exp_comp -> exp_comp GT exp_plusminus .)
    COMMA           reduce using rule 60 (exp_comp -> exp_comp GT exp_plusminus .)
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83


state 116

    (61) exp_comp -> exp_comp LT exp_plusminus .
    (69) exp_plusminus -> exp_plusminus . PLUS exp_times_divides
    (70) exp_plusminus -> exp_plusminus . MINUS exp_times_divides

    GT              reduce using rule 61 (exp_comp -> exp_comp LT exp_plusminus .)
    LT              reduce using rule 61 (exp_comp -> exp_comp LT exp_plusminus .)
    GE              reduce using rule 61 (exp_comp -> exp_comp LT exp_plusminus .)
    LE              reduce using rule 61 (exp_comp -> exp_comp LT exp_plusminus .)
    SLT             reduce using rule 61 (exp_comp -> exp_comp LT exp_plusminus .)
    SGT             reduce using rule 61 (exp_comp -> exp_comp LT exp_plusminus .)
    SGE             reduce using rule 61 (exp_comp -> exp_comp LT exp_plusminus .)
    SLE             reduce using rule 61 (exp_comp -> exp_comp LT exp_plusminus .)
    EQ              reduce using rule 61 (exp_comp -> exp_comp LT exp_plusminus .)
    NE              reduce using rule 61 (exp_comp -> exp_comp LT exp_plusminus .)
    SEQ             reduce using rule 61 (exp_comp -> exp_comp LT exp_plusminus .)
    SNE             reduce using rule 61 (exp_comp -> exp_comp LT exp_plusminus .)
    CMP             reduce using rule 61 (exp_comp -> exp_comp LT exp_plusminus .)
    AND             reduce using rule 61 (exp_comp -> exp_comp LT exp_plusminus .)
    OR              reduce using rule 61 (exp_comp -> exp_comp LT exp_plusminus .)
    LAND            reduce using rule 61 (exp_comp -> exp_comp LT exp_plusminus .)
    LOR             reduce using rule 61 (exp_comp -> exp_comp LT exp_plusminus .)
    SEMICOLON       reduce using rule 61 (exp_comp -> exp_comp LT exp_plusminus .)
    RPAREN          reduce using rule 61 (exp_comp -> exp_comp LT exp_plusminus .)
    COMMA           reduce using rule 61 (exp_comp -> exp_comp LT exp_plusminus .)
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83


state 117

    (62) exp_comp -> exp_comp GE exp_plusminus .
    (69) exp_plusminus -> exp_plusminus . PLUS exp_times_divides
    (70) exp_plusminus -> exp_plusminus . MINUS exp_times_divides

    GT              reduce using rule 62 (exp_comp -> exp_comp GE exp_plusminus .)
    LT              reduce using rule 62 (exp_comp -> exp_comp GE exp_plusminus .)
    GE              reduce using rule 62 (exp_comp -> exp_comp GE exp_plusminus .)
    LE              reduce using rule 62 (exp_comp -> exp_comp GE exp_plusminus .)
    SLT             reduce using rule 62 (exp_comp -> exp_comp GE exp_plusminus .)
    SGT             reduce using rule 62 (exp_comp -> exp_comp GE exp_plusminus .)
    SGE             reduce using rule 62 (exp_comp -> exp_comp GE exp_plusminus .)
    SLE             reduce using rule 62 (exp_comp -> exp_comp GE exp_plusminus .)
    EQ              reduce using rule 62 (exp_comp -> exp_comp GE exp_plusminus .)
    NE              reduce using rule 62 (exp_comp -> exp_comp GE exp_plusminus .)
    SEQ             reduce using rule 62 (exp_comp -> exp_comp GE exp_plusminus .)
    SNE             reduce using rule 62 (exp_comp -> exp_comp GE exp_plusminus .)
    CMP             reduce using rule 62 (exp_comp -> exp_comp GE exp_plusminus .)
    AND             reduce using rule 62 (exp_comp -> exp_comp GE exp_plusminus .)
    OR              reduce using rule 62 (exp_comp -> exp_comp GE exp_plusminus .)
    LAND            reduce using rule 62 (exp_comp -> exp_comp GE exp_plusminus .)
    LOR             reduce using rule 62 (exp_comp -> exp_comp GE exp_plusminus .)
    SEMICOLON       reduce using rule 62 (exp_comp -> exp_comp GE exp_plusminus .)
    RPAREN          reduce using rule 62 (exp_comp -> exp_comp GE exp_plusminus .)
    COMMA           reduce using rule 62 (exp_comp -> exp_comp GE exp_plusminus .)
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83


state 118

    (63) exp_comp -> exp_comp LE exp_plusminus .
    (69) exp_plusminus -> exp_plusminus . PLUS exp_times_divides
    (70) exp_plusminus -> exp_plusminus . MINUS exp_times_divides

    GT              reduce using rule 63 (exp_comp -> exp_comp LE exp_plusminus .)
    LT              reduce using rule 63 (exp_comp -> exp_comp LE exp_plusminus .)
    GE              reduce using rule 63 (exp_comp -> exp_comp LE exp_plusminus .)
    LE              reduce using rule 63 (exp_comp -> exp_comp LE exp_plusminus .)
    SLT             reduce using rule 63 (exp_comp -> exp_comp LE exp_plusminus .)
    SGT             reduce using rule 63 (exp_comp -> exp_comp LE exp_plusminus .)
    SGE             reduce using rule 63 (exp_comp -> exp_comp LE exp_plusminus .)
    SLE             reduce using rule 63 (exp_comp -> exp_comp LE exp_plusminus .)
    EQ              reduce using rule 63 (exp_comp -> exp_comp LE exp_plusminus .)
    NE              reduce using rule 63 (exp_comp -> exp_comp LE exp_plusminus .)
    SEQ             reduce using rule 63 (exp_comp -> exp_comp LE exp_plusminus .)
    SNE             reduce using rule 63 (exp_comp -> exp_comp LE exp_plusminus .)
    CMP             reduce using rule 63 (exp_comp -> exp_comp LE exp_plusminus .)
    AND             reduce using rule 63 (exp_comp -> exp_comp LE exp_plusminus .)
    OR              reduce using rule 63 (exp_comp -> exp_comp LE exp_plusminus .)
    LAND            reduce using rule 63 (exp_comp -> exp_comp LE exp_plusminus .)
    LOR             reduce using rule 63 (exp_comp -> exp_comp LE exp_plusminus .)
    SEMICOLON       reduce using rule 63 (exp_comp -> exp_comp LE exp_plusminus .)
    RPAREN          reduce using rule 63 (exp_comp -> exp_comp LE exp_plusminus .)
    COMMA           reduce using rule 63 (exp_comp -> exp_comp LE exp_plusminus .)
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83


state 119

    (64) exp_comp -> exp_comp SLT exp_plusminus .
    (69) exp_plusminus -> exp_plusminus . PLUS exp_times_divides
    (70) exp_plusminus -> exp_plusminus . MINUS exp_times_divides

    GT              reduce using rule 64 (exp_comp -> exp_comp SLT exp_plusminus .)
    LT              reduce using rule 64 (exp_comp -> exp_comp SLT exp_plusminus .)
    GE              reduce using rule 64 (exp_comp -> exp_comp SLT exp_plusminus .)
    LE              reduce using rule 64 (exp_comp -> exp_comp SLT exp_plusminus .)
    SLT             reduce using rule 64 (exp_comp -> exp_comp SLT exp_plusminus .)
    SGT             reduce using rule 64 (exp_comp -> exp_comp SLT exp_plusminus .)
    SGE             reduce using rule 64 (exp_comp -> exp_comp SLT exp_plusminus .)
    SLE             reduce using rule 64 (exp_comp -> exp_comp SLT exp_plusminus .)
    EQ              reduce using rule 64 (exp_comp -> exp_comp SLT exp_plusminus .)
    NE              reduce using rule 64 (exp_comp -> exp_comp SLT exp_plusminus .)
    SEQ             reduce using rule 64 (exp_comp -> exp_comp SLT exp_plusminus .)
    SNE             reduce using rule 64 (exp_comp -> exp_comp SLT exp_plusminus .)
    CMP             reduce using rule 64 (exp_comp -> exp_comp SLT exp_plusminus .)
    AND             reduce using rule 64 (exp_comp -> exp_comp SLT exp_plusminus .)
    OR              reduce using rule 64 (exp_comp -> exp_comp SLT exp_plusminus .)
    LAND            reduce using rule 64 (exp_comp -> exp_comp SLT exp_plusminus .)
    LOR             reduce using rule 64 (exp_comp -> exp_comp SLT exp_plusminus .)
    SEMICOLON       reduce using rule 64 (exp_comp -> exp_comp SLT exp_plusminus .)
    RPAREN          reduce using rule 64 (exp_comp -> exp_comp SLT exp_plusminus .)
    COMMA           reduce using rule 64 (exp_comp -> exp_comp SLT exp_plusminus .)
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83


state 120

    (65) exp_comp -> exp_comp SGT exp_plusminus .
    (69) exp_plusminus -> exp_plusminus . PLUS exp_times_divides
    (70) exp_plusminus -> exp_plusminus . MINUS exp_times_divides

    GT              reduce using rule 65 (exp_comp -> exp_comp SGT exp_plusminus .)
    LT              reduce using rule 65 (exp_comp -> exp_comp SGT exp_plusminus .)
    GE              reduce using rule 65 (exp_comp -> exp_comp SGT exp_plusminus .)
    LE              reduce using rule 65 (exp_comp -> exp_comp SGT exp_plusminus .)
    SLT             reduce using rule 65 (exp_comp -> exp_comp SGT exp_plusminus .)
    SGT             reduce using rule 65 (exp_comp -> exp_comp SGT exp_plusminus .)
    SGE             reduce using rule 65 (exp_comp -> exp_comp SGT exp_plusminus .)
    SLE             reduce using rule 65 (exp_comp -> exp_comp SGT exp_plusminus .)
    EQ              reduce using rule 65 (exp_comp -> exp_comp SGT exp_plusminus .)
    NE              reduce using rule 65 (exp_comp -> exp_comp SGT exp_plusminus .)
    SEQ             reduce using rule 65 (exp_comp -> exp_comp SGT exp_plusminus .)
    SNE             reduce using rule 65 (exp_comp -> exp_comp SGT exp_plusminus .)
    CMP             reduce using rule 65 (exp_comp -> exp_comp SGT exp_plusminus .)
    AND             reduce using rule 65 (exp_comp -> exp_comp SGT exp_plusminus .)
    OR              reduce using rule 65 (exp_comp -> exp_comp SGT exp_plusminus .)
    LAND            reduce using rule 65 (exp_comp -> exp_comp SGT exp_plusminus .)
    LOR             reduce using rule 65 (exp_comp -> exp_comp SGT exp_plusminus .)
    SEMICOLON       reduce using rule 65 (exp_comp -> exp_comp SGT exp_plusminus .)
    RPAREN          reduce using rule 65 (exp_comp -> exp_comp SGT exp_plusminus .)
    COMMA           reduce using rule 65 (exp_comp -> exp_comp SGT exp_plusminus .)
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83


state 121

    (66) exp_comp -> exp_comp SGE exp_plusminus .
    (69) exp_plusminus -> exp_plusminus . PLUS exp_times_divides
    (70) exp_plusminus -> exp_plusminus . MINUS exp_times_divides

    GT              reduce using rule 66 (exp_comp -> exp_comp SGE exp_plusminus .)
    LT              reduce using rule 66 (exp_comp -> exp_comp SGE exp_plusminus .)
    GE              reduce using rule 66 (exp_comp -> exp_comp SGE exp_plusminus .)
    LE              reduce using rule 66 (exp_comp -> exp_comp SGE exp_plusminus .)
    SLT             reduce using rule 66 (exp_comp -> exp_comp SGE exp_plusminus .)
    SGT             reduce using rule 66 (exp_comp -> exp_comp SGE exp_plusminus .)
    SGE             reduce using rule 66 (exp_comp -> exp_comp SGE exp_plusminus .)
    SLE             reduce using rule 66 (exp_comp -> exp_comp SGE exp_plusminus .)
    EQ              reduce using rule 66 (exp_comp -> exp_comp SGE exp_plusminus .)
    NE              reduce using rule 66 (exp_comp -> exp_comp SGE exp_plusminus .)
    SEQ             reduce using rule 66 (exp_comp -> exp_comp SGE exp_plusminus .)
    SNE             reduce using rule 66 (exp_comp -> exp_comp SGE exp_plusminus .)
    CMP             reduce using rule 66 (exp_comp -> exp_comp SGE exp_plusminus .)
    AND             reduce using rule 66 (exp_comp -> exp_comp SGE exp_plusminus .)
    OR              reduce using rule 66 (exp_comp -> exp_comp SGE exp_plusminus .)
    LAND            reduce using rule 66 (exp_comp -> exp_comp SGE exp_plusminus .)
    LOR             reduce using rule 66 (exp_comp -> exp_comp SGE exp_plusminus .)
    SEMICOLON       reduce using rule 66 (exp_comp -> exp_comp SGE exp_plusminus .)
    RPAREN          reduce using rule 66 (exp_comp -> exp_comp SGE exp_plusminus .)
    COMMA           reduce using rule 66 (exp_comp -> exp_comp SGE exp_plusminus .)
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83


state 122

    (67) exp_comp -> exp_comp SLE exp_plusminus .
    (69) exp_plusminus -> exp_plusminus . PLUS exp_times_divides
    (70) exp_plusminus -> exp_plusminus . MINUS exp_times_divides

    GT              reduce using rule 67 (exp_comp -> exp_comp SLE exp_plusminus .)
    LT              reduce using rule 67 (exp_comp -> exp_comp SLE exp_plusminus .)
    GE              reduce using rule 67 (exp_comp -> exp_comp SLE exp_plusminus .)
    LE              reduce using rule 67 (exp_comp -> exp_comp SLE exp_plusminus .)
    SLT             reduce using rule 67 (exp_comp -> exp_comp SLE exp_plusminus .)
    SGT             reduce using rule 67 (exp_comp -> exp_comp SLE exp_plusminus .)
    SGE             reduce using rule 67 (exp_comp -> exp_comp SLE exp_plusminus .)
    SLE             reduce using rule 67 (exp_comp -> exp_comp SLE exp_plusminus .)
    EQ              reduce using rule 67 (exp_comp -> exp_comp SLE exp_plusminus .)
    NE              reduce using rule 67 (exp_comp -> exp_comp SLE exp_plusminus .)
    SEQ             reduce using rule 67 (exp_comp -> exp_comp SLE exp_plusminus .)
    SNE             reduce using rule 67 (exp_comp -> exp_comp SLE exp_plusminus .)
    CMP             reduce using rule 67 (exp_comp -> exp_comp SLE exp_plusminus .)
    AND             reduce using rule 67 (exp_comp -> exp_comp SLE exp_plusminus .)
    OR              reduce using rule 67 (exp_comp -> exp_comp SLE exp_plusminus .)
    LAND            reduce using rule 67 (exp_comp -> exp_comp SLE exp_plusminus .)
    LOR             reduce using rule 67 (exp_comp -> exp_comp SLE exp_plusminus .)
    SEMICOLON       reduce using rule 67 (exp_comp -> exp_comp SLE exp_plusminus .)
    RPAREN          reduce using rule 67 (exp_comp -> exp_comp SLE exp_plusminus .)
    COMMA           reduce using rule 67 (exp_comp -> exp_comp SLE exp_plusminus .)
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83


state 123

    (54) exp_comp_eq -> exp_comp_eq EQ exp_comp .
    (60) exp_comp -> exp_comp . GT exp_plusminus
    (61) exp_comp -> exp_comp . LT exp_plusminus
    (62) exp_comp -> exp_comp . GE exp_plusminus
    (63) exp_comp -> exp_comp . LE exp_plusminus
    (64) exp_comp -> exp_comp . SLT exp_plusminus
    (65) exp_comp -> exp_comp . SGT exp_plusminus
    (66) exp_comp -> exp_comp . SGE exp_plusminus
    (67) exp_comp -> exp_comp . SLE exp_plusminus

    EQ              reduce using rule 54 (exp_comp_eq -> exp_comp_eq EQ exp_comp .)
    NE              reduce using rule 54 (exp_comp_eq -> exp_comp_eq EQ exp_comp .)
    SEQ             reduce using rule 54 (exp_comp_eq -> exp_comp_eq EQ exp_comp .)
    SNE             reduce using rule 54 (exp_comp_eq -> exp_comp_eq EQ exp_comp .)
    CMP             reduce using rule 54 (exp_comp_eq -> exp_comp_eq EQ exp_comp .)
    AND             reduce using rule 54 (exp_comp_eq -> exp_comp_eq EQ exp_comp .)
    OR              reduce using rule 54 (exp_comp_eq -> exp_comp_eq EQ exp_comp .)
    LAND            reduce using rule 54 (exp_comp_eq -> exp_comp_eq EQ exp_comp .)
    LOR             reduce using rule 54 (exp_comp_eq -> exp_comp_eq EQ exp_comp .)
    SEMICOLON       reduce using rule 54 (exp_comp_eq -> exp_comp_eq EQ exp_comp .)
    RPAREN          reduce using rule 54 (exp_comp_eq -> exp_comp_eq EQ exp_comp .)
    COMMA           reduce using rule 54 (exp_comp_eq -> exp_comp_eq EQ exp_comp .)
    GT              shift and go to state 69
    LT              shift and go to state 70
    GE              shift and go to state 71
    LE              shift and go to state 72
    SLT             shift and go to state 73
    SGT             shift and go to state 74
    SGE             shift and go to state 75
    SLE             shift and go to state 76


state 124

    (55) exp_comp_eq -> exp_comp_eq NE exp_comp .
    (60) exp_comp -> exp_comp . GT exp_plusminus
    (61) exp_comp -> exp_comp . LT exp_plusminus
    (62) exp_comp -> exp_comp . GE exp_plusminus
    (63) exp_comp -> exp_comp . LE exp_plusminus
    (64) exp_comp -> exp_comp . SLT exp_plusminus
    (65) exp_comp -> exp_comp . SGT exp_plusminus
    (66) exp_comp -> exp_comp . SGE exp_plusminus
    (67) exp_comp -> exp_comp . SLE exp_plusminus

    EQ              reduce using rule 55 (exp_comp_eq -> exp_comp_eq NE exp_comp .)
    NE              reduce using rule 55 (exp_comp_eq -> exp_comp_eq NE exp_comp .)
    SEQ             reduce using rule 55 (exp_comp_eq -> exp_comp_eq NE exp_comp .)
    SNE             reduce using rule 55 (exp_comp_eq -> exp_comp_eq NE exp_comp .)
    CMP             reduce using rule 55 (exp_comp_eq -> exp_comp_eq NE exp_comp .)
    AND             reduce using rule 55 (exp_comp_eq -> exp_comp_eq NE exp_comp .)
    OR              reduce using rule 55 (exp_comp_eq -> exp_comp_eq NE exp_comp .)
    LAND            reduce using rule 55 (exp_comp_eq -> exp_comp_eq NE exp_comp .)
    LOR             reduce using rule 55 (exp_comp_eq -> exp_comp_eq NE exp_comp .)
    SEMICOLON       reduce using rule 55 (exp_comp_eq -> exp_comp_eq NE exp_comp .)
    RPAREN          reduce using rule 55 (exp_comp_eq -> exp_comp_eq NE exp_comp .)
    COMMA           reduce using rule 55 (exp_comp_eq -> exp_comp_eq NE exp_comp .)
    GT              shift and go to state 69
    LT              shift and go to state 70
    GE              shift and go to state 71
    LE              shift and go to state 72
    SLT             shift and go to state 73
    SGT             shift and go to state 74
    SGE             shift and go to state 75
    SLE             shift and go to state 76


state 125

    (56) exp_comp_eq -> exp_comp_eq SEQ exp_comp .
    (60) exp_comp -> exp_comp . GT exp_plusminus
    (61) exp_comp -> exp_comp . LT exp_plusminus
    (62) exp_comp -> exp_comp . GE exp_plusminus
    (63) exp_comp -> exp_comp . LE exp_plusminus
    (64) exp_comp -> exp_comp . SLT exp_plusminus
    (65) exp_comp -> exp_comp . SGT exp_plusminus
    (66) exp_comp -> exp_comp . SGE exp_plusminus
    (67) exp_comp -> exp_comp . SLE exp_plusminus

    EQ              reduce using rule 56 (exp_comp_eq -> exp_comp_eq SEQ exp_comp .)
    NE              reduce using rule 56 (exp_comp_eq -> exp_comp_eq SEQ exp_comp .)
    SEQ             reduce using rule 56 (exp_comp_eq -> exp_comp_eq SEQ exp_comp .)
    SNE             reduce using rule 56 (exp_comp_eq -> exp_comp_eq SEQ exp_comp .)
    CMP             reduce using rule 56 (exp_comp_eq -> exp_comp_eq SEQ exp_comp .)
    AND             reduce using rule 56 (exp_comp_eq -> exp_comp_eq SEQ exp_comp .)
    OR              reduce using rule 56 (exp_comp_eq -> exp_comp_eq SEQ exp_comp .)
    LAND            reduce using rule 56 (exp_comp_eq -> exp_comp_eq SEQ exp_comp .)
    LOR             reduce using rule 56 (exp_comp_eq -> exp_comp_eq SEQ exp_comp .)
    SEMICOLON       reduce using rule 56 (exp_comp_eq -> exp_comp_eq SEQ exp_comp .)
    RPAREN          reduce using rule 56 (exp_comp_eq -> exp_comp_eq SEQ exp_comp .)
    COMMA           reduce using rule 56 (exp_comp_eq -> exp_comp_eq SEQ exp_comp .)
    GT              shift and go to state 69
    LT              shift and go to state 70
    GE              shift and go to state 71
    LE              shift and go to state 72
    SLT             shift and go to state 73
    SGT             shift and go to state 74
    SGE             shift and go to state 75
    SLE             shift and go to state 76


state 126

    (57) exp_comp_eq -> exp_comp_eq SNE exp_comp .
    (60) exp_comp -> exp_comp . GT exp_plusminus
    (61) exp_comp -> exp_comp . LT exp_plusminus
    (62) exp_comp -> exp_comp . GE exp_plusminus
    (63) exp_comp -> exp_comp . LE exp_plusminus
    (64) exp_comp -> exp_comp . SLT exp_plusminus
    (65) exp_comp -> exp_comp . SGT exp_plusminus
    (66) exp_comp -> exp_comp . SGE exp_plusminus
    (67) exp_comp -> exp_comp . SLE exp_plusminus

    EQ              reduce using rule 57 (exp_comp_eq -> exp_comp_eq SNE exp_comp .)
    NE              reduce using rule 57 (exp_comp_eq -> exp_comp_eq SNE exp_comp .)
    SEQ             reduce using rule 57 (exp_comp_eq -> exp_comp_eq SNE exp_comp .)
    SNE             reduce using rule 57 (exp_comp_eq -> exp_comp_eq SNE exp_comp .)
    CMP             reduce using rule 57 (exp_comp_eq -> exp_comp_eq SNE exp_comp .)
    AND             reduce using rule 57 (exp_comp_eq -> exp_comp_eq SNE exp_comp .)
    OR              reduce using rule 57 (exp_comp_eq -> exp_comp_eq SNE exp_comp .)
    LAND            reduce using rule 57 (exp_comp_eq -> exp_comp_eq SNE exp_comp .)
    LOR             reduce using rule 57 (exp_comp_eq -> exp_comp_eq SNE exp_comp .)
    SEMICOLON       reduce using rule 57 (exp_comp_eq -> exp_comp_eq SNE exp_comp .)
    RPAREN          reduce using rule 57 (exp_comp_eq -> exp_comp_eq SNE exp_comp .)
    COMMA           reduce using rule 57 (exp_comp_eq -> exp_comp_eq SNE exp_comp .)
    GT              shift and go to state 69
    LT              shift and go to state 70
    GE              shift and go to state 71
    LE              shift and go to state 72
    SLT             shift and go to state 73
    SGT             shift and go to state 74
    SGE             shift and go to state 75
    SLE             shift and go to state 76


state 127

    (58) exp_comp_eq -> exp_comp_eq CMP exp_comp .
    (60) exp_comp -> exp_comp . GT exp_plusminus
    (61) exp_comp -> exp_comp . LT exp_plusminus
    (62) exp_comp -> exp_comp . GE exp_plusminus
    (63) exp_comp -> exp_comp . LE exp_plusminus
    (64) exp_comp -> exp_comp . SLT exp_plusminus
    (65) exp_comp -> exp_comp . SGT exp_plusminus
    (66) exp_comp -> exp_comp . SGE exp_plusminus
    (67) exp_comp -> exp_comp . SLE exp_plusminus

    EQ              reduce using rule 58 (exp_comp_eq -> exp_comp_eq CMP exp_comp .)
    NE              reduce using rule 58 (exp_comp_eq -> exp_comp_eq CMP exp_comp .)
    SEQ             reduce using rule 58 (exp_comp_eq -> exp_comp_eq CMP exp_comp .)
    SNE             reduce using rule 58 (exp_comp_eq -> exp_comp_eq CMP exp_comp .)
    CMP             reduce using rule 58 (exp_comp_eq -> exp_comp_eq CMP exp_comp .)
    AND             reduce using rule 58 (exp_comp_eq -> exp_comp_eq CMP exp_comp .)
    OR              reduce using rule 58 (exp_comp_eq -> exp_comp_eq CMP exp_comp .)
    LAND            reduce using rule 58 (exp_comp_eq -> exp_comp_eq CMP exp_comp .)
    LOR             reduce using rule 58 (exp_comp_eq -> exp_comp_eq CMP exp_comp .)
    SEMICOLON       reduce using rule 58 (exp_comp_eq -> exp_comp_eq CMP exp_comp .)
    RPAREN          reduce using rule 58 (exp_comp_eq -> exp_comp_eq CMP exp_comp .)
    COMMA           reduce using rule 58 (exp_comp_eq -> exp_comp_eq CMP exp_comp .)
    GT              shift and go to state 69
    LT              shift and go to state 70
    GE              shift and go to state 71
    LE              shift and go to state 72
    SLT             shift and go to state 73
    SGT             shift and go to state 74
    SGE             shift and go to state 75
    SLE             shift and go to state 76


state 128

    (69) exp_plusminus -> exp_plusminus PLUS exp_times_divides .
    (72) exp_times_divides -> exp_times_divides . TIMES exp_lnot
    (73) exp_times_divides -> exp_times_divides . DIVIDE exp_lnot
    (74) exp_times_divides -> exp_times_divides . MODULO exp_lnot

    PLUS            reduce using rule 69 (exp_plusminus -> exp_plusminus PLUS exp_times_divides .)
    MINUS           reduce using rule 69 (exp_plusminus -> exp_plusminus PLUS exp_times_divides .)
    GT              reduce using rule 69 (exp_plusminus -> exp_plusminus PLUS exp_times_divides .)
    LT              reduce using rule 69 (exp_plusminus -> exp_plusminus PLUS exp_times_divides .)
    GE              reduce using rule 69 (exp_plusminus -> exp_plusminus PLUS exp_times_divides .)
    LE              reduce using rule 69 (exp_plusminus -> exp_plusminus PLUS exp_times_divides .)
    SLT             reduce using rule 69 (exp_plusminus -> exp_plusminus PLUS exp_times_divides .)
    SGT             reduce using rule 69 (exp_plusminus -> exp_plusminus PLUS exp_times_divides .)
    SGE             reduce using rule 69 (exp_plusminus -> exp_plusminus PLUS exp_times_divides .)
    SLE             reduce using rule 69 (exp_plusminus -> exp_plusminus PLUS exp_times_divides .)
    EQ              reduce using rule 69 (exp_plusminus -> exp_plusminus PLUS exp_times_divides .)
    NE              reduce using rule 69 (exp_plusminus -> exp_plusminus PLUS exp_times_divides .)
    SEQ             reduce using rule 69 (exp_plusminus -> exp_plusminus PLUS exp_times_divides .)
    SNE             reduce using rule 69 (exp_plusminus -> exp_plusminus PLUS exp_times_divides .)
    CMP             reduce using rule 69 (exp_plusminus -> exp_plusminus PLUS exp_times_divides .)
    AND             reduce using rule 69 (exp_plusminus -> exp_plusminus PLUS exp_times_divides .)
    OR              reduce using rule 69 (exp_plusminus -> exp_plusminus PLUS exp_times_divides .)
    LAND            reduce using rule 69 (exp_plusminus -> exp_plusminus PLUS exp_times_divides .)
    LOR             reduce using rule 69 (exp_plusminus -> exp_plusminus PLUS exp_times_divides .)
    SEMICOLON       reduce using rule 69 (exp_plusminus -> exp_plusminus PLUS exp_times_divides .)
    RPAREN          reduce using rule 69 (exp_plusminus -> exp_plusminus PLUS exp_times_divides .)
    COMMA           reduce using rule 69 (exp_plusminus -> exp_plusminus PLUS exp_times_divides .)
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 85
    MODULO          shift and go to state 86


state 129

    (70) exp_plusminus -> exp_plusminus MINUS exp_times_divides .
    (72) exp_times_divides -> exp_times_divides . TIMES exp_lnot
    (73) exp_times_divides -> exp_times_divides . DIVIDE exp_lnot
    (74) exp_times_divides -> exp_times_divides . MODULO exp_lnot

    PLUS            reduce using rule 70 (exp_plusminus -> exp_plusminus MINUS exp_times_divides .)
    MINUS           reduce using rule 70 (exp_plusminus -> exp_plusminus MINUS exp_times_divides .)
    GT              reduce using rule 70 (exp_plusminus -> exp_plusminus MINUS exp_times_divides .)
    LT              reduce using rule 70 (exp_plusminus -> exp_plusminus MINUS exp_times_divides .)
    GE              reduce using rule 70 (exp_plusminus -> exp_plusminus MINUS exp_times_divides .)
    LE              reduce using rule 70 (exp_plusminus -> exp_plusminus MINUS exp_times_divides .)
    SLT             reduce using rule 70 (exp_plusminus -> exp_plusminus MINUS exp_times_divides .)
    SGT             reduce using rule 70 (exp_plusminus -> exp_plusminus MINUS exp_times_divides .)
    SGE             reduce using rule 70 (exp_plusminus -> exp_plusminus MINUS exp_times_divides .)
    SLE             reduce using rule 70 (exp_plusminus -> exp_plusminus MINUS exp_times_divides .)
    EQ              reduce using rule 70 (exp_plusminus -> exp_plusminus MINUS exp_times_divides .)
    NE              reduce using rule 70 (exp_plusminus -> exp_plusminus MINUS exp_times_divides .)
    SEQ             reduce using rule 70 (exp_plusminus -> exp_plusminus MINUS exp_times_divides .)
    SNE             reduce using rule 70 (exp_plusminus -> exp_plusminus MINUS exp_times_divides .)
    CMP             reduce using rule 70 (exp_plusminus -> exp_plusminus MINUS exp_times_divides .)
    AND             reduce using rule 70 (exp_plusminus -> exp_plusminus MINUS exp_times_divides .)
    OR              reduce using rule 70 (exp_plusminus -> exp_plusminus MINUS exp_times_divides .)
    LAND            reduce using rule 70 (exp_plusminus -> exp_plusminus MINUS exp_times_divides .)
    LOR             reduce using rule 70 (exp_plusminus -> exp_plusminus MINUS exp_times_divides .)
    SEMICOLON       reduce using rule 70 (exp_plusminus -> exp_plusminus MINUS exp_times_divides .)
    RPAREN          reduce using rule 70 (exp_plusminus -> exp_plusminus MINUS exp_times_divides .)
    COMMA           reduce using rule 70 (exp_plusminus -> exp_plusminus MINUS exp_times_divides .)
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 85
    MODULO          shift and go to state 86


state 130

    (72) exp_times_divides -> exp_times_divides TIMES exp_lnot .

    TIMES           reduce using rule 72 (exp_times_divides -> exp_times_divides TIMES exp_lnot .)
    DIVIDE          reduce using rule 72 (exp_times_divides -> exp_times_divides TIMES exp_lnot .)
    MODULO          reduce using rule 72 (exp_times_divides -> exp_times_divides TIMES exp_lnot .)
    PLUS            reduce using rule 72 (exp_times_divides -> exp_times_divides TIMES exp_lnot .)
    MINUS           reduce using rule 72 (exp_times_divides -> exp_times_divides TIMES exp_lnot .)
    GT              reduce using rule 72 (exp_times_divides -> exp_times_divides TIMES exp_lnot .)
    LT              reduce using rule 72 (exp_times_divides -> exp_times_divides TIMES exp_lnot .)
    GE              reduce using rule 72 (exp_times_divides -> exp_times_divides TIMES exp_lnot .)
    LE              reduce using rule 72 (exp_times_divides -> exp_times_divides TIMES exp_lnot .)
    SLT             reduce using rule 72 (exp_times_divides -> exp_times_divides TIMES exp_lnot .)
    SGT             reduce using rule 72 (exp_times_divides -> exp_times_divides TIMES exp_lnot .)
    SGE             reduce using rule 72 (exp_times_divides -> exp_times_divides TIMES exp_lnot .)
    SLE             reduce using rule 72 (exp_times_divides -> exp_times_divides TIMES exp_lnot .)
    EQ              reduce using rule 72 (exp_times_divides -> exp_times_divides TIMES exp_lnot .)
    NE              reduce using rule 72 (exp_times_divides -> exp_times_divides TIMES exp_lnot .)
    SEQ             reduce using rule 72 (exp_times_divides -> exp_times_divides TIMES exp_lnot .)
    SNE             reduce using rule 72 (exp_times_divides -> exp_times_divides TIMES exp_lnot .)
    CMP             reduce using rule 72 (exp_times_divides -> exp_times_divides TIMES exp_lnot .)
    AND             reduce using rule 72 (exp_times_divides -> exp_times_divides TIMES exp_lnot .)
    OR              reduce using rule 72 (exp_times_divides -> exp_times_divides TIMES exp_lnot .)
    LAND            reduce using rule 72 (exp_times_divides -> exp_times_divides TIMES exp_lnot .)
    LOR             reduce using rule 72 (exp_times_divides -> exp_times_divides TIMES exp_lnot .)
    SEMICOLON       reduce using rule 72 (exp_times_divides -> exp_times_divides TIMES exp_lnot .)
    RPAREN          reduce using rule 72 (exp_times_divides -> exp_times_divides TIMES exp_lnot .)
    COMMA           reduce using rule 72 (exp_times_divides -> exp_times_divides TIMES exp_lnot .)


state 131

    (73) exp_times_divides -> exp_times_divides DIVIDE exp_lnot .

    TIMES           reduce using rule 73 (exp_times_divides -> exp_times_divides DIVIDE exp_lnot .)
    DIVIDE          reduce using rule 73 (exp_times_divides -> exp_times_divides DIVIDE exp_lnot .)
    MODULO          reduce using rule 73 (exp_times_divides -> exp_times_divides DIVIDE exp_lnot .)
    PLUS            reduce using rule 73 (exp_times_divides -> exp_times_divides DIVIDE exp_lnot .)
    MINUS           reduce using rule 73 (exp_times_divides -> exp_times_divides DIVIDE exp_lnot .)
    GT              reduce using rule 73 (exp_times_divides -> exp_times_divides DIVIDE exp_lnot .)
    LT              reduce using rule 73 (exp_times_divides -> exp_times_divides DIVIDE exp_lnot .)
    GE              reduce using rule 73 (exp_times_divides -> exp_times_divides DIVIDE exp_lnot .)
    LE              reduce using rule 73 (exp_times_divides -> exp_times_divides DIVIDE exp_lnot .)
    SLT             reduce using rule 73 (exp_times_divides -> exp_times_divides DIVIDE exp_lnot .)
    SGT             reduce using rule 73 (exp_times_divides -> exp_times_divides DIVIDE exp_lnot .)
    SGE             reduce using rule 73 (exp_times_divides -> exp_times_divides DIVIDE exp_lnot .)
    SLE             reduce using rule 73 (exp_times_divides -> exp_times_divides DIVIDE exp_lnot .)
    EQ              reduce using rule 73 (exp_times_divides -> exp_times_divides DIVIDE exp_lnot .)
    NE              reduce using rule 73 (exp_times_divides -> exp_times_divides DIVIDE exp_lnot .)
    SEQ             reduce using rule 73 (exp_times_divides -> exp_times_divides DIVIDE exp_lnot .)
    SNE             reduce using rule 73 (exp_times_divides -> exp_times_divides DIVIDE exp_lnot .)
    CMP             reduce using rule 73 (exp_times_divides -> exp_times_divides DIVIDE exp_lnot .)
    AND             reduce using rule 73 (exp_times_divides -> exp_times_divides DIVIDE exp_lnot .)
    OR              reduce using rule 73 (exp_times_divides -> exp_times_divides DIVIDE exp_lnot .)
    LAND            reduce using rule 73 (exp_times_divides -> exp_times_divides DIVIDE exp_lnot .)
    LOR             reduce using rule 73 (exp_times_divides -> exp_times_divides DIVIDE exp_lnot .)
    SEMICOLON       reduce using rule 73 (exp_times_divides -> exp_times_divides DIVIDE exp_lnot .)
    RPAREN          reduce using rule 73 (exp_times_divides -> exp_times_divides DIVIDE exp_lnot .)
    COMMA           reduce using rule 73 (exp_times_divides -> exp_times_divides DIVIDE exp_lnot .)


state 132

    (74) exp_times_divides -> exp_times_divides MODULO exp_lnot .

    TIMES           reduce using rule 74 (exp_times_divides -> exp_times_divides MODULO exp_lnot .)
    DIVIDE          reduce using rule 74 (exp_times_divides -> exp_times_divides MODULO exp_lnot .)
    MODULO          reduce using rule 74 (exp_times_divides -> exp_times_divides MODULO exp_lnot .)
    PLUS            reduce using rule 74 (exp_times_divides -> exp_times_divides MODULO exp_lnot .)
    MINUS           reduce using rule 74 (exp_times_divides -> exp_times_divides MODULO exp_lnot .)
    GT              reduce using rule 74 (exp_times_divides -> exp_times_divides MODULO exp_lnot .)
    LT              reduce using rule 74 (exp_times_divides -> exp_times_divides MODULO exp_lnot .)
    GE              reduce using rule 74 (exp_times_divides -> exp_times_divides MODULO exp_lnot .)
    LE              reduce using rule 74 (exp_times_divides -> exp_times_divides MODULO exp_lnot .)
    SLT             reduce using rule 74 (exp_times_divides -> exp_times_divides MODULO exp_lnot .)
    SGT             reduce using rule 74 (exp_times_divides -> exp_times_divides MODULO exp_lnot .)
    SGE             reduce using rule 74 (exp_times_divides -> exp_times_divides MODULO exp_lnot .)
    SLE             reduce using rule 74 (exp_times_divides -> exp_times_divides MODULO exp_lnot .)
    EQ              reduce using rule 74 (exp_times_divides -> exp_times_divides MODULO exp_lnot .)
    NE              reduce using rule 74 (exp_times_divides -> exp_times_divides MODULO exp_lnot .)
    SEQ             reduce using rule 74 (exp_times_divides -> exp_times_divides MODULO exp_lnot .)
    SNE             reduce using rule 74 (exp_times_divides -> exp_times_divides MODULO exp_lnot .)
    CMP             reduce using rule 74 (exp_times_divides -> exp_times_divides MODULO exp_lnot .)
    AND             reduce using rule 74 (exp_times_divides -> exp_times_divides MODULO exp_lnot .)
    OR              reduce using rule 74 (exp_times_divides -> exp_times_divides MODULO exp_lnot .)
    LAND            reduce using rule 74 (exp_times_divides -> exp_times_divides MODULO exp_lnot .)
    LOR             reduce using rule 74 (exp_times_divides -> exp_times_divides MODULO exp_lnot .)
    SEMICOLON       reduce using rule 74 (exp_times_divides -> exp_times_divides MODULO exp_lnot .)
    RPAREN          reduce using rule 74 (exp_times_divides -> exp_times_divides MODULO exp_lnot .)
    COMMA           reduce using rule 74 (exp_times_divides -> exp_times_divides MODULO exp_lnot .)


state 133

    (31) function -> SUB ID LPAREN RPAREN . LBRACE blockcode RBRACE

    LBRACE          shift and go to state 143


state 134

    (32) function -> SUB ID LPAREN function_assignments . RPAREN LBRACE blockcode RBRACE

    RPAREN          shift and go to state 144


state 135

    (36) call -> ID LPAREN function_assignments RPAREN .

    SEMICOLON       reduce using rule 36 (call -> ID LPAREN function_assignments RPAREN .)
    TIMES           reduce using rule 36 (call -> ID LPAREN function_assignments RPAREN .)
    DIVIDE          reduce using rule 36 (call -> ID LPAREN function_assignments RPAREN .)
    MODULO          reduce using rule 36 (call -> ID LPAREN function_assignments RPAREN .)
    PLUS            reduce using rule 36 (call -> ID LPAREN function_assignments RPAREN .)
    MINUS           reduce using rule 36 (call -> ID LPAREN function_assignments RPAREN .)
    GT              reduce using rule 36 (call -> ID LPAREN function_assignments RPAREN .)
    LT              reduce using rule 36 (call -> ID LPAREN function_assignments RPAREN .)
    GE              reduce using rule 36 (call -> ID LPAREN function_assignments RPAREN .)
    LE              reduce using rule 36 (call -> ID LPAREN function_assignments RPAREN .)
    SLT             reduce using rule 36 (call -> ID LPAREN function_assignments RPAREN .)
    SGT             reduce using rule 36 (call -> ID LPAREN function_assignments RPAREN .)
    SGE             reduce using rule 36 (call -> ID LPAREN function_assignments RPAREN .)
    SLE             reduce using rule 36 (call -> ID LPAREN function_assignments RPAREN .)
    EQ              reduce using rule 36 (call -> ID LPAREN function_assignments RPAREN .)
    NE              reduce using rule 36 (call -> ID LPAREN function_assignments RPAREN .)
    SEQ             reduce using rule 36 (call -> ID LPAREN function_assignments RPAREN .)
    SNE             reduce using rule 36 (call -> ID LPAREN function_assignments RPAREN .)
    CMP             reduce using rule 36 (call -> ID LPAREN function_assignments RPAREN .)
    AND             reduce using rule 36 (call -> ID LPAREN function_assignments RPAREN .)
    OR              reduce using rule 36 (call -> ID LPAREN function_assignments RPAREN .)
    LAND            reduce using rule 36 (call -> ID LPAREN function_assignments RPAREN .)
    LOR             reduce using rule 36 (call -> ID LPAREN function_assignments RPAREN .)
    RPAREN          reduce using rule 36 (call -> ID LPAREN function_assignments RPAREN .)
    COMMA           reduce using rule 36 (call -> ID LPAREN function_assignments RPAREN .)


state 136

    (34) function_assignments -> exp COMMA . function_assignments
    (33) function_assignments -> . exp
    (34) function_assignments -> . exp COMMA function_assignments
    (38) exp -> . ID_SC EQUALS exp_lor
    (39) exp -> . ID_LI EQUALS exp_lor
    (40) exp -> . ID_SC MINUSEQUAL exp_lor
    (41) exp -> . ID_SC PLUSEQUAL exp_lor
    (42) exp -> . ID_SC MODEQUAL exp_lor
    (43) exp -> . ID_SC DIVEQUAL exp_lor
    (44) exp -> . ID_SC TIMESEQUAL exp_lor
    (45) exp -> . exp_lor
    (46) exp_lor -> . exp_lor LOR exp_land
    (47) exp_lor -> . exp_land
    (48) exp_land -> . exp_land LAND exp_or
    (49) exp_land -> . exp_or
    (50) exp_or -> . exp_or OR exp_and
    (51) exp_or -> . exp_and
    (52) exp_and -> . exp_and AND exp_comp
    (53) exp_and -> . exp_comp_eq
    (54) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (55) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (56) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (57) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (58) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (59) exp_comp_eq -> . exp_comp
    (60) exp_comp -> . exp_comp GT exp_plusminus
    (61) exp_comp -> . exp_comp LT exp_plusminus
    (62) exp_comp -> . exp_comp GE exp_plusminus
    (63) exp_comp -> . exp_comp LE exp_plusminus
    (64) exp_comp -> . exp_comp SLT exp_plusminus
    (65) exp_comp -> . exp_comp SGT exp_plusminus
    (66) exp_comp -> . exp_comp SGE exp_plusminus
    (67) exp_comp -> . exp_comp SLE exp_plusminus
    (68) exp_comp -> . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN

    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 20
    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    COMMA           reduce using rule 78 (exp_decrement_increment -> .)
    RPAREN          reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 12

    exp                            shift and go to state 96
    function_assignments           shift and go to state 145
    exp_lor                        shift and go to state 19
    exp_land                       shift and go to state 24
    exp_or                         shift and go to state 25
    exp_and                        shift and go to state 26
    exp_comp                       shift and go to state 27
    exp_comp_eq                    shift and go to state 28
    exp_plusminus                  shift and go to state 29
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36
    call                           shift and go to state 46

state 137

    (14) if -> IF LPAREN exp RPAREN . if_statement
    (15) if_statement -> . LBRACE blockcode RBRACE
    (16) if_statement -> . LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE
    (17) if_statement -> . LBRACE blockcode RBRACE elsif

    LBRACE          shift and go to state 147

    if_statement                   shift and go to state 146

state 138

    (25) for -> FOR LPAREN for_assignments SEMICOLON . exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (38) exp -> . ID_SC EQUALS exp_lor
    (39) exp -> . ID_LI EQUALS exp_lor
    (40) exp -> . ID_SC MINUSEQUAL exp_lor
    (41) exp -> . ID_SC PLUSEQUAL exp_lor
    (42) exp -> . ID_SC MODEQUAL exp_lor
    (43) exp -> . ID_SC DIVEQUAL exp_lor
    (44) exp -> . ID_SC TIMESEQUAL exp_lor
    (45) exp -> . exp_lor
    (46) exp_lor -> . exp_lor LOR exp_land
    (47) exp_lor -> . exp_land
    (48) exp_land -> . exp_land LAND exp_or
    (49) exp_land -> . exp_or
    (50) exp_or -> . exp_or OR exp_and
    (51) exp_or -> . exp_and
    (52) exp_and -> . exp_and AND exp_comp
    (53) exp_and -> . exp_comp_eq
    (54) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (55) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (56) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (57) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (58) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (59) exp_comp_eq -> . exp_comp
    (60) exp_comp -> . exp_comp GT exp_plusminus
    (61) exp_comp -> . exp_comp LT exp_plusminus
    (62) exp_comp -> . exp_comp GE exp_plusminus
    (63) exp_comp -> . exp_comp LE exp_plusminus
    (64) exp_comp -> . exp_comp SLT exp_plusminus
    (65) exp_comp -> . exp_comp SGT exp_plusminus
    (66) exp_comp -> . exp_comp SGE exp_plusminus
    (67) exp_comp -> . exp_comp SLE exp_plusminus
    (68) exp_comp -> . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN

    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 20
    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    SEMICOLON       reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 12

    exp                            shift and go to state 148
    exp_lor                        shift and go to state 19
    exp_land                       shift and go to state 24
    exp_or                         shift and go to state 25
    exp_and                        shift and go to state 26
    exp_comp                       shift and go to state 27
    exp_comp_eq                    shift and go to state 28
    exp_plusminus                  shift and go to state 29
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36
    call                           shift and go to state 46

state 139

    (27) for_assignments -> exp COMMA . for_assignments
    (26) for_assignments -> . exp
    (27) for_assignments -> . exp COMMA for_assignments
    (38) exp -> . ID_SC EQUALS exp_lor
    (39) exp -> . ID_LI EQUALS exp_lor
    (40) exp -> . ID_SC MINUSEQUAL exp_lor
    (41) exp -> . ID_SC PLUSEQUAL exp_lor
    (42) exp -> . ID_SC MODEQUAL exp_lor
    (43) exp -> . ID_SC DIVEQUAL exp_lor
    (44) exp -> . ID_SC TIMESEQUAL exp_lor
    (45) exp -> . exp_lor
    (46) exp_lor -> . exp_lor LOR exp_land
    (47) exp_lor -> . exp_land
    (48) exp_land -> . exp_land LAND exp_or
    (49) exp_land -> . exp_or
    (50) exp_or -> . exp_or OR exp_and
    (51) exp_or -> . exp_and
    (52) exp_and -> . exp_and AND exp_comp
    (53) exp_and -> . exp_comp_eq
    (54) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (55) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (56) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (57) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (58) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (59) exp_comp_eq -> . exp_comp
    (60) exp_comp -> . exp_comp GT exp_plusminus
    (61) exp_comp -> . exp_comp LT exp_plusminus
    (62) exp_comp -> . exp_comp GE exp_plusminus
    (63) exp_comp -> . exp_comp LE exp_plusminus
    (64) exp_comp -> . exp_comp SLT exp_plusminus
    (65) exp_comp -> . exp_comp SGT exp_plusminus
    (66) exp_comp -> . exp_comp SGE exp_plusminus
    (67) exp_comp -> . exp_comp SLE exp_plusminus
    (68) exp_comp -> . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN

    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 20
    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    COMMA           reduce using rule 78 (exp_decrement_increment -> .)
    SEMICOLON       reduce using rule 78 (exp_decrement_increment -> .)
    RPAREN          reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 12

    exp                            shift and go to state 108
    for_assignments                shift and go to state 149
    exp_lor                        shift and go to state 19
    exp_land                       shift and go to state 24
    exp_or                         shift and go to state 25
    exp_and                        shift and go to state 26
    exp_comp                       shift and go to state 27
    exp_comp_eq                    shift and go to state 28
    exp_plusminus                  shift and go to state 29
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36
    call                           shift and go to state 46

state 140

    (28) dowhile -> DO LBRACE blockcode RBRACE . WHILE LPAREN exp RPAREN

    WHILE           shift and go to state 150


state 141

    (6) blockcode -> blockcode command .

    RBRACE          reduce using rule 6 (blockcode -> blockcode command .)
    RETURN          reduce using rule 6 (blockcode -> blockcode command .)
    BREAK           reduce using rule 6 (blockcode -> blockcode command .)
    CONTINUE        reduce using rule 6 (blockcode -> blockcode command .)
    IF              reduce using rule 6 (blockcode -> blockcode command .)
    ID_SC           reduce using rule 6 (blockcode -> blockcode command .)
    ID_LI           reduce using rule 6 (blockcode -> blockcode command .)
    ID              reduce using rule 6 (blockcode -> blockcode command .)
    FOR             reduce using rule 6 (blockcode -> blockcode command .)
    DO              reduce using rule 6 (blockcode -> blockcode command .)
    WHILE           reduce using rule 6 (blockcode -> blockcode command .)
    XOR             reduce using rule 6 (blockcode -> blockcode command .)
    INCREMENT       reduce using rule 6 (blockcode -> blockcode command .)
    DECREMENT       reduce using rule 6 (blockcode -> blockcode command .)
    LPAREN          reduce using rule 6 (blockcode -> blockcode command .)
    NUMBER          reduce using rule 6 (blockcode -> blockcode command .)
    TRUE            reduce using rule 6 (blockcode -> blockcode command .)
    FALSE           reduce using rule 6 (blockcode -> blockcode command .)
    SEMICOLON       reduce using rule 6 (blockcode -> blockcode command .)
    LOR             reduce using rule 6 (blockcode -> blockcode command .)
    LAND            reduce using rule 6 (blockcode -> blockcode command .)
    OR              reduce using rule 6 (blockcode -> blockcode command .)
    AND             reduce using rule 6 (blockcode -> blockcode command .)
    EQ              reduce using rule 6 (blockcode -> blockcode command .)
    NE              reduce using rule 6 (blockcode -> blockcode command .)
    SEQ             reduce using rule 6 (blockcode -> blockcode command .)
    SNE             reduce using rule 6 (blockcode -> blockcode command .)
    CMP             reduce using rule 6 (blockcode -> blockcode command .)
    GT              reduce using rule 6 (blockcode -> blockcode command .)
    LT              reduce using rule 6 (blockcode -> blockcode command .)
    GE              reduce using rule 6 (blockcode -> blockcode command .)
    LE              reduce using rule 6 (blockcode -> blockcode command .)
    SLT             reduce using rule 6 (blockcode -> blockcode command .)
    SGT             reduce using rule 6 (blockcode -> blockcode command .)
    SGE             reduce using rule 6 (blockcode -> blockcode command .)
    SLE             reduce using rule 6 (blockcode -> blockcode command .)
    PLUS            reduce using rule 6 (blockcode -> blockcode command .)
    MINUS           reduce using rule 6 (blockcode -> blockcode command .)
    TIMES           reduce using rule 6 (blockcode -> blockcode command .)
    DIVIDE          reduce using rule 6 (blockcode -> blockcode command .)
    MODULO          reduce using rule 6 (blockcode -> blockcode command .)


state 142

    (29) while -> WHILE LPAREN exp RPAREN . LBRACE blockcode RBRACE
    (30) while -> WHILE LPAREN exp RPAREN . LBRACE RBRACE

    LBRACE          shift and go to state 151


state 143

    (31) function -> SUB ID LPAREN RPAREN LBRACE . blockcode RBRACE
    (5) blockcode -> . command
    (6) blockcode -> . blockcode command
    (7) command -> . interations
    (8) command -> . if
    (9) command -> . exp SEMICOLON
    (10) command -> . call SEMICOLON
    (11) command -> . RETURN return SEMICOLON
    (12) command -> . BREAK SEMICOLON
    (13) command -> . CONTINUE SEMICOLON
    (22) interations -> . for
    (23) interations -> . dowhile
    (24) interations -> . while
    (14) if -> . IF LPAREN exp RPAREN if_statement
    (38) exp -> . ID_SC EQUALS exp_lor
    (39) exp -> . ID_LI EQUALS exp_lor
    (40) exp -> . ID_SC MINUSEQUAL exp_lor
    (41) exp -> . ID_SC PLUSEQUAL exp_lor
    (42) exp -> . ID_SC MODEQUAL exp_lor
    (43) exp -> . ID_SC DIVEQUAL exp_lor
    (44) exp -> . ID_SC TIMESEQUAL exp_lor
    (45) exp -> . exp_lor
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN
    (25) for -> . FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (28) dowhile -> . DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN
    (29) while -> . WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE
    (30) while -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (46) exp_lor -> . exp_lor LOR exp_land
    (47) exp_lor -> . exp_land
    (48) exp_land -> . exp_land LAND exp_or
    (49) exp_land -> . exp_or
    (50) exp_or -> . exp_or OR exp_and
    (51) exp_or -> . exp_and
    (52) exp_and -> . exp_and AND exp_comp
    (53) exp_and -> . exp_comp_eq
    (54) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (55) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (56) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (57) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (58) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (59) exp_comp_eq -> . exp_comp
    (60) exp_comp -> . exp_comp GT exp_plusminus
    (61) exp_comp -> . exp_comp LT exp_plusminus
    (62) exp_comp -> . exp_comp GE exp_plusminus
    (63) exp_comp -> . exp_comp LE exp_plusminus
    (64) exp_comp -> . exp_comp SLT exp_plusminus
    (65) exp_comp -> . exp_comp SGT exp_plusminus
    (66) exp_comp -> . exp_comp SGE exp_plusminus
    (67) exp_comp -> . exp_comp SLE exp_plusminus
    (68) exp_comp -> . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE

    RETURN          shift and go to state 8
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    IF              shift and go to state 17
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 20
    ID              shift and go to state 12
    FOR             shift and go to state 21
    DO              shift and go to state 22
    WHILE           shift and go to state 23
    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    SEMICOLON       reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    blockcode                      shift and go to state 152
    command                        shift and go to state 110
    interations                    shift and go to state 4
    if                             shift and go to state 5
    exp                            shift and go to state 6
    call                           shift and go to state 7
    for                            shift and go to state 14
    dowhile                        shift and go to state 15
    while                          shift and go to state 16
    exp_lor                        shift and go to state 19
    exp_land                       shift and go to state 24
    exp_or                         shift and go to state 25
    exp_and                        shift and go to state 26
    exp_comp                       shift and go to state 27
    exp_comp_eq                    shift and go to state 28
    exp_plusminus                  shift and go to state 29
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36

state 144

    (32) function -> SUB ID LPAREN function_assignments RPAREN . LBRACE blockcode RBRACE

    LBRACE          shift and go to state 153


state 145

    (34) function_assignments -> exp COMMA function_assignments .

    RPAREN          reduce using rule 34 (function_assignments -> exp COMMA function_assignments .)


state 146

    (14) if -> IF LPAREN exp RPAREN if_statement .

    RETURN          reduce using rule 14 (if -> IF LPAREN exp RPAREN if_statement .)
    BREAK           reduce using rule 14 (if -> IF LPAREN exp RPAREN if_statement .)
    CONTINUE        reduce using rule 14 (if -> IF LPAREN exp RPAREN if_statement .)
    SUB             reduce using rule 14 (if -> IF LPAREN exp RPAREN if_statement .)
    IF              reduce using rule 14 (if -> IF LPAREN exp RPAREN if_statement .)
    ID_SC           reduce using rule 14 (if -> IF LPAREN exp RPAREN if_statement .)
    ID_LI           reduce using rule 14 (if -> IF LPAREN exp RPAREN if_statement .)
    ID              reduce using rule 14 (if -> IF LPAREN exp RPAREN if_statement .)
    FOR             reduce using rule 14 (if -> IF LPAREN exp RPAREN if_statement .)
    DO              reduce using rule 14 (if -> IF LPAREN exp RPAREN if_statement .)
    WHILE           reduce using rule 14 (if -> IF LPAREN exp RPAREN if_statement .)
    XOR             reduce using rule 14 (if -> IF LPAREN exp RPAREN if_statement .)
    INCREMENT       reduce using rule 14 (if -> IF LPAREN exp RPAREN if_statement .)
    DECREMENT       reduce using rule 14 (if -> IF LPAREN exp RPAREN if_statement .)
    LPAREN          reduce using rule 14 (if -> IF LPAREN exp RPAREN if_statement .)
    NUMBER          reduce using rule 14 (if -> IF LPAREN exp RPAREN if_statement .)
    TRUE            reduce using rule 14 (if -> IF LPAREN exp RPAREN if_statement .)
    FALSE           reduce using rule 14 (if -> IF LPAREN exp RPAREN if_statement .)
    SEMICOLON       reduce using rule 14 (if -> IF LPAREN exp RPAREN if_statement .)
    LOR             reduce using rule 14 (if -> IF LPAREN exp RPAREN if_statement .)
    LAND            reduce using rule 14 (if -> IF LPAREN exp RPAREN if_statement .)
    OR              reduce using rule 14 (if -> IF LPAREN exp RPAREN if_statement .)
    AND             reduce using rule 14 (if -> IF LPAREN exp RPAREN if_statement .)
    EQ              reduce using rule 14 (if -> IF LPAREN exp RPAREN if_statement .)
    NE              reduce using rule 14 (if -> IF LPAREN exp RPAREN if_statement .)
    SEQ             reduce using rule 14 (if -> IF LPAREN exp RPAREN if_statement .)
    SNE             reduce using rule 14 (if -> IF LPAREN exp RPAREN if_statement .)
    CMP             reduce using rule 14 (if -> IF LPAREN exp RPAREN if_statement .)
    GT              reduce using rule 14 (if -> IF LPAREN exp RPAREN if_statement .)
    LT              reduce using rule 14 (if -> IF LPAREN exp RPAREN if_statement .)
    GE              reduce using rule 14 (if -> IF LPAREN exp RPAREN if_statement .)
    LE              reduce using rule 14 (if -> IF LPAREN exp RPAREN if_statement .)
    SLT             reduce using rule 14 (if -> IF LPAREN exp RPAREN if_statement .)
    SGT             reduce using rule 14 (if -> IF LPAREN exp RPAREN if_statement .)
    SGE             reduce using rule 14 (if -> IF LPAREN exp RPAREN if_statement .)
    SLE             reduce using rule 14 (if -> IF LPAREN exp RPAREN if_statement .)
    PLUS            reduce using rule 14 (if -> IF LPAREN exp RPAREN if_statement .)
    MINUS           reduce using rule 14 (if -> IF LPAREN exp RPAREN if_statement .)
    TIMES           reduce using rule 14 (if -> IF LPAREN exp RPAREN if_statement .)
    DIVIDE          reduce using rule 14 (if -> IF LPAREN exp RPAREN if_statement .)
    MODULO          reduce using rule 14 (if -> IF LPAREN exp RPAREN if_statement .)
    $end            reduce using rule 14 (if -> IF LPAREN exp RPAREN if_statement .)
    RBRACE          reduce using rule 14 (if -> IF LPAREN exp RPAREN if_statement .)


state 147

    (15) if_statement -> LBRACE . blockcode RBRACE
    (16) if_statement -> LBRACE . blockcode RBRACE ELSE LBRACE blockcode RBRACE
    (17) if_statement -> LBRACE . blockcode RBRACE elsif
    (5) blockcode -> . command
    (6) blockcode -> . blockcode command
    (7) command -> . interations
    (8) command -> . if
    (9) command -> . exp SEMICOLON
    (10) command -> . call SEMICOLON
    (11) command -> . RETURN return SEMICOLON
    (12) command -> . BREAK SEMICOLON
    (13) command -> . CONTINUE SEMICOLON
    (22) interations -> . for
    (23) interations -> . dowhile
    (24) interations -> . while
    (14) if -> . IF LPAREN exp RPAREN if_statement
    (38) exp -> . ID_SC EQUALS exp_lor
    (39) exp -> . ID_LI EQUALS exp_lor
    (40) exp -> . ID_SC MINUSEQUAL exp_lor
    (41) exp -> . ID_SC PLUSEQUAL exp_lor
    (42) exp -> . ID_SC MODEQUAL exp_lor
    (43) exp -> . ID_SC DIVEQUAL exp_lor
    (44) exp -> . ID_SC TIMESEQUAL exp_lor
    (45) exp -> . exp_lor
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN
    (25) for -> . FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (28) dowhile -> . DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN
    (29) while -> . WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE
    (30) while -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (46) exp_lor -> . exp_lor LOR exp_land
    (47) exp_lor -> . exp_land
    (48) exp_land -> . exp_land LAND exp_or
    (49) exp_land -> . exp_or
    (50) exp_or -> . exp_or OR exp_and
    (51) exp_or -> . exp_and
    (52) exp_and -> . exp_and AND exp_comp
    (53) exp_and -> . exp_comp_eq
    (54) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (55) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (56) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (57) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (58) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (59) exp_comp_eq -> . exp_comp
    (60) exp_comp -> . exp_comp GT exp_plusminus
    (61) exp_comp -> . exp_comp LT exp_plusminus
    (62) exp_comp -> . exp_comp GE exp_plusminus
    (63) exp_comp -> . exp_comp LE exp_plusminus
    (64) exp_comp -> . exp_comp SLT exp_plusminus
    (65) exp_comp -> . exp_comp SGT exp_plusminus
    (66) exp_comp -> . exp_comp SGE exp_plusminus
    (67) exp_comp -> . exp_comp SLE exp_plusminus
    (68) exp_comp -> . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE

    RETURN          shift and go to state 8
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    IF              shift and go to state 17
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 20
    ID              shift and go to state 12
    FOR             shift and go to state 21
    DO              shift and go to state 22
    WHILE           shift and go to state 23
    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    SEMICOLON       reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    blockcode                      shift and go to state 154
    command                        shift and go to state 110
    interations                    shift and go to state 4
    if                             shift and go to state 5
    exp                            shift and go to state 6
    call                           shift and go to state 7
    for                            shift and go to state 14
    dowhile                        shift and go to state 15
    while                          shift and go to state 16
    exp_lor                        shift and go to state 19
    exp_land                       shift and go to state 24
    exp_or                         shift and go to state 25
    exp_and                        shift and go to state 26
    exp_comp                       shift and go to state 27
    exp_comp_eq                    shift and go to state 28
    exp_plusminus                  shift and go to state 29
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36

state 148

    (25) for -> FOR LPAREN for_assignments SEMICOLON exp . SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE

    SEMICOLON       shift and go to state 155


state 149

    (27) for_assignments -> exp COMMA for_assignments .

    SEMICOLON       reduce using rule 27 (for_assignments -> exp COMMA for_assignments .)
    RPAREN          reduce using rule 27 (for_assignments -> exp COMMA for_assignments .)


state 150

    (28) dowhile -> DO LBRACE blockcode RBRACE WHILE . LPAREN exp RPAREN

    LPAREN          shift and go to state 156


state 151

    (29) while -> WHILE LPAREN exp RPAREN LBRACE . blockcode RBRACE
    (30) while -> WHILE LPAREN exp RPAREN LBRACE . RBRACE
    (5) blockcode -> . command
    (6) blockcode -> . blockcode command
    (7) command -> . interations
    (8) command -> . if
    (9) command -> . exp SEMICOLON
    (10) command -> . call SEMICOLON
    (11) command -> . RETURN return SEMICOLON
    (12) command -> . BREAK SEMICOLON
    (13) command -> . CONTINUE SEMICOLON
    (22) interations -> . for
    (23) interations -> . dowhile
    (24) interations -> . while
    (14) if -> . IF LPAREN exp RPAREN if_statement
    (38) exp -> . ID_SC EQUALS exp_lor
    (39) exp -> . ID_LI EQUALS exp_lor
    (40) exp -> . ID_SC MINUSEQUAL exp_lor
    (41) exp -> . ID_SC PLUSEQUAL exp_lor
    (42) exp -> . ID_SC MODEQUAL exp_lor
    (43) exp -> . ID_SC DIVEQUAL exp_lor
    (44) exp -> . ID_SC TIMESEQUAL exp_lor
    (45) exp -> . exp_lor
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN
    (25) for -> . FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (28) dowhile -> . DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN
    (29) while -> . WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE
    (30) while -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (46) exp_lor -> . exp_lor LOR exp_land
    (47) exp_lor -> . exp_land
    (48) exp_land -> . exp_land LAND exp_or
    (49) exp_land -> . exp_or
    (50) exp_or -> . exp_or OR exp_and
    (51) exp_or -> . exp_and
    (52) exp_and -> . exp_and AND exp_comp
    (53) exp_and -> . exp_comp_eq
    (54) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (55) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (56) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (57) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (58) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (59) exp_comp_eq -> . exp_comp
    (60) exp_comp -> . exp_comp GT exp_plusminus
    (61) exp_comp -> . exp_comp LT exp_plusminus
    (62) exp_comp -> . exp_comp GE exp_plusminus
    (63) exp_comp -> . exp_comp LE exp_plusminus
    (64) exp_comp -> . exp_comp SLT exp_plusminus
    (65) exp_comp -> . exp_comp SGT exp_plusminus
    (66) exp_comp -> . exp_comp SGE exp_plusminus
    (67) exp_comp -> . exp_comp SLE exp_plusminus
    (68) exp_comp -> . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE

    RBRACE          shift and go to state 158
    RETURN          shift and go to state 8
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    IF              shift and go to state 17
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 20
    ID              shift and go to state 12
    FOR             shift and go to state 21
    DO              shift and go to state 22
    WHILE           shift and go to state 23
    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    SEMICOLON       reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    exp                            shift and go to state 6
    blockcode                      shift and go to state 157
    command                        shift and go to state 110
    interations                    shift and go to state 4
    if                             shift and go to state 5
    call                           shift and go to state 7
    for                            shift and go to state 14
    dowhile                        shift and go to state 15
    while                          shift and go to state 16
    exp_lor                        shift and go to state 19
    exp_land                       shift and go to state 24
    exp_or                         shift and go to state 25
    exp_and                        shift and go to state 26
    exp_comp                       shift and go to state 27
    exp_comp_eq                    shift and go to state 28
    exp_plusminus                  shift and go to state 29
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36

state 152

    (31) function -> SUB ID LPAREN RPAREN LBRACE blockcode . RBRACE
    (6) blockcode -> blockcode . command
    (7) command -> . interations
    (8) command -> . if
    (9) command -> . exp SEMICOLON
    (10) command -> . call SEMICOLON
    (11) command -> . RETURN return SEMICOLON
    (12) command -> . BREAK SEMICOLON
    (13) command -> . CONTINUE SEMICOLON
    (22) interations -> . for
    (23) interations -> . dowhile
    (24) interations -> . while
    (14) if -> . IF LPAREN exp RPAREN if_statement
    (38) exp -> . ID_SC EQUALS exp_lor
    (39) exp -> . ID_LI EQUALS exp_lor
    (40) exp -> . ID_SC MINUSEQUAL exp_lor
    (41) exp -> . ID_SC PLUSEQUAL exp_lor
    (42) exp -> . ID_SC MODEQUAL exp_lor
    (43) exp -> . ID_SC DIVEQUAL exp_lor
    (44) exp -> . ID_SC TIMESEQUAL exp_lor
    (45) exp -> . exp_lor
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN
    (25) for -> . FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (28) dowhile -> . DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN
    (29) while -> . WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE
    (30) while -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (46) exp_lor -> . exp_lor LOR exp_land
    (47) exp_lor -> . exp_land
    (48) exp_land -> . exp_land LAND exp_or
    (49) exp_land -> . exp_or
    (50) exp_or -> . exp_or OR exp_and
    (51) exp_or -> . exp_and
    (52) exp_and -> . exp_and AND exp_comp
    (53) exp_and -> . exp_comp_eq
    (54) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (55) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (56) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (57) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (58) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (59) exp_comp_eq -> . exp_comp
    (60) exp_comp -> . exp_comp GT exp_plusminus
    (61) exp_comp -> . exp_comp LT exp_plusminus
    (62) exp_comp -> . exp_comp GE exp_plusminus
    (63) exp_comp -> . exp_comp LE exp_plusminus
    (64) exp_comp -> . exp_comp SLT exp_plusminus
    (65) exp_comp -> . exp_comp SGT exp_plusminus
    (66) exp_comp -> . exp_comp SGE exp_plusminus
    (67) exp_comp -> . exp_comp SLE exp_plusminus
    (68) exp_comp -> . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE

    RBRACE          shift and go to state 159
    RETURN          shift and go to state 8
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    IF              shift and go to state 17
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 20
    ID              shift and go to state 12
    FOR             shift and go to state 21
    DO              shift and go to state 22
    WHILE           shift and go to state 23
    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    SEMICOLON       reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    command                        shift and go to state 141
    interations                    shift and go to state 4
    if                             shift and go to state 5
    exp                            shift and go to state 6
    call                           shift and go to state 7
    for                            shift and go to state 14
    dowhile                        shift and go to state 15
    while                          shift and go to state 16
    exp_lor                        shift and go to state 19
    exp_land                       shift and go to state 24
    exp_or                         shift and go to state 25
    exp_and                        shift and go to state 26
    exp_comp                       shift and go to state 27
    exp_comp_eq                    shift and go to state 28
    exp_plusminus                  shift and go to state 29
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36

state 153

    (32) function -> SUB ID LPAREN function_assignments RPAREN LBRACE . blockcode RBRACE
    (5) blockcode -> . command
    (6) blockcode -> . blockcode command
    (7) command -> . interations
    (8) command -> . if
    (9) command -> . exp SEMICOLON
    (10) command -> . call SEMICOLON
    (11) command -> . RETURN return SEMICOLON
    (12) command -> . BREAK SEMICOLON
    (13) command -> . CONTINUE SEMICOLON
    (22) interations -> . for
    (23) interations -> . dowhile
    (24) interations -> . while
    (14) if -> . IF LPAREN exp RPAREN if_statement
    (38) exp -> . ID_SC EQUALS exp_lor
    (39) exp -> . ID_LI EQUALS exp_lor
    (40) exp -> . ID_SC MINUSEQUAL exp_lor
    (41) exp -> . ID_SC PLUSEQUAL exp_lor
    (42) exp -> . ID_SC MODEQUAL exp_lor
    (43) exp -> . ID_SC DIVEQUAL exp_lor
    (44) exp -> . ID_SC TIMESEQUAL exp_lor
    (45) exp -> . exp_lor
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN
    (25) for -> . FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (28) dowhile -> . DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN
    (29) while -> . WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE
    (30) while -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (46) exp_lor -> . exp_lor LOR exp_land
    (47) exp_lor -> . exp_land
    (48) exp_land -> . exp_land LAND exp_or
    (49) exp_land -> . exp_or
    (50) exp_or -> . exp_or OR exp_and
    (51) exp_or -> . exp_and
    (52) exp_and -> . exp_and AND exp_comp
    (53) exp_and -> . exp_comp_eq
    (54) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (55) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (56) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (57) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (58) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (59) exp_comp_eq -> . exp_comp
    (60) exp_comp -> . exp_comp GT exp_plusminus
    (61) exp_comp -> . exp_comp LT exp_plusminus
    (62) exp_comp -> . exp_comp GE exp_plusminus
    (63) exp_comp -> . exp_comp LE exp_plusminus
    (64) exp_comp -> . exp_comp SLT exp_plusminus
    (65) exp_comp -> . exp_comp SGT exp_plusminus
    (66) exp_comp -> . exp_comp SGE exp_plusminus
    (67) exp_comp -> . exp_comp SLE exp_plusminus
    (68) exp_comp -> . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE

    RETURN          shift and go to state 8
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    IF              shift and go to state 17
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 20
    ID              shift and go to state 12
    FOR             shift and go to state 21
    DO              shift and go to state 22
    WHILE           shift and go to state 23
    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    SEMICOLON       reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    blockcode                      shift and go to state 160
    command                        shift and go to state 110
    interations                    shift and go to state 4
    if                             shift and go to state 5
    exp                            shift and go to state 6
    call                           shift and go to state 7
    for                            shift and go to state 14
    dowhile                        shift and go to state 15
    while                          shift and go to state 16
    exp_lor                        shift and go to state 19
    exp_land                       shift and go to state 24
    exp_or                         shift and go to state 25
    exp_and                        shift and go to state 26
    exp_comp                       shift and go to state 27
    exp_comp_eq                    shift and go to state 28
    exp_plusminus                  shift and go to state 29
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36

state 154

    (15) if_statement -> LBRACE blockcode . RBRACE
    (16) if_statement -> LBRACE blockcode . RBRACE ELSE LBRACE blockcode RBRACE
    (17) if_statement -> LBRACE blockcode . RBRACE elsif
    (6) blockcode -> blockcode . command
    (7) command -> . interations
    (8) command -> . if
    (9) command -> . exp SEMICOLON
    (10) command -> . call SEMICOLON
    (11) command -> . RETURN return SEMICOLON
    (12) command -> . BREAK SEMICOLON
    (13) command -> . CONTINUE SEMICOLON
    (22) interations -> . for
    (23) interations -> . dowhile
    (24) interations -> . while
    (14) if -> . IF LPAREN exp RPAREN if_statement
    (38) exp -> . ID_SC EQUALS exp_lor
    (39) exp -> . ID_LI EQUALS exp_lor
    (40) exp -> . ID_SC MINUSEQUAL exp_lor
    (41) exp -> . ID_SC PLUSEQUAL exp_lor
    (42) exp -> . ID_SC MODEQUAL exp_lor
    (43) exp -> . ID_SC DIVEQUAL exp_lor
    (44) exp -> . ID_SC TIMESEQUAL exp_lor
    (45) exp -> . exp_lor
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN
    (25) for -> . FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (28) dowhile -> . DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN
    (29) while -> . WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE
    (30) while -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (46) exp_lor -> . exp_lor LOR exp_land
    (47) exp_lor -> . exp_land
    (48) exp_land -> . exp_land LAND exp_or
    (49) exp_land -> . exp_or
    (50) exp_or -> . exp_or OR exp_and
    (51) exp_or -> . exp_and
    (52) exp_and -> . exp_and AND exp_comp
    (53) exp_and -> . exp_comp_eq
    (54) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (55) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (56) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (57) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (58) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (59) exp_comp_eq -> . exp_comp
    (60) exp_comp -> . exp_comp GT exp_plusminus
    (61) exp_comp -> . exp_comp LT exp_plusminus
    (62) exp_comp -> . exp_comp GE exp_plusminus
    (63) exp_comp -> . exp_comp LE exp_plusminus
    (64) exp_comp -> . exp_comp SLT exp_plusminus
    (65) exp_comp -> . exp_comp SGT exp_plusminus
    (66) exp_comp -> . exp_comp SGE exp_plusminus
    (67) exp_comp -> . exp_comp SLE exp_plusminus
    (68) exp_comp -> . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE

    RBRACE          shift and go to state 161
    RETURN          shift and go to state 8
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    IF              shift and go to state 17
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 20
    ID              shift and go to state 12
    FOR             shift and go to state 21
    DO              shift and go to state 22
    WHILE           shift and go to state 23
    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    SEMICOLON       reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    command                        shift and go to state 141
    interations                    shift and go to state 4
    if                             shift and go to state 5
    exp                            shift and go to state 6
    call                           shift and go to state 7
    for                            shift and go to state 14
    dowhile                        shift and go to state 15
    while                          shift and go to state 16
    exp_lor                        shift and go to state 19
    exp_land                       shift and go to state 24
    exp_or                         shift and go to state 25
    exp_and                        shift and go to state 26
    exp_comp                       shift and go to state 27
    exp_comp_eq                    shift and go to state 28
    exp_plusminus                  shift and go to state 29
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36

state 155

    (25) for -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON . for_assignments RPAREN LBRACE blockcode RBRACE
    (26) for_assignments -> . exp
    (27) for_assignments -> . exp COMMA for_assignments
    (38) exp -> . ID_SC EQUALS exp_lor
    (39) exp -> . ID_LI EQUALS exp_lor
    (40) exp -> . ID_SC MINUSEQUAL exp_lor
    (41) exp -> . ID_SC PLUSEQUAL exp_lor
    (42) exp -> . ID_SC MODEQUAL exp_lor
    (43) exp -> . ID_SC DIVEQUAL exp_lor
    (44) exp -> . ID_SC TIMESEQUAL exp_lor
    (45) exp -> . exp_lor
    (46) exp_lor -> . exp_lor LOR exp_land
    (47) exp_lor -> . exp_land
    (48) exp_land -> . exp_land LAND exp_or
    (49) exp_land -> . exp_or
    (50) exp_or -> . exp_or OR exp_and
    (51) exp_or -> . exp_and
    (52) exp_and -> . exp_and AND exp_comp
    (53) exp_and -> . exp_comp_eq
    (54) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (55) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (56) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (57) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (58) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (59) exp_comp_eq -> . exp_comp
    (60) exp_comp -> . exp_comp GT exp_plusminus
    (61) exp_comp -> . exp_comp LT exp_plusminus
    (62) exp_comp -> . exp_comp GE exp_plusminus
    (63) exp_comp -> . exp_comp LE exp_plusminus
    (64) exp_comp -> . exp_comp SLT exp_plusminus
    (65) exp_comp -> . exp_comp SGT exp_plusminus
    (66) exp_comp -> . exp_comp SGE exp_plusminus
    (67) exp_comp -> . exp_comp SLE exp_plusminus
    (68) exp_comp -> . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN

    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 20
    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    COMMA           reduce using rule 78 (exp_decrement_increment -> .)
    RPAREN          reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 12

    for_assignments                shift and go to state 162
    exp                            shift and go to state 108
    exp_lor                        shift and go to state 19
    exp_land                       shift and go to state 24
    exp_or                         shift and go to state 25
    exp_and                        shift and go to state 26
    exp_comp                       shift and go to state 27
    exp_comp_eq                    shift and go to state 28
    exp_plusminus                  shift and go to state 29
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36
    call                           shift and go to state 46

state 156

    (28) dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN . exp RPAREN
    (38) exp -> . ID_SC EQUALS exp_lor
    (39) exp -> . ID_LI EQUALS exp_lor
    (40) exp -> . ID_SC MINUSEQUAL exp_lor
    (41) exp -> . ID_SC PLUSEQUAL exp_lor
    (42) exp -> . ID_SC MODEQUAL exp_lor
    (43) exp -> . ID_SC DIVEQUAL exp_lor
    (44) exp -> . ID_SC TIMESEQUAL exp_lor
    (45) exp -> . exp_lor
    (46) exp_lor -> . exp_lor LOR exp_land
    (47) exp_lor -> . exp_land
    (48) exp_land -> . exp_land LAND exp_or
    (49) exp_land -> . exp_or
    (50) exp_or -> . exp_or OR exp_and
    (51) exp_or -> . exp_and
    (52) exp_and -> . exp_and AND exp_comp
    (53) exp_and -> . exp_comp_eq
    (54) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (55) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (56) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (57) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (58) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (59) exp_comp_eq -> . exp_comp
    (60) exp_comp -> . exp_comp GT exp_plusminus
    (61) exp_comp -> . exp_comp LT exp_plusminus
    (62) exp_comp -> . exp_comp GE exp_plusminus
    (63) exp_comp -> . exp_comp LE exp_plusminus
    (64) exp_comp -> . exp_comp SLT exp_plusminus
    (65) exp_comp -> . exp_comp SGT exp_plusminus
    (66) exp_comp -> . exp_comp SGE exp_plusminus
    (67) exp_comp -> . exp_comp SLE exp_plusminus
    (68) exp_comp -> . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN

    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 20
    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    RPAREN          reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 12

    exp                            shift and go to state 163
    exp_lor                        shift and go to state 19
    exp_land                       shift and go to state 24
    exp_or                         shift and go to state 25
    exp_and                        shift and go to state 26
    exp_comp                       shift and go to state 27
    exp_comp_eq                    shift and go to state 28
    exp_plusminus                  shift and go to state 29
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36
    call                           shift and go to state 46

state 157

    (29) while -> WHILE LPAREN exp RPAREN LBRACE blockcode . RBRACE
    (6) blockcode -> blockcode . command
    (7) command -> . interations
    (8) command -> . if
    (9) command -> . exp SEMICOLON
    (10) command -> . call SEMICOLON
    (11) command -> . RETURN return SEMICOLON
    (12) command -> . BREAK SEMICOLON
    (13) command -> . CONTINUE SEMICOLON
    (22) interations -> . for
    (23) interations -> . dowhile
    (24) interations -> . while
    (14) if -> . IF LPAREN exp RPAREN if_statement
    (38) exp -> . ID_SC EQUALS exp_lor
    (39) exp -> . ID_LI EQUALS exp_lor
    (40) exp -> . ID_SC MINUSEQUAL exp_lor
    (41) exp -> . ID_SC PLUSEQUAL exp_lor
    (42) exp -> . ID_SC MODEQUAL exp_lor
    (43) exp -> . ID_SC DIVEQUAL exp_lor
    (44) exp -> . ID_SC TIMESEQUAL exp_lor
    (45) exp -> . exp_lor
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN
    (25) for -> . FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (28) dowhile -> . DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN
    (29) while -> . WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE
    (30) while -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (46) exp_lor -> . exp_lor LOR exp_land
    (47) exp_lor -> . exp_land
    (48) exp_land -> . exp_land LAND exp_or
    (49) exp_land -> . exp_or
    (50) exp_or -> . exp_or OR exp_and
    (51) exp_or -> . exp_and
    (52) exp_and -> . exp_and AND exp_comp
    (53) exp_and -> . exp_comp_eq
    (54) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (55) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (56) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (57) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (58) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (59) exp_comp_eq -> . exp_comp
    (60) exp_comp -> . exp_comp GT exp_plusminus
    (61) exp_comp -> . exp_comp LT exp_plusminus
    (62) exp_comp -> . exp_comp GE exp_plusminus
    (63) exp_comp -> . exp_comp LE exp_plusminus
    (64) exp_comp -> . exp_comp SLT exp_plusminus
    (65) exp_comp -> . exp_comp SGT exp_plusminus
    (66) exp_comp -> . exp_comp SGE exp_plusminus
    (67) exp_comp -> . exp_comp SLE exp_plusminus
    (68) exp_comp -> . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE

    RBRACE          shift and go to state 164
    RETURN          shift and go to state 8
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    IF              shift and go to state 17
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 20
    ID              shift and go to state 12
    FOR             shift and go to state 21
    DO              shift and go to state 22
    WHILE           shift and go to state 23
    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    SEMICOLON       reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    exp                            shift and go to state 6
    command                        shift and go to state 141
    interations                    shift and go to state 4
    if                             shift and go to state 5
    call                           shift and go to state 7
    for                            shift and go to state 14
    dowhile                        shift and go to state 15
    while                          shift and go to state 16
    exp_lor                        shift and go to state 19
    exp_land                       shift and go to state 24
    exp_or                         shift and go to state 25
    exp_and                        shift and go to state 26
    exp_comp                       shift and go to state 27
    exp_comp_eq                    shift and go to state 28
    exp_plusminus                  shift and go to state 29
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36

state 158

    (30) while -> WHILE LPAREN exp RPAREN LBRACE RBRACE .

    RETURN          reduce using rule 30 (while -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    BREAK           reduce using rule 30 (while -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    CONTINUE        reduce using rule 30 (while -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    SUB             reduce using rule 30 (while -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    IF              reduce using rule 30 (while -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    ID_SC           reduce using rule 30 (while -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    ID_LI           reduce using rule 30 (while -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    ID              reduce using rule 30 (while -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    FOR             reduce using rule 30 (while -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    DO              reduce using rule 30 (while -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    WHILE           reduce using rule 30 (while -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    XOR             reduce using rule 30 (while -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    INCREMENT       reduce using rule 30 (while -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    DECREMENT       reduce using rule 30 (while -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    LPAREN          reduce using rule 30 (while -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    NUMBER          reduce using rule 30 (while -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    TRUE            reduce using rule 30 (while -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    FALSE           reduce using rule 30 (while -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    SEMICOLON       reduce using rule 30 (while -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    LOR             reduce using rule 30 (while -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    LAND            reduce using rule 30 (while -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    OR              reduce using rule 30 (while -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    AND             reduce using rule 30 (while -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    EQ              reduce using rule 30 (while -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    NE              reduce using rule 30 (while -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    SEQ             reduce using rule 30 (while -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    SNE             reduce using rule 30 (while -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    CMP             reduce using rule 30 (while -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    GT              reduce using rule 30 (while -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    LT              reduce using rule 30 (while -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    GE              reduce using rule 30 (while -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    LE              reduce using rule 30 (while -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    SLT             reduce using rule 30 (while -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    SGT             reduce using rule 30 (while -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    SGE             reduce using rule 30 (while -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    SLE             reduce using rule 30 (while -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    PLUS            reduce using rule 30 (while -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    MINUS           reduce using rule 30 (while -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    TIMES           reduce using rule 30 (while -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    DIVIDE          reduce using rule 30 (while -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    MODULO          reduce using rule 30 (while -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    $end            reduce using rule 30 (while -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    RBRACE          reduce using rule 30 (while -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)


state 159

    (31) function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .

    RETURN          reduce using rule 31 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    BREAK           reduce using rule 31 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    CONTINUE        reduce using rule 31 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    SUB             reduce using rule 31 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    IF              reduce using rule 31 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    ID_SC           reduce using rule 31 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    ID_LI           reduce using rule 31 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    ID              reduce using rule 31 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    FOR             reduce using rule 31 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    DO              reduce using rule 31 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    WHILE           reduce using rule 31 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    XOR             reduce using rule 31 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    INCREMENT       reduce using rule 31 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    DECREMENT       reduce using rule 31 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    LPAREN          reduce using rule 31 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    NUMBER          reduce using rule 31 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    TRUE            reduce using rule 31 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    FALSE           reduce using rule 31 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    SEMICOLON       reduce using rule 31 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    LOR             reduce using rule 31 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    LAND            reduce using rule 31 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    OR              reduce using rule 31 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    AND             reduce using rule 31 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    EQ              reduce using rule 31 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    NE              reduce using rule 31 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    SEQ             reduce using rule 31 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    SNE             reduce using rule 31 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    CMP             reduce using rule 31 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    GT              reduce using rule 31 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    LT              reduce using rule 31 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    GE              reduce using rule 31 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    LE              reduce using rule 31 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    SLT             reduce using rule 31 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    SGT             reduce using rule 31 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    SGE             reduce using rule 31 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    SLE             reduce using rule 31 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    PLUS            reduce using rule 31 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    MINUS           reduce using rule 31 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    TIMES           reduce using rule 31 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    DIVIDE          reduce using rule 31 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    MODULO          reduce using rule 31 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    $end            reduce using rule 31 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)


state 160

    (32) function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode . RBRACE
    (6) blockcode -> blockcode . command
    (7) command -> . interations
    (8) command -> . if
    (9) command -> . exp SEMICOLON
    (10) command -> . call SEMICOLON
    (11) command -> . RETURN return SEMICOLON
    (12) command -> . BREAK SEMICOLON
    (13) command -> . CONTINUE SEMICOLON
    (22) interations -> . for
    (23) interations -> . dowhile
    (24) interations -> . while
    (14) if -> . IF LPAREN exp RPAREN if_statement
    (38) exp -> . ID_SC EQUALS exp_lor
    (39) exp -> . ID_LI EQUALS exp_lor
    (40) exp -> . ID_SC MINUSEQUAL exp_lor
    (41) exp -> . ID_SC PLUSEQUAL exp_lor
    (42) exp -> . ID_SC MODEQUAL exp_lor
    (43) exp -> . ID_SC DIVEQUAL exp_lor
    (44) exp -> . ID_SC TIMESEQUAL exp_lor
    (45) exp -> . exp_lor
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN
    (25) for -> . FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (28) dowhile -> . DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN
    (29) while -> . WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE
    (30) while -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (46) exp_lor -> . exp_lor LOR exp_land
    (47) exp_lor -> . exp_land
    (48) exp_land -> . exp_land LAND exp_or
    (49) exp_land -> . exp_or
    (50) exp_or -> . exp_or OR exp_and
    (51) exp_or -> . exp_and
    (52) exp_and -> . exp_and AND exp_comp
    (53) exp_and -> . exp_comp_eq
    (54) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (55) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (56) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (57) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (58) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (59) exp_comp_eq -> . exp_comp
    (60) exp_comp -> . exp_comp GT exp_plusminus
    (61) exp_comp -> . exp_comp LT exp_plusminus
    (62) exp_comp -> . exp_comp GE exp_plusminus
    (63) exp_comp -> . exp_comp LE exp_plusminus
    (64) exp_comp -> . exp_comp SLT exp_plusminus
    (65) exp_comp -> . exp_comp SGT exp_plusminus
    (66) exp_comp -> . exp_comp SGE exp_plusminus
    (67) exp_comp -> . exp_comp SLE exp_plusminus
    (68) exp_comp -> . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE

    RBRACE          shift and go to state 165
    RETURN          shift and go to state 8
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    IF              shift and go to state 17
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 20
    ID              shift and go to state 12
    FOR             shift and go to state 21
    DO              shift and go to state 22
    WHILE           shift and go to state 23
    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    SEMICOLON       reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    command                        shift and go to state 141
    interations                    shift and go to state 4
    if                             shift and go to state 5
    exp                            shift and go to state 6
    call                           shift and go to state 7
    for                            shift and go to state 14
    dowhile                        shift and go to state 15
    while                          shift and go to state 16
    exp_lor                        shift and go to state 19
    exp_land                       shift and go to state 24
    exp_or                         shift and go to state 25
    exp_and                        shift and go to state 26
    exp_comp                       shift and go to state 27
    exp_comp_eq                    shift and go to state 28
    exp_plusminus                  shift and go to state 29
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36

state 161

    (15) if_statement -> LBRACE blockcode RBRACE .
    (16) if_statement -> LBRACE blockcode RBRACE . ELSE LBRACE blockcode RBRACE
    (17) if_statement -> LBRACE blockcode RBRACE . elsif
    (18) elsif -> . ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE
    (19) elsif -> . ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2

    RETURN          reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    BREAK           reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    CONTINUE        reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    SUB             reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    IF              reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    ID_SC           reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    ID_LI           reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    ID              reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    FOR             reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    DO              reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    WHILE           reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    XOR             reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    INCREMENT       reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    DECREMENT       reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    LPAREN          reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    NUMBER          reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    TRUE            reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    FALSE           reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    SEMICOLON       reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    LOR             reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    LAND            reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    OR              reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    AND             reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    EQ              reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    NE              reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    SEQ             reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    SNE             reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    CMP             reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    GT              reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    LT              reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    GE              reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    LE              reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    SLT             reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    SGT             reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    SGE             reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    SLE             reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    PLUS            reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    MINUS           reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    TIMES           reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    DIVIDE          reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    MODULO          reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    $end            reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    RBRACE          reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE .)
    ELSE            shift and go to state 166
    ELSIF           shift and go to state 168

    elsif                          shift and go to state 167

state 162

    (25) for -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments . RPAREN LBRACE blockcode RBRACE

    RPAREN          shift and go to state 169


state 163

    (28) dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp . RPAREN

    RPAREN          shift and go to state 170


state 164

    (29) while -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .

    RETURN          reduce using rule 29 (while -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    BREAK           reduce using rule 29 (while -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    CONTINUE        reduce using rule 29 (while -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    SUB             reduce using rule 29 (while -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    IF              reduce using rule 29 (while -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    ID_SC           reduce using rule 29 (while -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    ID_LI           reduce using rule 29 (while -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    ID              reduce using rule 29 (while -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    FOR             reduce using rule 29 (while -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    DO              reduce using rule 29 (while -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    WHILE           reduce using rule 29 (while -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    XOR             reduce using rule 29 (while -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    INCREMENT       reduce using rule 29 (while -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    DECREMENT       reduce using rule 29 (while -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    LPAREN          reduce using rule 29 (while -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    NUMBER          reduce using rule 29 (while -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    TRUE            reduce using rule 29 (while -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    FALSE           reduce using rule 29 (while -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    SEMICOLON       reduce using rule 29 (while -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    LOR             reduce using rule 29 (while -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    LAND            reduce using rule 29 (while -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    OR              reduce using rule 29 (while -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    AND             reduce using rule 29 (while -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    EQ              reduce using rule 29 (while -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    NE              reduce using rule 29 (while -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    SEQ             reduce using rule 29 (while -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    SNE             reduce using rule 29 (while -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    CMP             reduce using rule 29 (while -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    GT              reduce using rule 29 (while -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    LT              reduce using rule 29 (while -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    GE              reduce using rule 29 (while -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    LE              reduce using rule 29 (while -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    SLT             reduce using rule 29 (while -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    SGT             reduce using rule 29 (while -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    SGE             reduce using rule 29 (while -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    SLE             reduce using rule 29 (while -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    PLUS            reduce using rule 29 (while -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    MINUS           reduce using rule 29 (while -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    TIMES           reduce using rule 29 (while -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    DIVIDE          reduce using rule 29 (while -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    MODULO          reduce using rule 29 (while -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    $end            reduce using rule 29 (while -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    RBRACE          reduce using rule 29 (while -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)


state 165

    (32) function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .

    RETURN          reduce using rule 32 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    BREAK           reduce using rule 32 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    CONTINUE        reduce using rule 32 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    SUB             reduce using rule 32 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    IF              reduce using rule 32 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    ID_SC           reduce using rule 32 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    ID_LI           reduce using rule 32 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    ID              reduce using rule 32 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    FOR             reduce using rule 32 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    DO              reduce using rule 32 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    WHILE           reduce using rule 32 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    XOR             reduce using rule 32 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    INCREMENT       reduce using rule 32 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    DECREMENT       reduce using rule 32 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    LPAREN          reduce using rule 32 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    NUMBER          reduce using rule 32 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    TRUE            reduce using rule 32 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    FALSE           reduce using rule 32 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    SEMICOLON       reduce using rule 32 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    LOR             reduce using rule 32 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    LAND            reduce using rule 32 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    OR              reduce using rule 32 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    AND             reduce using rule 32 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    EQ              reduce using rule 32 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    NE              reduce using rule 32 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    SEQ             reduce using rule 32 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    SNE             reduce using rule 32 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    CMP             reduce using rule 32 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    GT              reduce using rule 32 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    LT              reduce using rule 32 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    GE              reduce using rule 32 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    LE              reduce using rule 32 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    SLT             reduce using rule 32 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    SGT             reduce using rule 32 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    SGE             reduce using rule 32 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    SLE             reduce using rule 32 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    PLUS            reduce using rule 32 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    MINUS           reduce using rule 32 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    TIMES           reduce using rule 32 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    DIVIDE          reduce using rule 32 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    MODULO          reduce using rule 32 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    $end            reduce using rule 32 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)


state 166

    (16) if_statement -> LBRACE blockcode RBRACE ELSE . LBRACE blockcode RBRACE

    LBRACE          shift and go to state 171


state 167

    (17) if_statement -> LBRACE blockcode RBRACE elsif .

    RETURN          reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)
    BREAK           reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)
    CONTINUE        reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)
    SUB             reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)
    IF              reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)
    ID_SC           reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)
    ID_LI           reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)
    ID              reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)
    FOR             reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)
    DO              reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)
    WHILE           reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)
    XOR             reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)
    INCREMENT       reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)
    DECREMENT       reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)
    LPAREN          reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)
    NUMBER          reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)
    TRUE            reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)
    FALSE           reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)
    SEMICOLON       reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)
    LOR             reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)
    LAND            reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)
    OR              reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)
    AND             reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)
    EQ              reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)
    NE              reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)
    SEQ             reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)
    SNE             reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)
    CMP             reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)
    GT              reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)
    LT              reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)
    GE              reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)
    LE              reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)
    SLT             reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)
    SGT             reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)
    SGE             reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)
    SLE             reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)
    PLUS            reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)
    MINUS           reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)
    TIMES           reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)
    DIVIDE          reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)
    MODULO          reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)
    $end            reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)
    RBRACE          reduce using rule 17 (if_statement -> LBRACE blockcode RBRACE elsif .)


state 168

    (18) elsif -> ELSIF . LPAREN exp RPAREN LBRACE blockcode RBRACE
    (19) elsif -> ELSIF . LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2

    LPAREN          shift and go to state 172


state 169

    (25) for -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN . LBRACE blockcode RBRACE

    LBRACE          shift and go to state 173


state 170

    (28) dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .

    RETURN          reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    BREAK           reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    CONTINUE        reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    SUB             reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    IF              reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    ID_SC           reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    ID_LI           reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    ID              reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    FOR             reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    DO              reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    WHILE           reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    XOR             reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    INCREMENT       reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    DECREMENT       reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    LPAREN          reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    NUMBER          reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    TRUE            reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    FALSE           reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    SEMICOLON       reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    LOR             reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    LAND            reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    OR              reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    AND             reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    EQ              reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    NE              reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    SEQ             reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    SNE             reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    CMP             reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    GT              reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    LT              reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    GE              reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    LE              reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    SLT             reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    SGT             reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    SGE             reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    SLE             reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    PLUS            reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    MINUS           reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    TIMES           reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    DIVIDE          reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    MODULO          reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    $end            reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    RBRACE          reduce using rule 28 (dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)


state 171

    (16) if_statement -> LBRACE blockcode RBRACE ELSE LBRACE . blockcode RBRACE
    (5) blockcode -> . command
    (6) blockcode -> . blockcode command
    (7) command -> . interations
    (8) command -> . if
    (9) command -> . exp SEMICOLON
    (10) command -> . call SEMICOLON
    (11) command -> . RETURN return SEMICOLON
    (12) command -> . BREAK SEMICOLON
    (13) command -> . CONTINUE SEMICOLON
    (22) interations -> . for
    (23) interations -> . dowhile
    (24) interations -> . while
    (14) if -> . IF LPAREN exp RPAREN if_statement
    (38) exp -> . ID_SC EQUALS exp_lor
    (39) exp -> . ID_LI EQUALS exp_lor
    (40) exp -> . ID_SC MINUSEQUAL exp_lor
    (41) exp -> . ID_SC PLUSEQUAL exp_lor
    (42) exp -> . ID_SC MODEQUAL exp_lor
    (43) exp -> . ID_SC DIVEQUAL exp_lor
    (44) exp -> . ID_SC TIMESEQUAL exp_lor
    (45) exp -> . exp_lor
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN
    (25) for -> . FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (28) dowhile -> . DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN
    (29) while -> . WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE
    (30) while -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (46) exp_lor -> . exp_lor LOR exp_land
    (47) exp_lor -> . exp_land
    (48) exp_land -> . exp_land LAND exp_or
    (49) exp_land -> . exp_or
    (50) exp_or -> . exp_or OR exp_and
    (51) exp_or -> . exp_and
    (52) exp_and -> . exp_and AND exp_comp
    (53) exp_and -> . exp_comp_eq
    (54) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (55) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (56) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (57) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (58) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (59) exp_comp_eq -> . exp_comp
    (60) exp_comp -> . exp_comp GT exp_plusminus
    (61) exp_comp -> . exp_comp LT exp_plusminus
    (62) exp_comp -> . exp_comp GE exp_plusminus
    (63) exp_comp -> . exp_comp LE exp_plusminus
    (64) exp_comp -> . exp_comp SLT exp_plusminus
    (65) exp_comp -> . exp_comp SGT exp_plusminus
    (66) exp_comp -> . exp_comp SGE exp_plusminus
    (67) exp_comp -> . exp_comp SLE exp_plusminus
    (68) exp_comp -> . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE

    RETURN          shift and go to state 8
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    IF              shift and go to state 17
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 20
    ID              shift and go to state 12
    FOR             shift and go to state 21
    DO              shift and go to state 22
    WHILE           shift and go to state 23
    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    SEMICOLON       reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    blockcode                      shift and go to state 174
    command                        shift and go to state 110
    interations                    shift and go to state 4
    if                             shift and go to state 5
    exp                            shift and go to state 6
    call                           shift and go to state 7
    for                            shift and go to state 14
    dowhile                        shift and go to state 15
    while                          shift and go to state 16
    exp_lor                        shift and go to state 19
    exp_land                       shift and go to state 24
    exp_or                         shift and go to state 25
    exp_and                        shift and go to state 26
    exp_comp                       shift and go to state 27
    exp_comp_eq                    shift and go to state 28
    exp_plusminus                  shift and go to state 29
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36

state 172

    (18) elsif -> ELSIF LPAREN . exp RPAREN LBRACE blockcode RBRACE
    (19) elsif -> ELSIF LPAREN . exp RPAREN LBRACE blockcode RBRACE elsif2
    (38) exp -> . ID_SC EQUALS exp_lor
    (39) exp -> . ID_LI EQUALS exp_lor
    (40) exp -> . ID_SC MINUSEQUAL exp_lor
    (41) exp -> . ID_SC PLUSEQUAL exp_lor
    (42) exp -> . ID_SC MODEQUAL exp_lor
    (43) exp -> . ID_SC DIVEQUAL exp_lor
    (44) exp -> . ID_SC TIMESEQUAL exp_lor
    (45) exp -> . exp_lor
    (46) exp_lor -> . exp_lor LOR exp_land
    (47) exp_lor -> . exp_land
    (48) exp_land -> . exp_land LAND exp_or
    (49) exp_land -> . exp_or
    (50) exp_or -> . exp_or OR exp_and
    (51) exp_or -> . exp_and
    (52) exp_and -> . exp_and AND exp_comp
    (53) exp_and -> . exp_comp_eq
    (54) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (55) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (56) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (57) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (58) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (59) exp_comp_eq -> . exp_comp
    (60) exp_comp -> . exp_comp GT exp_plusminus
    (61) exp_comp -> . exp_comp LT exp_plusminus
    (62) exp_comp -> . exp_comp GE exp_plusminus
    (63) exp_comp -> . exp_comp LE exp_plusminus
    (64) exp_comp -> . exp_comp SLT exp_plusminus
    (65) exp_comp -> . exp_comp SGT exp_plusminus
    (66) exp_comp -> . exp_comp SGE exp_plusminus
    (67) exp_comp -> . exp_comp SLE exp_plusminus
    (68) exp_comp -> . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN

    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 20
    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    RPAREN          reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 12

    exp                            shift and go to state 175
    exp_lor                        shift and go to state 19
    exp_land                       shift and go to state 24
    exp_or                         shift and go to state 25
    exp_and                        shift and go to state 26
    exp_comp                       shift and go to state 27
    exp_comp_eq                    shift and go to state 28
    exp_plusminus                  shift and go to state 29
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36
    call                           shift and go to state 46

state 173

    (25) for -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE . blockcode RBRACE
    (5) blockcode -> . command
    (6) blockcode -> . blockcode command
    (7) command -> . interations
    (8) command -> . if
    (9) command -> . exp SEMICOLON
    (10) command -> . call SEMICOLON
    (11) command -> . RETURN return SEMICOLON
    (12) command -> . BREAK SEMICOLON
    (13) command -> . CONTINUE SEMICOLON
    (22) interations -> . for
    (23) interations -> . dowhile
    (24) interations -> . while
    (14) if -> . IF LPAREN exp RPAREN if_statement
    (38) exp -> . ID_SC EQUALS exp_lor
    (39) exp -> . ID_LI EQUALS exp_lor
    (40) exp -> . ID_SC MINUSEQUAL exp_lor
    (41) exp -> . ID_SC PLUSEQUAL exp_lor
    (42) exp -> . ID_SC MODEQUAL exp_lor
    (43) exp -> . ID_SC DIVEQUAL exp_lor
    (44) exp -> . ID_SC TIMESEQUAL exp_lor
    (45) exp -> . exp_lor
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN
    (25) for -> . FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (28) dowhile -> . DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN
    (29) while -> . WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE
    (30) while -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (46) exp_lor -> . exp_lor LOR exp_land
    (47) exp_lor -> . exp_land
    (48) exp_land -> . exp_land LAND exp_or
    (49) exp_land -> . exp_or
    (50) exp_or -> . exp_or OR exp_and
    (51) exp_or -> . exp_and
    (52) exp_and -> . exp_and AND exp_comp
    (53) exp_and -> . exp_comp_eq
    (54) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (55) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (56) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (57) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (58) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (59) exp_comp_eq -> . exp_comp
    (60) exp_comp -> . exp_comp GT exp_plusminus
    (61) exp_comp -> . exp_comp LT exp_plusminus
    (62) exp_comp -> . exp_comp GE exp_plusminus
    (63) exp_comp -> . exp_comp LE exp_plusminus
    (64) exp_comp -> . exp_comp SLT exp_plusminus
    (65) exp_comp -> . exp_comp SGT exp_plusminus
    (66) exp_comp -> . exp_comp SGE exp_plusminus
    (67) exp_comp -> . exp_comp SLE exp_plusminus
    (68) exp_comp -> . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE

    RETURN          shift and go to state 8
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    IF              shift and go to state 17
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 20
    ID              shift and go to state 12
    FOR             shift and go to state 21
    DO              shift and go to state 22
    WHILE           shift and go to state 23
    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    SEMICOLON       reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    exp                            shift and go to state 6
    blockcode                      shift and go to state 176
    command                        shift and go to state 110
    interations                    shift and go to state 4
    if                             shift and go to state 5
    call                           shift and go to state 7
    for                            shift and go to state 14
    dowhile                        shift and go to state 15
    while                          shift and go to state 16
    exp_lor                        shift and go to state 19
    exp_land                       shift and go to state 24
    exp_or                         shift and go to state 25
    exp_and                        shift and go to state 26
    exp_comp                       shift and go to state 27
    exp_comp_eq                    shift and go to state 28
    exp_plusminus                  shift and go to state 29
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36

state 174

    (16) if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode . RBRACE
    (6) blockcode -> blockcode . command
    (7) command -> . interations
    (8) command -> . if
    (9) command -> . exp SEMICOLON
    (10) command -> . call SEMICOLON
    (11) command -> . RETURN return SEMICOLON
    (12) command -> . BREAK SEMICOLON
    (13) command -> . CONTINUE SEMICOLON
    (22) interations -> . for
    (23) interations -> . dowhile
    (24) interations -> . while
    (14) if -> . IF LPAREN exp RPAREN if_statement
    (38) exp -> . ID_SC EQUALS exp_lor
    (39) exp -> . ID_LI EQUALS exp_lor
    (40) exp -> . ID_SC MINUSEQUAL exp_lor
    (41) exp -> . ID_SC PLUSEQUAL exp_lor
    (42) exp -> . ID_SC MODEQUAL exp_lor
    (43) exp -> . ID_SC DIVEQUAL exp_lor
    (44) exp -> . ID_SC TIMESEQUAL exp_lor
    (45) exp -> . exp_lor
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN
    (25) for -> . FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (28) dowhile -> . DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN
    (29) while -> . WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE
    (30) while -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (46) exp_lor -> . exp_lor LOR exp_land
    (47) exp_lor -> . exp_land
    (48) exp_land -> . exp_land LAND exp_or
    (49) exp_land -> . exp_or
    (50) exp_or -> . exp_or OR exp_and
    (51) exp_or -> . exp_and
    (52) exp_and -> . exp_and AND exp_comp
    (53) exp_and -> . exp_comp_eq
    (54) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (55) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (56) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (57) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (58) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (59) exp_comp_eq -> . exp_comp
    (60) exp_comp -> . exp_comp GT exp_plusminus
    (61) exp_comp -> . exp_comp LT exp_plusminus
    (62) exp_comp -> . exp_comp GE exp_plusminus
    (63) exp_comp -> . exp_comp LE exp_plusminus
    (64) exp_comp -> . exp_comp SLT exp_plusminus
    (65) exp_comp -> . exp_comp SGT exp_plusminus
    (66) exp_comp -> . exp_comp SGE exp_plusminus
    (67) exp_comp -> . exp_comp SLE exp_plusminus
    (68) exp_comp -> . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE

    RBRACE          shift and go to state 177
    RETURN          shift and go to state 8
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    IF              shift and go to state 17
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 20
    ID              shift and go to state 12
    FOR             shift and go to state 21
    DO              shift and go to state 22
    WHILE           shift and go to state 23
    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    SEMICOLON       reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    command                        shift and go to state 141
    interations                    shift and go to state 4
    if                             shift and go to state 5
    exp                            shift and go to state 6
    call                           shift and go to state 7
    for                            shift and go to state 14
    dowhile                        shift and go to state 15
    while                          shift and go to state 16
    exp_lor                        shift and go to state 19
    exp_land                       shift and go to state 24
    exp_or                         shift and go to state 25
    exp_and                        shift and go to state 26
    exp_comp                       shift and go to state 27
    exp_comp_eq                    shift and go to state 28
    exp_plusminus                  shift and go to state 29
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36

state 175

    (18) elsif -> ELSIF LPAREN exp . RPAREN LBRACE blockcode RBRACE
    (19) elsif -> ELSIF LPAREN exp . RPAREN LBRACE blockcode RBRACE elsif2

    RPAREN          shift and go to state 178


state 176

    (25) for -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode . RBRACE
    (6) blockcode -> blockcode . command
    (7) command -> . interations
    (8) command -> . if
    (9) command -> . exp SEMICOLON
    (10) command -> . call SEMICOLON
    (11) command -> . RETURN return SEMICOLON
    (12) command -> . BREAK SEMICOLON
    (13) command -> . CONTINUE SEMICOLON
    (22) interations -> . for
    (23) interations -> . dowhile
    (24) interations -> . while
    (14) if -> . IF LPAREN exp RPAREN if_statement
    (38) exp -> . ID_SC EQUALS exp_lor
    (39) exp -> . ID_LI EQUALS exp_lor
    (40) exp -> . ID_SC MINUSEQUAL exp_lor
    (41) exp -> . ID_SC PLUSEQUAL exp_lor
    (42) exp -> . ID_SC MODEQUAL exp_lor
    (43) exp -> . ID_SC DIVEQUAL exp_lor
    (44) exp -> . ID_SC TIMESEQUAL exp_lor
    (45) exp -> . exp_lor
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN
    (25) for -> . FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (28) dowhile -> . DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN
    (29) while -> . WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE
    (30) while -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (46) exp_lor -> . exp_lor LOR exp_land
    (47) exp_lor -> . exp_land
    (48) exp_land -> . exp_land LAND exp_or
    (49) exp_land -> . exp_or
    (50) exp_or -> . exp_or OR exp_and
    (51) exp_or -> . exp_and
    (52) exp_and -> . exp_and AND exp_comp
    (53) exp_and -> . exp_comp_eq
    (54) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (55) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (56) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (57) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (58) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (59) exp_comp_eq -> . exp_comp
    (60) exp_comp -> . exp_comp GT exp_plusminus
    (61) exp_comp -> . exp_comp LT exp_plusminus
    (62) exp_comp -> . exp_comp GE exp_plusminus
    (63) exp_comp -> . exp_comp LE exp_plusminus
    (64) exp_comp -> . exp_comp SLT exp_plusminus
    (65) exp_comp -> . exp_comp SGT exp_plusminus
    (66) exp_comp -> . exp_comp SGE exp_plusminus
    (67) exp_comp -> . exp_comp SLE exp_plusminus
    (68) exp_comp -> . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE

    RBRACE          shift and go to state 179
    RETURN          shift and go to state 8
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    IF              shift and go to state 17
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 20
    ID              shift and go to state 12
    FOR             shift and go to state 21
    DO              shift and go to state 22
    WHILE           shift and go to state 23
    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    SEMICOLON       reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    exp                            shift and go to state 6
    command                        shift and go to state 141
    interations                    shift and go to state 4
    if                             shift and go to state 5
    call                           shift and go to state 7
    for                            shift and go to state 14
    dowhile                        shift and go to state 15
    while                          shift and go to state 16
    exp_lor                        shift and go to state 19
    exp_land                       shift and go to state 24
    exp_or                         shift and go to state 25
    exp_and                        shift and go to state 26
    exp_comp                       shift and go to state 27
    exp_comp_eq                    shift and go to state 28
    exp_plusminus                  shift and go to state 29
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36

state 177

    (16) if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .

    RETURN          reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    BREAK           reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    CONTINUE        reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    SUB             reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    IF              reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    ID_SC           reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    ID_LI           reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    ID              reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    FOR             reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    DO              reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    WHILE           reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    XOR             reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    INCREMENT       reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    DECREMENT       reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    LPAREN          reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    NUMBER          reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    TRUE            reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    FALSE           reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    SEMICOLON       reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    LOR             reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    LAND            reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    OR              reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    AND             reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    EQ              reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    NE              reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    SEQ             reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    SNE             reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    CMP             reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    GT              reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    LT              reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    GE              reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    LE              reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    SLT             reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    SGT             reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    SGE             reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    SLE             reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    PLUS            reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    MINUS           reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    TIMES           reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    DIVIDE          reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    MODULO          reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    $end            reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    RBRACE          reduce using rule 16 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)


state 178

    (18) elsif -> ELSIF LPAREN exp RPAREN . LBRACE blockcode RBRACE
    (19) elsif -> ELSIF LPAREN exp RPAREN . LBRACE blockcode RBRACE elsif2

    LBRACE          shift and go to state 180


state 179

    (25) for -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .

    RETURN          reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    BREAK           reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    CONTINUE        reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    SUB             reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    IF              reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    ID_SC           reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    ID_LI           reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    ID              reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    FOR             reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    DO              reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    WHILE           reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    XOR             reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    INCREMENT       reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    DECREMENT       reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    LPAREN          reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    NUMBER          reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    TRUE            reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    FALSE           reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    SEMICOLON       reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    LOR             reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    LAND            reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    OR              reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    AND             reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    EQ              reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    NE              reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    SEQ             reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    SNE             reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    CMP             reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    GT              reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    LT              reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    GE              reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    LE              reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    SLT             reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    SGT             reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    SGE             reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    SLE             reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    PLUS            reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    MINUS           reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    TIMES           reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    DIVIDE          reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    MODULO          reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    $end            reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    RBRACE          reduce using rule 25 (for -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)


state 180

    (18) elsif -> ELSIF LPAREN exp RPAREN LBRACE . blockcode RBRACE
    (19) elsif -> ELSIF LPAREN exp RPAREN LBRACE . blockcode RBRACE elsif2
    (5) blockcode -> . command
    (6) blockcode -> . blockcode command
    (7) command -> . interations
    (8) command -> . if
    (9) command -> . exp SEMICOLON
    (10) command -> . call SEMICOLON
    (11) command -> . RETURN return SEMICOLON
    (12) command -> . BREAK SEMICOLON
    (13) command -> . CONTINUE SEMICOLON
    (22) interations -> . for
    (23) interations -> . dowhile
    (24) interations -> . while
    (14) if -> . IF LPAREN exp RPAREN if_statement
    (38) exp -> . ID_SC EQUALS exp_lor
    (39) exp -> . ID_LI EQUALS exp_lor
    (40) exp -> . ID_SC MINUSEQUAL exp_lor
    (41) exp -> . ID_SC PLUSEQUAL exp_lor
    (42) exp -> . ID_SC MODEQUAL exp_lor
    (43) exp -> . ID_SC DIVEQUAL exp_lor
    (44) exp -> . ID_SC TIMESEQUAL exp_lor
    (45) exp -> . exp_lor
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN
    (25) for -> . FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (28) dowhile -> . DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN
    (29) while -> . WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE
    (30) while -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (46) exp_lor -> . exp_lor LOR exp_land
    (47) exp_lor -> . exp_land
    (48) exp_land -> . exp_land LAND exp_or
    (49) exp_land -> . exp_or
    (50) exp_or -> . exp_or OR exp_and
    (51) exp_or -> . exp_and
    (52) exp_and -> . exp_and AND exp_comp
    (53) exp_and -> . exp_comp_eq
    (54) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (55) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (56) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (57) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (58) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (59) exp_comp_eq -> . exp_comp
    (60) exp_comp -> . exp_comp GT exp_plusminus
    (61) exp_comp -> . exp_comp LT exp_plusminus
    (62) exp_comp -> . exp_comp GE exp_plusminus
    (63) exp_comp -> . exp_comp LE exp_plusminus
    (64) exp_comp -> . exp_comp SLT exp_plusminus
    (65) exp_comp -> . exp_comp SGT exp_plusminus
    (66) exp_comp -> . exp_comp SGE exp_plusminus
    (67) exp_comp -> . exp_comp SLE exp_plusminus
    (68) exp_comp -> . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE

    RETURN          shift and go to state 8
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    IF              shift and go to state 17
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 20
    ID              shift and go to state 12
    FOR             shift and go to state 21
    DO              shift and go to state 22
    WHILE           shift and go to state 23
    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    SEMICOLON       reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    exp                            shift and go to state 6
    blockcode                      shift and go to state 181
    command                        shift and go to state 110
    interations                    shift and go to state 4
    if                             shift and go to state 5
    call                           shift and go to state 7
    for                            shift and go to state 14
    dowhile                        shift and go to state 15
    while                          shift and go to state 16
    exp_lor                        shift and go to state 19
    exp_land                       shift and go to state 24
    exp_or                         shift and go to state 25
    exp_and                        shift and go to state 26
    exp_comp                       shift and go to state 27
    exp_comp_eq                    shift and go to state 28
    exp_plusminus                  shift and go to state 29
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36

state 181

    (18) elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode . RBRACE
    (19) elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode . RBRACE elsif2
    (6) blockcode -> blockcode . command
    (7) command -> . interations
    (8) command -> . if
    (9) command -> . exp SEMICOLON
    (10) command -> . call SEMICOLON
    (11) command -> . RETURN return SEMICOLON
    (12) command -> . BREAK SEMICOLON
    (13) command -> . CONTINUE SEMICOLON
    (22) interations -> . for
    (23) interations -> . dowhile
    (24) interations -> . while
    (14) if -> . IF LPAREN exp RPAREN if_statement
    (38) exp -> . ID_SC EQUALS exp_lor
    (39) exp -> . ID_LI EQUALS exp_lor
    (40) exp -> . ID_SC MINUSEQUAL exp_lor
    (41) exp -> . ID_SC PLUSEQUAL exp_lor
    (42) exp -> . ID_SC MODEQUAL exp_lor
    (43) exp -> . ID_SC DIVEQUAL exp_lor
    (44) exp -> . ID_SC TIMESEQUAL exp_lor
    (45) exp -> . exp_lor
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN
    (25) for -> . FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (28) dowhile -> . DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN
    (29) while -> . WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE
    (30) while -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (46) exp_lor -> . exp_lor LOR exp_land
    (47) exp_lor -> . exp_land
    (48) exp_land -> . exp_land LAND exp_or
    (49) exp_land -> . exp_or
    (50) exp_or -> . exp_or OR exp_and
    (51) exp_or -> . exp_and
    (52) exp_and -> . exp_and AND exp_comp
    (53) exp_and -> . exp_comp_eq
    (54) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (55) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (56) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (57) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (58) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (59) exp_comp_eq -> . exp_comp
    (60) exp_comp -> . exp_comp GT exp_plusminus
    (61) exp_comp -> . exp_comp LT exp_plusminus
    (62) exp_comp -> . exp_comp GE exp_plusminus
    (63) exp_comp -> . exp_comp LE exp_plusminus
    (64) exp_comp -> . exp_comp SLT exp_plusminus
    (65) exp_comp -> . exp_comp SGT exp_plusminus
    (66) exp_comp -> . exp_comp SGE exp_plusminus
    (67) exp_comp -> . exp_comp SLE exp_plusminus
    (68) exp_comp -> . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE

    RBRACE          shift and go to state 182
    RETURN          shift and go to state 8
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    IF              shift and go to state 17
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 20
    ID              shift and go to state 12
    FOR             shift and go to state 21
    DO              shift and go to state 22
    WHILE           shift and go to state 23
    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    SEMICOLON       reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    exp                            shift and go to state 6
    command                        shift and go to state 141
    interations                    shift and go to state 4
    if                             shift and go to state 5
    call                           shift and go to state 7
    for                            shift and go to state 14
    dowhile                        shift and go to state 15
    while                          shift and go to state 16
    exp_lor                        shift and go to state 19
    exp_land                       shift and go to state 24
    exp_or                         shift and go to state 25
    exp_and                        shift and go to state 26
    exp_comp                       shift and go to state 27
    exp_comp_eq                    shift and go to state 28
    exp_plusminus                  shift and go to state 29
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36

state 182

    (18) elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .
    (19) elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE . elsif2
    (20) elsif2 -> . elsif
    (21) elsif2 -> . ELSE LBRACE blockcode RBRACE
    (18) elsif -> . ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE
    (19) elsif -> . ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2

    RETURN          reduce using rule 18 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    BREAK           reduce using rule 18 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    CONTINUE        reduce using rule 18 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    SUB             reduce using rule 18 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    IF              reduce using rule 18 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    ID_SC           reduce using rule 18 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    ID_LI           reduce using rule 18 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    ID              reduce using rule 18 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    FOR             reduce using rule 18 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    DO              reduce using rule 18 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    WHILE           reduce using rule 18 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    XOR             reduce using rule 18 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    INCREMENT       reduce using rule 18 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    DECREMENT       reduce using rule 18 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    LPAREN          reduce using rule 18 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    NUMBER          reduce using rule 18 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    TRUE            reduce using rule 18 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    FALSE           reduce using rule 18 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    SEMICOLON       reduce using rule 18 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    LOR             reduce using rule 18 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    LAND            reduce using rule 18 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    OR              reduce using rule 18 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    AND             reduce using rule 18 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    EQ              reduce using rule 18 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    NE              reduce using rule 18 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    SEQ             reduce using rule 18 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    SNE             reduce using rule 18 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    CMP             reduce using rule 18 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    GT              reduce using rule 18 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    LT              reduce using rule 18 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    GE              reduce using rule 18 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    LE              reduce using rule 18 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    SLT             reduce using rule 18 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    SGT             reduce using rule 18 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    SGE             reduce using rule 18 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    SLE             reduce using rule 18 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    PLUS            reduce using rule 18 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    MINUS           reduce using rule 18 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    TIMES           reduce using rule 18 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    DIVIDE          reduce using rule 18 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    MODULO          reduce using rule 18 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    $end            reduce using rule 18 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    RBRACE          reduce using rule 18 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    ELSE            shift and go to state 185
    ELSIF           shift and go to state 168

    elsif2                         shift and go to state 183
    elsif                          shift and go to state 184

state 183

    (19) elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .

    RETURN          reduce using rule 19 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    BREAK           reduce using rule 19 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    CONTINUE        reduce using rule 19 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    SUB             reduce using rule 19 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    IF              reduce using rule 19 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    ID_SC           reduce using rule 19 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    ID_LI           reduce using rule 19 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    ID              reduce using rule 19 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    FOR             reduce using rule 19 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    DO              reduce using rule 19 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    WHILE           reduce using rule 19 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    XOR             reduce using rule 19 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    INCREMENT       reduce using rule 19 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    DECREMENT       reduce using rule 19 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    LPAREN          reduce using rule 19 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    NUMBER          reduce using rule 19 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    TRUE            reduce using rule 19 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    FALSE           reduce using rule 19 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    SEMICOLON       reduce using rule 19 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    LOR             reduce using rule 19 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    LAND            reduce using rule 19 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    OR              reduce using rule 19 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    AND             reduce using rule 19 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    EQ              reduce using rule 19 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    NE              reduce using rule 19 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    SEQ             reduce using rule 19 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    SNE             reduce using rule 19 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    CMP             reduce using rule 19 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    GT              reduce using rule 19 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    LT              reduce using rule 19 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    GE              reduce using rule 19 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    LE              reduce using rule 19 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    SLT             reduce using rule 19 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    SGT             reduce using rule 19 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    SGE             reduce using rule 19 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    SLE             reduce using rule 19 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    PLUS            reduce using rule 19 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    MINUS           reduce using rule 19 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    TIMES           reduce using rule 19 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    DIVIDE          reduce using rule 19 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    MODULO          reduce using rule 19 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    $end            reduce using rule 19 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    RBRACE          reduce using rule 19 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)


state 184

    (20) elsif2 -> elsif .

    RETURN          reduce using rule 20 (elsif2 -> elsif .)
    BREAK           reduce using rule 20 (elsif2 -> elsif .)
    CONTINUE        reduce using rule 20 (elsif2 -> elsif .)
    SUB             reduce using rule 20 (elsif2 -> elsif .)
    IF              reduce using rule 20 (elsif2 -> elsif .)
    ID_SC           reduce using rule 20 (elsif2 -> elsif .)
    ID_LI           reduce using rule 20 (elsif2 -> elsif .)
    ID              reduce using rule 20 (elsif2 -> elsif .)
    FOR             reduce using rule 20 (elsif2 -> elsif .)
    DO              reduce using rule 20 (elsif2 -> elsif .)
    WHILE           reduce using rule 20 (elsif2 -> elsif .)
    XOR             reduce using rule 20 (elsif2 -> elsif .)
    INCREMENT       reduce using rule 20 (elsif2 -> elsif .)
    DECREMENT       reduce using rule 20 (elsif2 -> elsif .)
    LPAREN          reduce using rule 20 (elsif2 -> elsif .)
    NUMBER          reduce using rule 20 (elsif2 -> elsif .)
    TRUE            reduce using rule 20 (elsif2 -> elsif .)
    FALSE           reduce using rule 20 (elsif2 -> elsif .)
    SEMICOLON       reduce using rule 20 (elsif2 -> elsif .)
    LOR             reduce using rule 20 (elsif2 -> elsif .)
    LAND            reduce using rule 20 (elsif2 -> elsif .)
    OR              reduce using rule 20 (elsif2 -> elsif .)
    AND             reduce using rule 20 (elsif2 -> elsif .)
    EQ              reduce using rule 20 (elsif2 -> elsif .)
    NE              reduce using rule 20 (elsif2 -> elsif .)
    SEQ             reduce using rule 20 (elsif2 -> elsif .)
    SNE             reduce using rule 20 (elsif2 -> elsif .)
    CMP             reduce using rule 20 (elsif2 -> elsif .)
    GT              reduce using rule 20 (elsif2 -> elsif .)
    LT              reduce using rule 20 (elsif2 -> elsif .)
    GE              reduce using rule 20 (elsif2 -> elsif .)
    LE              reduce using rule 20 (elsif2 -> elsif .)
    SLT             reduce using rule 20 (elsif2 -> elsif .)
    SGT             reduce using rule 20 (elsif2 -> elsif .)
    SGE             reduce using rule 20 (elsif2 -> elsif .)
    SLE             reduce using rule 20 (elsif2 -> elsif .)
    PLUS            reduce using rule 20 (elsif2 -> elsif .)
    MINUS           reduce using rule 20 (elsif2 -> elsif .)
    TIMES           reduce using rule 20 (elsif2 -> elsif .)
    DIVIDE          reduce using rule 20 (elsif2 -> elsif .)
    MODULO          reduce using rule 20 (elsif2 -> elsif .)
    $end            reduce using rule 20 (elsif2 -> elsif .)
    RBRACE          reduce using rule 20 (elsif2 -> elsif .)


state 185

    (21) elsif2 -> ELSE . LBRACE blockcode RBRACE

    LBRACE          shift and go to state 186


state 186

    (21) elsif2 -> ELSE LBRACE . blockcode RBRACE
    (5) blockcode -> . command
    (6) blockcode -> . blockcode command
    (7) command -> . interations
    (8) command -> . if
    (9) command -> . exp SEMICOLON
    (10) command -> . call SEMICOLON
    (11) command -> . RETURN return SEMICOLON
    (12) command -> . BREAK SEMICOLON
    (13) command -> . CONTINUE SEMICOLON
    (22) interations -> . for
    (23) interations -> . dowhile
    (24) interations -> . while
    (14) if -> . IF LPAREN exp RPAREN if_statement
    (38) exp -> . ID_SC EQUALS exp_lor
    (39) exp -> . ID_LI EQUALS exp_lor
    (40) exp -> . ID_SC MINUSEQUAL exp_lor
    (41) exp -> . ID_SC PLUSEQUAL exp_lor
    (42) exp -> . ID_SC MODEQUAL exp_lor
    (43) exp -> . ID_SC DIVEQUAL exp_lor
    (44) exp -> . ID_SC TIMESEQUAL exp_lor
    (45) exp -> . exp_lor
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN
    (25) for -> . FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (28) dowhile -> . DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN
    (29) while -> . WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE
    (30) while -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (46) exp_lor -> . exp_lor LOR exp_land
    (47) exp_lor -> . exp_land
    (48) exp_land -> . exp_land LAND exp_or
    (49) exp_land -> . exp_or
    (50) exp_or -> . exp_or OR exp_and
    (51) exp_or -> . exp_and
    (52) exp_and -> . exp_and AND exp_comp
    (53) exp_and -> . exp_comp_eq
    (54) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (55) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (56) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (57) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (58) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (59) exp_comp_eq -> . exp_comp
    (60) exp_comp -> . exp_comp GT exp_plusminus
    (61) exp_comp -> . exp_comp LT exp_plusminus
    (62) exp_comp -> . exp_comp GE exp_plusminus
    (63) exp_comp -> . exp_comp LE exp_plusminus
    (64) exp_comp -> . exp_comp SLT exp_plusminus
    (65) exp_comp -> . exp_comp SGT exp_plusminus
    (66) exp_comp -> . exp_comp SGE exp_plusminus
    (67) exp_comp -> . exp_comp SLE exp_plusminus
    (68) exp_comp -> . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE

    RETURN          shift and go to state 8
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    IF              shift and go to state 17
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 20
    ID              shift and go to state 12
    FOR             shift and go to state 21
    DO              shift and go to state 22
    WHILE           shift and go to state 23
    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    SEMICOLON       reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    blockcode                      shift and go to state 187
    command                        shift and go to state 110
    interations                    shift and go to state 4
    if                             shift and go to state 5
    exp                            shift and go to state 6
    call                           shift and go to state 7
    for                            shift and go to state 14
    dowhile                        shift and go to state 15
    while                          shift and go to state 16
    exp_lor                        shift and go to state 19
    exp_land                       shift and go to state 24
    exp_or                         shift and go to state 25
    exp_and                        shift and go to state 26
    exp_comp                       shift and go to state 27
    exp_comp_eq                    shift and go to state 28
    exp_plusminus                  shift and go to state 29
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36

state 187

    (21) elsif2 -> ELSE LBRACE blockcode . RBRACE
    (6) blockcode -> blockcode . command
    (7) command -> . interations
    (8) command -> . if
    (9) command -> . exp SEMICOLON
    (10) command -> . call SEMICOLON
    (11) command -> . RETURN return SEMICOLON
    (12) command -> . BREAK SEMICOLON
    (13) command -> . CONTINUE SEMICOLON
    (22) interations -> . for
    (23) interations -> . dowhile
    (24) interations -> . while
    (14) if -> . IF LPAREN exp RPAREN if_statement
    (38) exp -> . ID_SC EQUALS exp_lor
    (39) exp -> . ID_LI EQUALS exp_lor
    (40) exp -> . ID_SC MINUSEQUAL exp_lor
    (41) exp -> . ID_SC PLUSEQUAL exp_lor
    (42) exp -> . ID_SC MODEQUAL exp_lor
    (43) exp -> . ID_SC DIVEQUAL exp_lor
    (44) exp -> . ID_SC TIMESEQUAL exp_lor
    (45) exp -> . exp_lor
    (35) call -> . ID LPAREN RPAREN
    (36) call -> . ID LPAREN function_assignments RPAREN
    (25) for -> . FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (28) dowhile -> . DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN
    (29) while -> . WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE
    (30) while -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (46) exp_lor -> . exp_lor LOR exp_land
    (47) exp_lor -> . exp_land
    (48) exp_land -> . exp_land LAND exp_or
    (49) exp_land -> . exp_or
    (50) exp_or -> . exp_or OR exp_and
    (51) exp_or -> . exp_and
    (52) exp_and -> . exp_and AND exp_comp
    (53) exp_and -> . exp_comp_eq
    (54) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (55) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (56) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (57) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (58) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (59) exp_comp_eq -> . exp_comp
    (60) exp_comp -> . exp_comp GT exp_plusminus
    (61) exp_comp -> . exp_comp LT exp_plusminus
    (62) exp_comp -> . exp_comp GE exp_plusminus
    (63) exp_comp -> . exp_comp LE exp_plusminus
    (64) exp_comp -> . exp_comp SLT exp_plusminus
    (65) exp_comp -> . exp_comp SGT exp_plusminus
    (66) exp_comp -> . exp_comp SGE exp_plusminus
    (67) exp_comp -> . exp_comp SLE exp_plusminus
    (68) exp_comp -> . exp_plusminus
    (69) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (70) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (71) exp_plusminus -> . exp_times_divides
    (72) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (73) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (74) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (75) exp_times_divides -> . exp_lnot
    (76) exp_lnot -> . XOR exp_lnot
    (77) exp_lnot -> . exp_decrement_increment
    (78) exp_decrement_increment -> .
    (79) exp_decrement_increment -> . INCREMENT ID_SC
    (80) exp_decrement_increment -> . DECREMENT ID_SC
    (81) exp_decrement_increment -> . ID_SC INCREMENT
    (82) exp_decrement_increment -> . ID_SC DECREMENT
    (83) exp_decrement_increment -> . exp_lastlayer
    (84) exp_lastlayer -> . LPAREN exp RPAREN
    (85) exp_lastlayer -> . ID_SC
    (86) exp_lastlayer -> . ID_LI
    (87) exp_lastlayer -> . NUMBER
    (88) exp_lastlayer -> . call
    (89) exp_lastlayer -> . TRUE
    (90) exp_lastlayer -> . FALSE

    RBRACE          shift and go to state 188
    RETURN          shift and go to state 8
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    IF              shift and go to state 17
    ID_SC           shift and go to state 18
    ID_LI           shift and go to state 20
    ID              shift and go to state 12
    FOR             shift and go to state 21
    DO              shift and go to state 22
    WHILE           shift and go to state 23
    XOR             shift and go to state 32
    TIMES           reduce using rule 78 (exp_decrement_increment -> .)
    DIVIDE          reduce using rule 78 (exp_decrement_increment -> .)
    MODULO          reduce using rule 78 (exp_decrement_increment -> .)
    PLUS            reduce using rule 78 (exp_decrement_increment -> .)
    MINUS           reduce using rule 78 (exp_decrement_increment -> .)
    GT              reduce using rule 78 (exp_decrement_increment -> .)
    LT              reduce using rule 78 (exp_decrement_increment -> .)
    GE              reduce using rule 78 (exp_decrement_increment -> .)
    LE              reduce using rule 78 (exp_decrement_increment -> .)
    SLT             reduce using rule 78 (exp_decrement_increment -> .)
    SGT             reduce using rule 78 (exp_decrement_increment -> .)
    SGE             reduce using rule 78 (exp_decrement_increment -> .)
    SLE             reduce using rule 78 (exp_decrement_increment -> .)
    EQ              reduce using rule 78 (exp_decrement_increment -> .)
    NE              reduce using rule 78 (exp_decrement_increment -> .)
    SEQ             reduce using rule 78 (exp_decrement_increment -> .)
    SNE             reduce using rule 78 (exp_decrement_increment -> .)
    CMP             reduce using rule 78 (exp_decrement_increment -> .)
    AND             reduce using rule 78 (exp_decrement_increment -> .)
    OR              reduce using rule 78 (exp_decrement_increment -> .)
    LAND            reduce using rule 78 (exp_decrement_increment -> .)
    LOR             reduce using rule 78 (exp_decrement_increment -> .)
    SEMICOLON       reduce using rule 78 (exp_decrement_increment -> .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 35
    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    command                        shift and go to state 141
    interations                    shift and go to state 4
    if                             shift and go to state 5
    exp                            shift and go to state 6
    call                           shift and go to state 7
    for                            shift and go to state 14
    dowhile                        shift and go to state 15
    while                          shift and go to state 16
    exp_lor                        shift and go to state 19
    exp_land                       shift and go to state 24
    exp_or                         shift and go to state 25
    exp_and                        shift and go to state 26
    exp_comp                       shift and go to state 27
    exp_comp_eq                    shift and go to state 28
    exp_plusminus                  shift and go to state 29
    exp_times_divides              shift and go to state 30
    exp_lnot                       shift and go to state 31
    exp_decrement_increment        shift and go to state 33
    exp_lastlayer                  shift and go to state 36

state 188

    (21) elsif2 -> ELSE LBRACE blockcode RBRACE .

    RETURN          reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    BREAK           reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    CONTINUE        reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    SUB             reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    IF              reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    ID_SC           reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    ID_LI           reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    ID              reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    FOR             reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    DO              reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    WHILE           reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    XOR             reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    INCREMENT       reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    DECREMENT       reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    LPAREN          reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    NUMBER          reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    TRUE            reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    FALSE           reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    SEMICOLON       reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    LOR             reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    LAND            reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    OR              reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    AND             reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    EQ              reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    NE              reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    SEQ             reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    SNE             reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    CMP             reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    GT              reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    LT              reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    GE              reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    LE              reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    SLT             reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    SGT             reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    SGE             reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    SLE             reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    PLUS            reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    MINUS           reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    TIMES           reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    DIVIDE          reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    MODULO          reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    $end            reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    RBRACE          reduce using rule 21 (elsif2 -> ELSE LBRACE blockcode RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SEMICOLON in state 7 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 50 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 93 resolved as shift

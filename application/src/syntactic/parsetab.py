
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ANDEQUAL BREAK CMP COLON COMMA CONTINUE DECREMENT DIVEQUAL DIVIDE DO ELSE ELSIF EQ EQUALS EXP FALSE FOR GE GT ID ID_LI ID_SC IF INCREMENT LAND LBRACE LBRACKET LE LNOT LOR LPAREN LSHIFT LSHIFTEQUAL LT MINUS MINUSEQUAL MODEQUAL MODULO NE NO NUMBER OR OREQUAL PERIOD PLUS PLUSEQUAL Q QQ QR QW QX RBRACE RBRACKET RETURN RPAREN RSHIFT RSHIFTEQUAL S SEMICOLON SEQ SGE SGT SLE SLT SNE SUB TERNARY TIMES TIMESEQUAL TR TRUE UNLESS UNTIL WHILE XOR XOREQUALinit : command init\n        | command\n        | function init\n        | function\n     blockcode : command\n        | blockcode command\n     command : interations\n        | IF LPAREN exp RPAREN if_statement\n        | exp SEMICOLON\n        | RETURN return SEMICOLON\n        | BREAK SEMICOLON\n        | CONTINUE SEMICOLON\n    \n        if_statement :  LBRACE blockcode RBRACE\n            | LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE\n            | LBRACE blockcode RBRACE elsif\n    \n        elsif : ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE\n        | ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2\n    \n        elsif2 : elsif\n            | ELSE LBRACE blockcode RBRACE\n    \n       interations :  FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE\n       | DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN\n       | WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE\n       | WHILE LPAREN exp RPAREN LBRACE RBRACE\n     for_assignments : exp\n        | exp COMMA for_assignments\n     function : SUB ID LPAREN RPAREN LBRACE blockcode RBRACE\n        | SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE\n     function_assignments : exp\n        | exp COMMA function_assignments\n    \n        call : ID LPAREN RPAREN\n            | ID LPAREN function_assignments RPAREN\n     return : exp  exp : ID_SC EQUALS exp_lor\n        | ID_LI EQUALS exp_lor\n        | ID_SC MINUSEQUAL exp_lor\n        | ID_SC PLUSEQUAL exp_lor\n        | ID_SC MODEQUAL exp_lor\n        | ID_SC DIVEQUAL exp_lor\n        | ID_SC TIMESEQUAL exp_lor\n        | exp_lor\n    \n        exp_lor : exp_lor LOR exp_land\n            | exp_land\n    \n        exp_land : exp_land LAND exp_or\n            | exp_or\n    \n        exp_or : exp_or OR exp_and\n            | exp_and\n    \n        exp_and : exp_and AND exp_comp\n            | exp_comp_eq\n    \n        exp_comp_eq : exp_comp_eq EQ exp_comp\n            | exp_comp_eq NE exp_comp\n            | exp_comp_eq SEQ exp_comp\n            | exp_comp_eq SNE exp_comp\n            | exp_comp_eq CMP exp_comp\n            | exp_comp\n    \n        exp_comp : exp_comp GT exp_plusminus\n            | exp_comp LT exp_plusminus\n            | exp_comp GE exp_plusminus\n            | exp_comp LE exp_plusminus\n            | exp_comp SLT exp_plusminus\n            | exp_comp SGT exp_plusminus\n            | exp_comp SGE exp_plusminus\n            | exp_comp SLE exp_plusminus\n            | exp_plusminus\n    \n        exp_plusminus : exp_plusminus PLUS exp_times_divides\n            | exp_plusminus MINUS exp_times_divides\n            | exp_times_divides\n    \n        exp_times_divides : exp_times_divides TIMES exp_lnot\n            | exp_times_divides DIVIDE exp_lnot\n            | exp_times_divides MODULO exp_lnot\n            | exp_lnot\n    \n    exp_lnot : XOR exp_lnot\n        | exp_decrement_increment\n    \n    exp_decrement_increment : INCREMENT ID_SC\n        | DECREMENT ID_SC\n        | ID_SC INCREMENT\n        | ID_SC DECREMENT\n        | exp_lastlayer\n    \n        exp_lastlayer : LPAREN exp RPAREN\n        | ID_SC\n        | ID_LI\n        | NUMBER\n        | call\n        | TRUE\n        | FALSE\n    '
    
_lr_action_items = {'IF':([0,2,3,4,40,43,44,48,88,95,96,135,137,138,139,145,146,147,148,151,152,153,154,155,158,160,162,164,165,167,168,170,171,173,174,175,176,177,178,180,181,182,],[5,5,5,-7,-9,-11,-12,5,-10,5,-5,-6,-8,5,5,5,5,5,5,5,-23,-13,-26,5,-22,-15,-27,-21,5,5,5,5,-14,-20,5,5,-16,-17,-18,5,5,-19,]),'RETURN':([0,2,3,4,40,43,44,48,88,95,96,135,137,138,139,145,146,147,148,151,152,153,154,155,158,160,162,164,165,167,168,170,171,173,174,175,176,177,178,180,181,182,],[8,8,8,-7,-9,-11,-12,8,-10,8,-5,-6,-8,8,8,8,8,8,8,8,-23,-13,-26,8,-22,-15,-27,-21,8,8,8,8,-14,-20,8,8,-16,-17,-18,8,8,-19,]),'BREAK':([0,2,3,4,40,43,44,48,88,95,96,135,137,138,139,145,146,147,148,151,152,153,154,155,158,160,162,164,165,167,168,170,171,173,174,175,176,177,178,180,181,182,],[9,9,9,-7,-9,-11,-12,9,-10,9,-5,-6,-8,9,9,9,9,9,9,9,-23,-13,-26,9,-22,-15,-27,-21,9,9,9,9,-14,-20,9,9,-16,-17,-18,9,9,-19,]),'CONTINUE':([0,2,3,4,40,43,44,48,88,95,96,135,137,138,139,145,146,147,148,151,152,153,154,155,158,160,162,164,165,167,168,170,171,173,174,175,176,177,178,180,181,182,],[10,10,10,-7,-9,-11,-12,10,-10,10,-5,-6,-8,10,10,10,10,10,10,10,-23,-13,-26,10,-22,-15,-27,-21,10,10,10,10,-14,-20,10,10,-16,-17,-18,10,10,-19,]),'SUB':([0,2,3,4,40,43,44,88,137,152,153,154,158,160,162,164,171,173,176,177,178,182,],[11,11,11,-7,-9,-11,-12,-10,-8,-23,-13,-26,-22,-15,-27,-21,-14,-20,-16,-17,-18,-19,]),'FOR':([0,2,3,4,40,43,44,48,88,95,96,135,137,138,139,145,146,147,148,151,152,153,154,155,158,160,162,164,165,167,168,170,171,173,174,175,176,177,178,180,181,182,],[13,13,13,-7,-9,-11,-12,13,-10,13,-5,-6,-8,13,13,13,13,13,13,13,-23,-13,-26,13,-22,-15,-27,-21,13,13,13,13,-14,-20,13,13,-16,-17,-18,13,13,-19,]),'DO':([0,2,3,4,40,43,44,48,88,95,96,135,137,138,139,145,146,147,148,151,152,153,154,155,158,160,162,164,165,167,168,170,171,173,174,175,176,177,178,180,181,182,],[14,14,14,-7,-9,-11,-12,14,-10,14,-5,-6,-8,14,14,14,14,14,14,14,-23,-13,-26,14,-22,-15,-27,-21,14,14,14,14,-14,-20,14,14,-16,-17,-18,14,14,-19,]),'WHILE':([0,2,3,4,40,43,44,48,88,95,96,134,135,137,138,139,145,146,147,148,151,152,153,154,155,158,160,162,164,165,167,168,170,171,173,174,175,176,177,178,180,181,182,],[15,15,15,-7,-9,-11,-12,15,-10,15,-5,144,-6,-8,15,15,15,15,15,15,15,-23,-13,-26,15,-22,-15,-27,-21,15,15,15,15,-14,-20,15,15,-16,-17,-18,15,15,-19,]),'ID_SC':([0,2,3,4,6,8,27,29,30,38,40,43,44,46,47,48,49,50,51,52,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,88,89,95,96,131,132,133,135,137,138,139,145,146,147,148,149,150,151,152,153,154,155,158,160,162,164,165,166,167,168,170,171,173,174,175,176,177,178,180,181,182,],[16,16,16,-7,16,16,82,84,85,16,-9,-11,-12,16,16,16,16,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,-10,16,16,-5,16,16,16,-6,-8,16,16,16,16,16,16,16,16,16,-23,-13,-26,16,-22,-15,-27,-21,16,16,16,16,16,-14,-20,16,16,-16,-17,-18,16,16,-19,]),'ID_LI':([0,2,3,4,6,8,27,38,40,43,44,46,47,48,49,50,51,52,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,88,89,95,96,131,132,133,135,137,138,139,145,146,147,148,149,150,151,152,153,154,155,158,160,162,164,165,166,167,168,170,171,173,174,175,176,177,178,180,181,182,],[18,18,18,-7,18,18,83,18,-9,-11,-12,18,18,18,18,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,-10,18,18,-5,18,18,18,-6,-8,18,18,18,18,18,18,18,18,18,-23,-13,-26,18,-22,-15,-27,-21,18,18,18,18,18,-14,-20,18,18,-16,-17,-18,18,18,-19,]),'XOR':([0,2,3,4,6,8,27,38,40,43,44,46,47,48,49,50,51,52,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,88,89,95,96,131,132,133,135,137,138,139,145,146,147,148,149,150,151,152,153,154,155,158,160,162,164,165,166,167,168,170,171,173,174,175,176,177,178,180,181,182,],[27,27,27,-7,27,27,27,27,-9,-11,-12,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-10,27,27,-5,27,27,27,-6,-8,27,27,27,27,27,27,27,27,27,-23,-13,-26,27,-22,-15,-27,-21,27,27,27,27,27,-14,-20,27,27,-16,-17,-18,27,27,-19,]),'INCREMENT':([0,2,3,4,6,8,16,27,38,40,43,44,46,47,48,49,50,51,52,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,82,88,89,95,96,131,132,133,135,137,138,139,145,146,147,148,149,150,151,152,153,154,155,158,160,162,164,165,166,167,168,170,171,173,174,175,176,177,178,180,181,182,],[29,29,29,-7,29,29,56,29,29,-9,-11,-12,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,56,-10,29,29,-5,29,29,29,-6,-8,29,29,29,29,29,29,29,29,29,-23,-13,-26,29,-22,-15,-27,-21,29,29,29,29,29,-14,-20,29,29,-16,-17,-18,29,29,-19,]),'DECREMENT':([0,2,3,4,6,8,16,27,38,40,43,44,46,47,48,49,50,51,52,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,82,88,89,95,96,131,132,133,135,137,138,139,145,146,147,148,149,150,151,152,153,154,155,158,160,162,164,165,166,167,168,170,171,173,174,175,176,177,178,180,181,182,],[30,30,30,-7,30,30,57,30,30,-9,-11,-12,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,57,-10,30,30,-5,30,30,30,-6,-8,30,30,30,30,30,30,30,30,30,-23,-13,-26,30,-22,-15,-27,-21,30,30,30,30,30,-14,-20,30,30,-16,-17,-18,30,30,-19,]),'LPAREN':([0,2,3,4,5,6,8,12,13,15,27,38,40,43,44,45,46,47,48,49,50,51,52,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,88,89,95,96,131,132,133,135,137,138,139,144,145,146,147,148,149,150,151,152,153,154,155,158,160,161,162,164,165,166,167,168,170,171,173,174,175,176,177,178,180,181,182,],[6,6,6,-7,38,6,6,46,47,49,6,6,-9,-11,-12,89,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,-10,6,6,-5,6,6,6,-6,-8,6,6,150,6,6,6,6,6,6,6,-23,-13,-26,6,-22,-15,166,-27,-21,6,6,6,6,6,-14,-20,6,6,-16,-17,-18,6,6,-19,]),'NUMBER':([0,2,3,4,6,8,27,38,40,43,44,46,47,48,49,50,51,52,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,88,89,95,96,131,132,133,135,137,138,139,145,146,147,148,149,150,151,152,153,154,155,158,160,162,164,165,166,167,168,170,171,173,174,175,176,177,178,180,181,182,],[32,32,32,-7,32,32,32,32,-9,-11,-12,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-10,32,32,-5,32,32,32,-6,-8,32,32,32,32,32,32,32,32,32,-23,-13,-26,32,-22,-15,-27,-21,32,32,32,32,32,-14,-20,32,32,-16,-17,-18,32,32,-19,]),'TRUE':([0,2,3,4,6,8,27,38,40,43,44,46,47,48,49,50,51,52,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,88,89,95,96,131,132,133,135,137,138,139,145,146,147,148,149,150,151,152,153,154,155,158,160,162,164,165,166,167,168,170,171,173,174,175,176,177,178,180,181,182,],[34,34,34,-7,34,34,34,34,-9,-11,-12,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-10,34,34,-5,34,34,34,-6,-8,34,34,34,34,34,34,34,34,34,-23,-13,-26,34,-22,-15,-27,-21,34,34,34,34,34,-14,-20,34,34,-16,-17,-18,34,34,-19,]),'FALSE':([0,2,3,4,6,8,27,38,40,43,44,46,47,48,49,50,51,52,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,88,89,95,96,131,132,133,135,137,138,139,145,146,147,148,149,150,151,152,153,154,155,158,160,162,164,165,166,167,168,170,171,173,174,175,176,177,178,180,181,182,],[35,35,35,-7,35,35,35,35,-9,-11,-12,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-10,35,35,-5,35,35,35,-6,-8,35,35,35,35,35,35,35,35,35,-23,-13,-26,35,-22,-15,-27,-21,35,35,35,35,35,-14,-20,35,35,-16,-17,-18,35,35,-19,]),'ID':([0,2,3,4,6,8,11,27,38,40,43,44,46,47,48,49,50,51,52,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,88,89,95,96,131,132,133,135,137,138,139,145,146,147,148,149,150,151,152,153,154,155,158,160,162,164,165,166,167,168,170,171,173,174,175,176,177,178,180,181,182,],[12,12,12,-7,12,12,45,12,12,-9,-11,-12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,-10,12,12,-5,12,12,12,-6,-8,12,12,12,12,12,12,12,12,12,-23,-13,-26,12,-22,-15,-27,-21,12,12,12,12,12,-14,-20,12,12,-16,-17,-18,12,12,-19,]),'$end':([1,2,3,4,36,37,40,43,44,88,137,152,153,154,158,160,162,164,171,173,176,177,178,182,],[0,-2,-4,-7,-1,-3,-9,-11,-12,-10,-8,-23,-13,-26,-22,-15,-27,-21,-14,-20,-16,-17,-18,-19,]),'RBRACE':([4,40,43,44,88,95,96,135,137,145,146,147,151,152,153,155,158,160,164,168,170,171,173,175,176,177,178,181,182,],[-7,-9,-11,-12,-10,134,-5,-6,-8,152,153,154,158,-23,-13,162,-22,-15,-21,171,173,-14,-20,176,-16,-17,-18,182,-19,]),'SEMICOLON':([7,9,10,16,17,18,19,20,21,22,23,24,25,26,28,31,32,33,34,35,41,42,56,57,81,82,83,84,85,87,90,93,94,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,130,142,143,],[40,43,44,-79,-40,-80,-42,-44,-46,-54,-48,-63,-66,-70,-72,-77,-81,-82,-83,-84,88,-32,-75,-76,-71,-79,-80,-73,-74,-78,-30,132,-24,-33,-35,-36,-37,-38,-39,-41,-34,-43,-45,-47,-55,-56,-57,-58,-59,-60,-61,-62,-49,-50,-51,-52,-53,-64,-65,-67,-68,-69,-31,149,-25,]),'LBRACE':([14,127,128,136,140,159,163,172,179,],[48,138,139,145,148,165,167,174,180,]),'EQUALS':([16,18,],[50,59,]),'MINUSEQUAL':([16,],[51,]),'PLUSEQUAL':([16,],[52,]),'MODEQUAL':([16,],[53,]),'DIVEQUAL':([16,],[54,]),'TIMESEQUAL':([16,],[55,]),'TIMES':([16,18,25,26,28,31,32,33,34,35,56,57,81,82,83,84,85,87,90,122,123,124,125,126,130,],[-79,-80,78,-70,-72,-77,-81,-82,-83,-84,-75,-76,-71,-79,-80,-73,-74,-78,-30,78,78,-67,-68,-69,-31,]),'DIVIDE':([16,18,25,26,28,31,32,33,34,35,56,57,81,82,83,84,85,87,90,122,123,124,125,126,130,],[-79,-80,79,-70,-72,-77,-81,-82,-83,-84,-75,-76,-71,-79,-80,-73,-74,-78,-30,79,79,-67,-68,-69,-31,]),'MODULO':([16,18,25,26,28,31,32,33,34,35,56,57,81,82,83,84,85,87,90,122,123,124,125,126,130,],[-79,-80,80,-70,-72,-77,-81,-82,-83,-84,-75,-76,-71,-79,-80,-73,-74,-78,-30,80,80,-67,-68,-69,-31,]),'PLUS':([16,18,24,25,26,28,31,32,33,34,35,56,57,81,82,83,84,85,87,90,109,110,111,112,113,114,115,116,122,123,124,125,126,130,],[-79,-80,76,-66,-70,-72,-77,-81,-82,-83,-84,-75,-76,-71,-79,-80,-73,-74,-78,-30,76,76,76,76,76,76,76,76,-64,-65,-67,-68,-69,-31,]),'MINUS':([16,18,24,25,26,28,31,32,33,34,35,56,57,81,82,83,84,85,87,90,109,110,111,112,113,114,115,116,122,123,124,125,126,130,],[-79,-80,77,-66,-70,-72,-77,-81,-82,-83,-84,-75,-76,-71,-79,-80,-73,-74,-78,-30,77,77,77,77,77,77,77,77,-64,-65,-67,-68,-69,-31,]),'GT':([16,18,22,24,25,26,28,31,32,33,34,35,56,57,81,82,83,84,85,87,90,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,130,],[-79,-80,63,-63,-66,-70,-72,-77,-81,-82,-83,-84,-75,-76,-71,-79,-80,-73,-74,-78,-30,63,-55,-56,-57,-58,-59,-60,-61,-62,63,63,63,63,63,-64,-65,-67,-68,-69,-31,]),'LT':([16,18,22,24,25,26,28,31,32,33,34,35,56,57,81,82,83,84,85,87,90,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,130,],[-79,-80,64,-63,-66,-70,-72,-77,-81,-82,-83,-84,-75,-76,-71,-79,-80,-73,-74,-78,-30,64,-55,-56,-57,-58,-59,-60,-61,-62,64,64,64,64,64,-64,-65,-67,-68,-69,-31,]),'GE':([16,18,22,24,25,26,28,31,32,33,34,35,56,57,81,82,83,84,85,87,90,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,130,],[-79,-80,65,-63,-66,-70,-72,-77,-81,-82,-83,-84,-75,-76,-71,-79,-80,-73,-74,-78,-30,65,-55,-56,-57,-58,-59,-60,-61,-62,65,65,65,65,65,-64,-65,-67,-68,-69,-31,]),'LE':([16,18,22,24,25,26,28,31,32,33,34,35,56,57,81,82,83,84,85,87,90,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,130,],[-79,-80,66,-63,-66,-70,-72,-77,-81,-82,-83,-84,-75,-76,-71,-79,-80,-73,-74,-78,-30,66,-55,-56,-57,-58,-59,-60,-61,-62,66,66,66,66,66,-64,-65,-67,-68,-69,-31,]),'SLT':([16,18,22,24,25,26,28,31,32,33,34,35,56,57,81,82,83,84,85,87,90,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,130,],[-79,-80,67,-63,-66,-70,-72,-77,-81,-82,-83,-84,-75,-76,-71,-79,-80,-73,-74,-78,-30,67,-55,-56,-57,-58,-59,-60,-61,-62,67,67,67,67,67,-64,-65,-67,-68,-69,-31,]),'SGT':([16,18,22,24,25,26,28,31,32,33,34,35,56,57,81,82,83,84,85,87,90,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,130,],[-79,-80,68,-63,-66,-70,-72,-77,-81,-82,-83,-84,-75,-76,-71,-79,-80,-73,-74,-78,-30,68,-55,-56,-57,-58,-59,-60,-61,-62,68,68,68,68,68,-64,-65,-67,-68,-69,-31,]),'SGE':([16,18,22,24,25,26,28,31,32,33,34,35,56,57,81,82,83,84,85,87,90,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,130,],[-79,-80,69,-63,-66,-70,-72,-77,-81,-82,-83,-84,-75,-76,-71,-79,-80,-73,-74,-78,-30,69,-55,-56,-57,-58,-59,-60,-61,-62,69,69,69,69,69,-64,-65,-67,-68,-69,-31,]),'SLE':([16,18,22,24,25,26,28,31,32,33,34,35,56,57,81,82,83,84,85,87,90,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,130,],[-79,-80,70,-63,-66,-70,-72,-77,-81,-82,-83,-84,-75,-76,-71,-79,-80,-73,-74,-78,-30,70,-55,-56,-57,-58,-59,-60,-61,-62,70,70,70,70,70,-64,-65,-67,-68,-69,-31,]),'EQ':([16,18,22,23,24,25,26,28,31,32,33,34,35,56,57,81,82,83,84,85,87,90,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,130,],[-79,-80,-54,71,-63,-66,-70,-72,-77,-81,-82,-83,-84,-75,-76,-71,-79,-80,-73,-74,-78,-30,-55,-56,-57,-58,-59,-60,-61,-62,-49,-50,-51,-52,-53,-64,-65,-67,-68,-69,-31,]),'NE':([16,18,22,23,24,25,26,28,31,32,33,34,35,56,57,81,82,83,84,85,87,90,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,130,],[-79,-80,-54,72,-63,-66,-70,-72,-77,-81,-82,-83,-84,-75,-76,-71,-79,-80,-73,-74,-78,-30,-55,-56,-57,-58,-59,-60,-61,-62,-49,-50,-51,-52,-53,-64,-65,-67,-68,-69,-31,]),'SEQ':([16,18,22,23,24,25,26,28,31,32,33,34,35,56,57,81,82,83,84,85,87,90,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,130,],[-79,-80,-54,73,-63,-66,-70,-72,-77,-81,-82,-83,-84,-75,-76,-71,-79,-80,-73,-74,-78,-30,-55,-56,-57,-58,-59,-60,-61,-62,-49,-50,-51,-52,-53,-64,-65,-67,-68,-69,-31,]),'SNE':([16,18,22,23,24,25,26,28,31,32,33,34,35,56,57,81,82,83,84,85,87,90,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,130,],[-79,-80,-54,74,-63,-66,-70,-72,-77,-81,-82,-83,-84,-75,-76,-71,-79,-80,-73,-74,-78,-30,-55,-56,-57,-58,-59,-60,-61,-62,-49,-50,-51,-52,-53,-64,-65,-67,-68,-69,-31,]),'CMP':([16,18,22,23,24,25,26,28,31,32,33,34,35,56,57,81,82,83,84,85,87,90,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,130,],[-79,-80,-54,75,-63,-66,-70,-72,-77,-81,-82,-83,-84,-75,-76,-71,-79,-80,-73,-74,-78,-30,-55,-56,-57,-58,-59,-60,-61,-62,-49,-50,-51,-52,-53,-64,-65,-67,-68,-69,-31,]),'AND':([16,18,21,22,23,24,25,26,28,31,32,33,34,35,56,57,81,82,83,84,85,87,90,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,130,],[-79,-80,62,-54,-48,-63,-66,-70,-72,-77,-81,-82,-83,-84,-75,-76,-71,-79,-80,-73,-74,-78,-30,62,-47,-55,-56,-57,-58,-59,-60,-61,-62,-49,-50,-51,-52,-53,-64,-65,-67,-68,-69,-31,]),'OR':([16,18,20,21,22,23,24,25,26,28,31,32,33,34,35,56,57,81,82,83,84,85,87,90,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,130,],[-79,-80,61,-46,-54,-48,-63,-66,-70,-72,-77,-81,-82,-83,-84,-75,-76,-71,-79,-80,-73,-74,-78,-30,61,-45,-47,-55,-56,-57,-58,-59,-60,-61,-62,-49,-50,-51,-52,-53,-64,-65,-67,-68,-69,-31,]),'LAND':([16,18,19,20,21,22,23,24,25,26,28,31,32,33,34,35,56,57,81,82,83,84,85,87,90,104,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,130,],[-79,-80,60,-44,-46,-54,-48,-63,-66,-70,-72,-77,-81,-82,-83,-84,-75,-76,-71,-79,-80,-73,-74,-78,-30,60,-43,-45,-47,-55,-56,-57,-58,-59,-60,-61,-62,-49,-50,-51,-52,-53,-64,-65,-67,-68,-69,-31,]),'LOR':([16,17,18,19,20,21,22,23,24,25,26,28,31,32,33,34,35,56,57,81,82,83,84,85,87,90,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,130,],[-79,58,-80,-42,-44,-46,-54,-48,-63,-66,-70,-72,-77,-81,-82,-83,-84,-75,-76,-71,-79,-80,-73,-74,-78,-30,58,58,58,58,58,58,-41,58,-43,-45,-47,-55,-56,-57,-58,-59,-60,-61,-62,-49,-50,-51,-52,-53,-64,-65,-67,-68,-69,-31,]),'RPAREN':([16,17,18,19,20,21,22,23,24,25,26,28,31,32,33,34,35,39,46,56,57,81,82,83,84,85,86,87,89,90,91,92,94,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,129,130,141,143,156,157,169,],[-79,-40,-80,-42,-44,-46,-54,-48,-63,-66,-70,-72,-77,-81,-82,-83,-84,87,90,-75,-76,-71,-79,-80,-73,-74,127,-78,128,-30,130,-28,-24,136,-33,-35,-36,-37,-38,-39,-41,-34,-43,-45,-47,-55,-56,-57,-58,-59,-60,-61,-62,-49,-50,-51,-52,-53,-64,-65,-67,-68,-69,140,-31,-29,-25,163,164,172,]),'COMMA':([16,17,18,19,20,21,22,23,24,25,26,28,31,32,33,34,35,56,57,81,82,83,84,85,87,90,92,94,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,130,],[-79,-40,-80,-42,-44,-46,-54,-48,-63,-66,-70,-72,-77,-81,-82,-83,-84,-75,-76,-71,-79,-80,-73,-74,-78,-30,131,133,-33,-35,-36,-37,-38,-39,-41,-34,-43,-45,-47,-55,-56,-57,-58,-59,-60,-61,-62,-49,-50,-51,-52,-53,-64,-65,-67,-68,-69,-31,]),'ELSE':([153,176,],[159,179,]),'ELSIF':([153,176,],[161,161,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,2,3,],[1,36,37,]),'command':([0,2,3,48,95,138,139,145,146,147,148,151,155,165,167,168,170,174,175,180,181,],[2,2,2,96,135,96,96,96,135,135,96,135,135,96,96,135,135,96,135,96,135,]),'function':([0,2,3,],[3,3,3,]),'interations':([0,2,3,48,95,138,139,145,146,147,148,151,155,165,167,168,170,174,175,180,181,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'exp':([0,2,3,6,8,38,46,47,48,49,89,95,131,132,133,138,139,145,146,147,148,149,150,151,155,165,166,167,168,170,174,175,180,181,],[7,7,7,39,42,86,92,94,7,97,92,7,92,142,94,7,7,7,7,7,7,94,157,7,7,7,169,7,7,7,7,7,7,7,]),'exp_lor':([0,2,3,6,8,38,46,47,48,49,50,51,52,53,54,55,59,89,95,131,132,133,138,139,145,146,147,148,149,150,151,155,165,166,167,168,170,174,175,180,181,],[17,17,17,17,17,17,17,17,17,17,98,99,100,101,102,103,105,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'exp_land':([0,2,3,6,8,38,46,47,48,49,50,51,52,53,54,55,58,59,89,95,131,132,133,138,139,145,146,147,148,149,150,151,155,165,166,167,168,170,174,175,180,181,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,104,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'exp_or':([0,2,3,6,8,38,46,47,48,49,50,51,52,53,54,55,58,59,60,89,95,131,132,133,138,139,145,146,147,148,149,150,151,155,165,166,167,168,170,174,175,180,181,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,106,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'exp_and':([0,2,3,6,8,38,46,47,48,49,50,51,52,53,54,55,58,59,60,61,89,95,131,132,133,138,139,145,146,147,148,149,150,151,155,165,166,167,168,170,174,175,180,181,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,107,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'exp_comp':([0,2,3,6,8,38,46,47,48,49,50,51,52,53,54,55,58,59,60,61,62,71,72,73,74,75,89,95,131,132,133,138,139,145,146,147,148,149,150,151,155,165,166,167,168,170,174,175,180,181,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,108,117,118,119,120,121,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'exp_comp_eq':([0,2,3,6,8,38,46,47,48,49,50,51,52,53,54,55,58,59,60,61,89,95,131,132,133,138,139,145,146,147,148,149,150,151,155,165,166,167,168,170,174,175,180,181,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'exp_plusminus':([0,2,3,6,8,38,46,47,48,49,50,51,52,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,89,95,131,132,133,138,139,145,146,147,148,149,150,151,155,165,166,167,168,170,174,175,180,181,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,109,110,111,112,113,114,115,116,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'exp_times_divides':([0,2,3,6,8,38,46,47,48,49,50,51,52,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,89,95,131,132,133,138,139,145,146,147,148,149,150,151,155,165,166,167,168,170,174,175,180,181,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,122,123,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'exp_lnot':([0,2,3,6,8,27,38,46,47,48,49,50,51,52,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,89,95,131,132,133,138,139,145,146,147,148,149,150,151,155,165,166,167,168,170,174,175,180,181,],[26,26,26,26,26,81,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,124,125,126,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'exp_decrement_increment':([0,2,3,6,8,27,38,46,47,48,49,50,51,52,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,89,95,131,132,133,138,139,145,146,147,148,149,150,151,155,165,166,167,168,170,174,175,180,181,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'exp_lastlayer':([0,2,3,6,8,27,38,46,47,48,49,50,51,52,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,89,95,131,132,133,138,139,145,146,147,148,149,150,151,155,165,166,167,168,170,174,175,180,181,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'call':([0,2,3,6,8,27,38,46,47,48,49,50,51,52,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,89,95,131,132,133,138,139,145,146,147,148,149,150,151,155,165,166,167,168,170,174,175,180,181,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'return':([8,],[41,]),'function_assignments':([46,89,131,],[91,129,141,]),'for_assignments':([47,133,149,],[93,143,156,]),'blockcode':([48,138,139,145,148,165,167,174,180,],[95,146,147,151,155,168,170,175,181,]),'if_statement':([127,],[137,]),'elsif':([153,176,],[160,178,]),'elsif2':([176,],[177,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> command init','init',2,'p_init','syntactic.py',8),
  ('init -> command','init',1,'p_init','syntactic.py',9),
  ('init -> function init','init',2,'p_init','syntactic.py',10),
  ('init -> function','init',1,'p_init','syntactic.py',11),
  ('blockcode -> command','blockcode',1,'p_blockcode','syntactic.py',26),
  ('blockcode -> blockcode command','blockcode',2,'p_blockcode','syntactic.py',27),
  ('command -> interations','command',1,'p_command','syntactic.py',36),
  ('command -> IF LPAREN exp RPAREN if_statement','command',5,'p_command','syntactic.py',37),
  ('command -> exp SEMICOLON','command',2,'p_command','syntactic.py',38),
  ('command -> RETURN return SEMICOLON','command',3,'p_command','syntactic.py',39),
  ('command -> BREAK SEMICOLON','command',2,'p_command','syntactic.py',40),
  ('command -> CONTINUE SEMICOLON','command',2,'p_command','syntactic.py',41),
  ('if_statement -> LBRACE blockcode RBRACE','if_statement',3,'p_if_statement','syntactic.py',60),
  ('if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE','if_statement',7,'p_if_statement','syntactic.py',61),
  ('if_statement -> LBRACE blockcode RBRACE elsif','if_statement',4,'p_if_statement','syntactic.py',62),
  ('elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE','elsif',7,'p_elsif','syntactic.py',74),
  ('elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2','elsif',8,'p_elsif','syntactic.py',75),
  ('elsif2 -> elsif','elsif2',1,'p_elsif2','syntactic.py',85),
  ('elsif2 -> ELSE LBRACE blockcode RBRACE','elsif2',4,'p_elsif2','syntactic.py',86),
  ('interations -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE','interations',11,'p_interations','syntactic.py',96),
  ('interations -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN','interations',8,'p_interations','syntactic.py',97),
  ('interations -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE','interations',7,'p_interations','syntactic.py',98),
  ('interations -> WHILE LPAREN exp RPAREN LBRACE RBRACE','interations',6,'p_interations','syntactic.py',99),
  ('for_assignments -> exp','for_assignments',1,'p_for_assignments','syntactic.py',113),
  ('for_assignments -> exp COMMA for_assignments','for_assignments',3,'p_for_assignments','syntactic.py',114),
  ('function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE','function',7,'p_function','syntactic.py',123),
  ('function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE','function',8,'p_function','syntactic.py',124),
  ('function_assignments -> exp','function_assignments',1,'p_function_assignments','syntactic.py',133),
  ('function_assignments -> exp COMMA function_assignments','function_assignments',3,'p_function_assignments','syntactic.py',134),
  ('call -> ID LPAREN RPAREN','call',3,'p_call','syntactic.py',144),
  ('call -> ID LPAREN function_assignments RPAREN','call',4,'p_call','syntactic.py',145),
  ('return -> exp','return',1,'p_return','syntactic.py',154),
  ('exp -> ID_SC EQUALS exp_lor','exp',3,'p_exp','syntactic.py',159),
  ('exp -> ID_LI EQUALS exp_lor','exp',3,'p_exp','syntactic.py',160),
  ('exp -> ID_SC MINUSEQUAL exp_lor','exp',3,'p_exp','syntactic.py',161),
  ('exp -> ID_SC PLUSEQUAL exp_lor','exp',3,'p_exp','syntactic.py',162),
  ('exp -> ID_SC MODEQUAL exp_lor','exp',3,'p_exp','syntactic.py',163),
  ('exp -> ID_SC DIVEQUAL exp_lor','exp',3,'p_exp','syntactic.py',164),
  ('exp -> ID_SC TIMESEQUAL exp_lor','exp',3,'p_exp','syntactic.py',165),
  ('exp -> exp_lor','exp',1,'p_exp','syntactic.py',166),
  ('exp_lor -> exp_lor LOR exp_land','exp_lor',3,'p_exp_lor','syntactic.py',187),
  ('exp_lor -> exp_land','exp_lor',1,'p_exp_lor','syntactic.py',188),
  ('exp_land -> exp_land LAND exp_or','exp_land',3,'p_exp_land','syntactic.py',197),
  ('exp_land -> exp_or','exp_land',1,'p_exp_land','syntactic.py',198),
  ('exp_or -> exp_or OR exp_and','exp_or',3,'p_exp_or','syntactic.py',207),
  ('exp_or -> exp_and','exp_or',1,'p_exp_or','syntactic.py',208),
  ('exp_and -> exp_and AND exp_comp','exp_and',3,'p_exp_and','syntactic.py',217),
  ('exp_and -> exp_comp_eq','exp_and',1,'p_exp_and','syntactic.py',218),
  ('exp_comp_eq -> exp_comp_eq EQ exp_comp','exp_comp_eq',3,'p_exp_comp_eq','syntactic.py',227),
  ('exp_comp_eq -> exp_comp_eq NE exp_comp','exp_comp_eq',3,'p_exp_comp_eq','syntactic.py',228),
  ('exp_comp_eq -> exp_comp_eq SEQ exp_comp','exp_comp_eq',3,'p_exp_comp_eq','syntactic.py',229),
  ('exp_comp_eq -> exp_comp_eq SNE exp_comp','exp_comp_eq',3,'p_exp_comp_eq','syntactic.py',230),
  ('exp_comp_eq -> exp_comp_eq CMP exp_comp','exp_comp_eq',3,'p_exp_comp_eq','syntactic.py',231),
  ('exp_comp_eq -> exp_comp','exp_comp_eq',1,'p_exp_comp_eq','syntactic.py',232),
  ('exp_comp -> exp_comp GT exp_plusminus','exp_comp',3,'p_exp_comp','syntactic.py',249),
  ('exp_comp -> exp_comp LT exp_plusminus','exp_comp',3,'p_exp_comp','syntactic.py',250),
  ('exp_comp -> exp_comp GE exp_plusminus','exp_comp',3,'p_exp_comp','syntactic.py',251),
  ('exp_comp -> exp_comp LE exp_plusminus','exp_comp',3,'p_exp_comp','syntactic.py',252),
  ('exp_comp -> exp_comp SLT exp_plusminus','exp_comp',3,'p_exp_comp','syntactic.py',253),
  ('exp_comp -> exp_comp SGT exp_plusminus','exp_comp',3,'p_exp_comp','syntactic.py',254),
  ('exp_comp -> exp_comp SGE exp_plusminus','exp_comp',3,'p_exp_comp','syntactic.py',255),
  ('exp_comp -> exp_comp SLE exp_plusminus','exp_comp',3,'p_exp_comp','syntactic.py',256),
  ('exp_comp -> exp_plusminus','exp_comp',1,'p_exp_comp','syntactic.py',257),
  ('exp_plusminus -> exp_plusminus PLUS exp_times_divides','exp_plusminus',3,'p_exp_plusminus','syntactic.py',280),
  ('exp_plusminus -> exp_plusminus MINUS exp_times_divides','exp_plusminus',3,'p_exp_plusminus','syntactic.py',281),
  ('exp_plusminus -> exp_times_divides','exp_plusminus',1,'p_exp_plusminus','syntactic.py',282),
  ('exp_times_divides -> exp_times_divides TIMES exp_lnot','exp_times_divides',3,'p_exp_times_divides','syntactic.py',293),
  ('exp_times_divides -> exp_times_divides DIVIDE exp_lnot','exp_times_divides',3,'p_exp_times_divides','syntactic.py',294),
  ('exp_times_divides -> exp_times_divides MODULO exp_lnot','exp_times_divides',3,'p_exp_times_divides','syntactic.py',295),
  ('exp_times_divides -> exp_lnot','exp_times_divides',1,'p_exp_times_divides','syntactic.py',296),
  ('exp_lnot -> XOR exp_lnot','exp_lnot',2,'p_exp_lnot','syntactic.py',309),
  ('exp_lnot -> exp_decrement_increment','exp_lnot',1,'p_exp_lnot','syntactic.py',310),
  ('exp_decrement_increment -> INCREMENT ID_SC','exp_decrement_increment',2,'p_exp_decrement_increment','syntactic.py',319),
  ('exp_decrement_increment -> DECREMENT ID_SC','exp_decrement_increment',2,'p_exp_decrement_increment','syntactic.py',320),
  ('exp_decrement_increment -> ID_SC INCREMENT','exp_decrement_increment',2,'p_exp_decrement_increment','syntactic.py',321),
  ('exp_decrement_increment -> ID_SC DECREMENT','exp_decrement_increment',2,'p_exp_decrement_increment','syntactic.py',322),
  ('exp_decrement_increment -> exp_lastlayer','exp_decrement_increment',1,'p_exp_decrement_increment','syntactic.py',323),
  ('exp_lastlayer -> LPAREN exp RPAREN','exp_lastlayer',3,'p_exo_lastlayer','syntactic.py',338),
  ('exp_lastlayer -> ID_SC','exp_lastlayer',1,'p_exo_lastlayer','syntactic.py',339),
  ('exp_lastlayer -> ID_LI','exp_lastlayer',1,'p_exo_lastlayer','syntactic.py',340),
  ('exp_lastlayer -> NUMBER','exp_lastlayer',1,'p_exo_lastlayer','syntactic.py',341),
  ('exp_lastlayer -> call','exp_lastlayer',1,'p_exo_lastlayer','syntactic.py',342),
  ('exp_lastlayer -> TRUE','exp_lastlayer',1,'p_exo_lastlayer','syntactic.py',343),
  ('exp_lastlayer -> FALSE','exp_lastlayer',1,'p_exo_lastlayer','syntactic.py',344),
]

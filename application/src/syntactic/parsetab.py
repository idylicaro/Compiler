
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ANDEQUAL BREAK CMP COLON COMMA CONTINUE DECREMENT DIVEQUAL DIVIDE DO ELSE ELSIF EQ EQUALS EXP FALSE FOR GE GT ID ID_LI ID_SC IF INCREMENT LAND LBRACE LBRACKET LE LNOT LOR LPAREN LSHIFT LSHIFTEQUAL LT MINUS MINUSEQUAL MODEQUAL MODULO NE NO NUMBER OR OREQUAL PERIOD PLUS PLUSEQUAL Q QQ QR QW QX RBRACE RBRACKET RETURN RPAREN RSHIFT RSHIFTEQUAL S SEMICOLON SEQ SGE SGT SLE SLT SNE SUB TERNARY TIMES TIMESEQUAL TR TRUE UNLESS UNTIL WHILE XOR XOREQUALinit : command init\n        | command\n        | function init\n        | function\n         blockcode : command\n        | blockcode command\n     command : interations\n        | if\n        | exp SEMICOLON\n        | RETURN return SEMICOLON\n        | BREAK SEMICOLON\n        | CONTINUE SEMICOLON\n    \n        if : IF LPAREN exp RPAREN if_statement\n    \n        if_statement :  LBRACE blockcode RBRACE\n            | LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE\n            | LBRACE blockcode RBRACE elsif\n    \n        elsif : ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE\n        | ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2\n    \n        elsif2 : elsif\n            | ELSE LBRACE blockcode RBRACE\n    \n       interations :  for\n       | dowhile\n       | while\n     for : FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE for_assignments : exp\n        | exp COMMA for_assignments\n     dowhile :  DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN  while : WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE\n            | WHILE LPAREN exp RPAREN LBRACE RBRACE\n     function : SUB ID LPAREN RPAREN LBRACE blockcode RBRACE\n        | SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE\n     function_assignments : exp\n        | exp COMMA function_assignments\n    \n        call : ID LPAREN RPAREN\n            | ID LPAREN function_assignments RPAREN\n     return : exp  exp : ID_SC EQUALS exp_lor\n        | ID_LI EQUALS exp_lor\n        | ID_SC MINUSEQUAL exp_lor\n        | ID_SC PLUSEQUAL exp_lor\n        | ID_SC MODEQUAL exp_lor\n        | ID_SC DIVEQUAL exp_lor\n        | ID_SC TIMESEQUAL exp_lor\n        | exp_lor\n    \n        exp_lor : exp_lor LOR exp_land\n            | exp_land\n    \n        exp_land : exp_land LAND exp_or\n            | exp_or\n    \n        exp_or : exp_or OR exp_and\n            | exp_and\n    \n        exp_and : exp_and AND exp_comp\n            | exp_comp_eq\n    \n        exp_comp_eq : exp_comp_eq EQ exp_comp\n            | exp_comp_eq NE exp_comp\n            | exp_comp_eq SEQ exp_comp\n            | exp_comp_eq SNE exp_comp\n            | exp_comp_eq CMP exp_comp\n            | exp_comp\n    \n        exp_comp : exp_comp GT exp_plusminus\n            | exp_comp LT exp_plusminus\n            | exp_comp GE exp_plusminus\n            | exp_comp LE exp_plusminus\n            | exp_comp SLT exp_plusminus\n            | exp_comp SGT exp_plusminus\n            | exp_comp SGE exp_plusminus\n            | exp_comp SLE exp_plusminus\n            | exp_plusminus\n    \n        exp_plusminus : exp_plusminus PLUS exp_times_divides\n            | exp_plusminus MINUS exp_times_divides\n            | exp_times_divides\n    \n        exp_times_divides : exp_times_divides TIMES exp_lnot\n            | exp_times_divides DIVIDE exp_lnot\n            | exp_times_divides MODULO exp_lnot\n            | exp_lnot\n    \n    exp_lnot : XOR exp_lnot\n        | exp_decrement_increment\n    \n    exp_decrement_increment : INCREMENT  ID_SC\n        | DECREMENT ID_SC\n        | ID_SC INCREMENT\n        | ID_SC DECREMENT\n        | exp_lastlayer\n    \n        exp_lastlayer : LPAREN exp RPAREN\n        | ID_SC\n        | ID_LI\n        | NUMBER\n        | call\n        | TRUE\n        | FALSE\n    '
    
_lr_action_items = {'RETURN':([0,2,3,4,5,13,14,15,42,45,46,62,90,107,108,139,141,144,145,149,150,151,152,155,156,157,158,159,162,163,165,168,169,171,172,174,175,177,178,179,180,181,182,184,185,186,],[7,7,7,-7,-8,-21,-22,-23,-9,-11,-12,7,-10,7,-5,-6,7,-13,7,7,7,7,7,7,-29,-30,7,-14,-28,-31,-16,-27,7,7,7,7,-15,-24,7,7,-17,-18,-19,7,7,-20,]),'BREAK':([0,2,3,4,5,13,14,15,42,45,46,62,90,107,108,139,141,144,145,149,150,151,152,155,156,157,158,159,162,163,165,168,169,171,172,174,175,177,178,179,180,181,182,184,185,186,],[8,8,8,-7,-8,-21,-22,-23,-9,-11,-12,8,-10,8,-5,-6,8,-13,8,8,8,8,8,8,-29,-30,8,-14,-28,-31,-16,-27,8,8,8,8,-15,-24,8,8,-17,-18,-19,8,8,-20,]),'CONTINUE':([0,2,3,4,5,13,14,15,42,45,46,62,90,107,108,139,141,144,145,149,150,151,152,155,156,157,158,159,162,163,165,168,169,171,172,174,175,177,178,179,180,181,182,184,185,186,],[9,9,9,-7,-8,-21,-22,-23,-9,-11,-12,9,-10,9,-5,-6,9,-13,9,9,9,9,9,9,-29,-30,9,-14,-28,-31,-16,-27,9,9,9,9,-15,-24,9,9,-17,-18,-19,9,9,-20,]),'SUB':([0,2,3,4,5,13,14,15,42,45,46,90,144,156,157,159,162,163,165,168,175,177,180,181,182,186,],[10,10,10,-7,-8,-21,-22,-23,-9,-11,-12,-10,-13,-29,-30,-14,-28,-31,-16,-27,-15,-24,-17,-18,-19,-20,]),'IF':([0,2,3,4,5,13,14,15,42,45,46,62,90,107,108,139,141,144,145,149,150,151,152,155,156,157,158,159,162,163,165,168,169,171,172,174,175,177,178,179,180,181,182,184,185,186,],[16,16,16,-7,-8,-21,-22,-23,-9,-11,-12,16,-10,16,-5,-6,16,-13,16,16,16,16,16,16,-29,-30,16,-14,-28,-31,-16,-27,16,16,16,16,-15,-24,16,16,-17,-18,-19,16,16,-20,]),'ID_SC':([0,2,3,4,5,7,12,13,14,15,31,33,34,42,45,46,48,50,51,52,53,54,55,56,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,90,91,107,108,134,136,137,139,141,144,145,149,150,151,152,153,154,155,156,157,158,159,162,163,165,168,169,170,171,172,174,175,177,178,179,180,181,182,184,185,186,],[17,17,17,-7,-8,17,17,-21,-22,-23,86,88,89,-9,-11,-12,17,17,86,86,86,86,86,86,86,86,17,17,17,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,-10,17,17,-5,17,17,17,-6,17,-13,17,17,17,17,17,17,17,17,-29,-30,17,-14,-28,-31,-16,-27,17,17,17,17,17,-15,-24,17,17,-17,-18,-19,17,17,-20,]),'ID_LI':([0,2,3,4,5,7,12,13,14,15,31,42,45,46,48,50,51,52,53,54,55,56,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,90,91,107,108,134,136,137,139,141,144,145,149,150,151,152,153,154,155,156,157,158,159,162,163,165,168,169,170,171,172,174,175,177,178,179,180,181,182,184,185,186,],[19,19,19,-7,-8,19,19,-21,-22,-23,87,-9,-11,-12,19,19,87,87,87,87,87,87,87,87,19,19,19,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,-10,19,19,-5,19,19,19,-6,19,-13,19,19,19,19,19,19,19,19,-29,-30,19,-14,-28,-31,-16,-27,19,19,19,19,19,-15,-24,19,19,-17,-18,-19,19,19,-20,]),'FOR':([0,2,3,4,5,13,14,15,42,45,46,62,90,107,108,139,141,144,145,149,150,151,152,155,156,157,158,159,162,163,165,168,169,171,172,174,175,177,178,179,180,181,182,184,185,186,],[20,20,20,-7,-8,-21,-22,-23,-9,-11,-12,20,-10,20,-5,-6,20,-13,20,20,20,20,20,20,-29,-30,20,-14,-28,-31,-16,-27,20,20,20,20,-15,-24,20,20,-17,-18,-19,20,20,-20,]),'DO':([0,2,3,4,5,13,14,15,42,45,46,62,90,107,108,139,141,144,145,149,150,151,152,155,156,157,158,159,162,163,165,168,169,171,172,174,175,177,178,179,180,181,182,184,185,186,],[21,21,21,-7,-8,-21,-22,-23,-9,-11,-12,21,-10,21,-5,-6,21,-13,21,21,21,21,21,21,-29,-30,21,-14,-28,-31,-16,-27,21,21,21,21,-15,-24,21,21,-17,-18,-19,21,21,-20,]),'WHILE':([0,2,3,4,5,13,14,15,42,45,46,62,90,107,108,138,139,141,144,145,149,150,151,152,155,156,157,158,159,162,163,165,168,169,171,172,174,175,177,178,179,180,181,182,184,185,186,],[22,22,22,-7,-8,-21,-22,-23,-9,-11,-12,22,-10,22,-5,148,-6,22,-13,22,22,22,22,22,22,-29,-30,22,-14,-28,-31,-16,-27,22,22,22,22,-15,-24,22,22,-17,-18,-19,22,22,-20,]),'XOR':([0,2,3,4,5,7,12,13,14,15,31,42,45,46,48,50,51,52,53,54,55,56,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,90,91,107,108,134,136,137,139,141,144,145,149,150,151,152,153,154,155,156,157,158,159,162,163,165,168,169,170,171,172,174,175,177,178,179,180,181,182,184,185,186,],[31,31,31,-7,-8,31,31,-21,-22,-23,31,-9,-11,-12,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-10,31,31,-5,31,31,31,-6,31,-13,31,31,31,31,31,31,31,31,-29,-30,31,-14,-28,-31,-16,-27,31,31,31,31,31,-15,-24,31,31,-17,-18,-19,31,31,-20,]),'INCREMENT':([0,2,3,4,5,7,12,13,14,15,17,31,42,45,46,48,50,51,52,53,54,55,56,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,90,91,107,108,134,136,137,139,141,144,145,149,150,151,152,153,154,155,156,157,158,159,162,163,165,168,169,170,171,172,174,175,177,178,179,180,181,182,184,185,186,],[33,33,33,-7,-8,33,33,-21,-22,-23,57,33,-9,-11,-12,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,57,-10,33,33,-5,33,33,33,-6,33,-13,33,33,33,33,33,33,33,33,-29,-30,33,-14,-28,-31,-16,-27,33,33,33,33,33,-15,-24,33,33,-17,-18,-19,33,33,-20,]),'DECREMENT':([0,2,3,4,5,7,12,13,14,15,17,31,42,45,46,48,50,51,52,53,54,55,56,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,90,91,107,108,134,136,137,139,141,144,145,149,150,151,152,153,154,155,156,157,158,159,162,163,165,168,169,170,171,172,174,175,177,178,179,180,181,182,184,185,186,],[34,34,34,-7,-8,34,34,-21,-22,-23,58,34,-9,-11,-12,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,58,-10,34,34,-5,34,34,34,-6,34,-13,34,34,34,34,34,34,34,34,-29,-30,34,-14,-28,-31,-16,-27,34,34,34,34,34,-15,-24,34,34,-17,-18,-19,34,34,-20,]),'LPAREN':([0,2,3,4,5,7,11,12,13,14,15,16,20,22,31,42,45,46,47,48,50,51,52,53,54,55,56,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,90,91,107,108,134,136,137,139,141,144,145,148,149,150,151,152,153,154,155,156,157,158,159,162,163,165,166,168,169,170,171,172,174,175,177,178,179,180,181,182,184,185,186,],[12,12,12,-7,-8,12,48,12,-21,-22,-23,50,61,63,12,-9,-11,-12,91,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,-10,12,12,-5,12,12,12,-6,12,-13,12,154,12,12,12,12,12,12,12,-29,-30,12,-14,-28,-31,-16,170,-27,12,12,12,12,12,-15,-24,12,12,-17,-18,-19,12,12,-20,]),'NUMBER':([0,2,3,4,5,7,12,13,14,15,31,42,45,46,48,50,51,52,53,54,55,56,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,90,91,107,108,134,136,137,139,141,144,145,149,150,151,152,153,154,155,156,157,158,159,162,163,165,168,169,170,171,172,174,175,177,178,179,180,181,182,184,185,186,],[36,36,36,-7,-8,36,36,-21,-22,-23,36,-9,-11,-12,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-10,36,36,-5,36,36,36,-6,36,-13,36,36,36,36,36,36,36,36,-29,-30,36,-14,-28,-31,-16,-27,36,36,36,36,36,-15,-24,36,36,-17,-18,-19,36,36,-20,]),'TRUE':([0,2,3,4,5,7,12,13,14,15,31,42,45,46,48,50,51,52,53,54,55,56,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,90,91,107,108,134,136,137,139,141,144,145,149,150,151,152,153,154,155,156,157,158,159,162,163,165,168,169,170,171,172,174,175,177,178,179,180,181,182,184,185,186,],[38,38,38,-7,-8,38,38,-21,-22,-23,38,-9,-11,-12,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,-10,38,38,-5,38,38,38,-6,38,-13,38,38,38,38,38,38,38,38,-29,-30,38,-14,-28,-31,-16,-27,38,38,38,38,38,-15,-24,38,38,-17,-18,-19,38,38,-20,]),'FALSE':([0,2,3,4,5,7,12,13,14,15,31,42,45,46,48,50,51,52,53,54,55,56,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,90,91,107,108,134,136,137,139,141,144,145,149,150,151,152,153,154,155,156,157,158,159,162,163,165,168,169,170,171,172,174,175,177,178,179,180,181,182,184,185,186,],[39,39,39,-7,-8,39,39,-21,-22,-23,39,-9,-11,-12,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,-10,39,39,-5,39,39,39,-6,39,-13,39,39,39,39,39,39,39,39,-29,-30,39,-14,-28,-31,-16,-27,39,39,39,39,39,-15,-24,39,39,-17,-18,-19,39,39,-20,]),'ID':([0,2,3,4,5,7,10,12,13,14,15,31,42,45,46,48,50,51,52,53,54,55,56,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,90,91,107,108,134,136,137,139,141,144,145,149,150,151,152,153,154,155,156,157,158,159,162,163,165,168,169,170,171,172,174,175,177,178,179,180,181,182,184,185,186,],[11,11,11,-7,-8,11,47,11,-21,-22,-23,11,-9,-11,-12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,-10,11,11,-5,11,11,11,-6,11,-13,11,11,11,11,11,11,11,11,-29,-30,11,-14,-28,-31,-16,-27,11,11,11,11,11,-15,-24,11,11,-17,-18,-19,11,11,-20,]),'$end':([1,2,3,4,5,13,14,15,40,41,42,45,46,90,144,156,157,159,162,163,165,168,175,177,180,181,182,186,],[0,-2,-4,-7,-8,-21,-22,-23,-1,-3,-9,-11,-12,-10,-13,-29,-30,-14,-28,-31,-16,-27,-15,-24,-17,-18,-19,-20,]),'RBRACE':([4,5,13,14,15,42,45,46,90,107,108,139,144,149,150,152,155,156,158,159,162,165,168,172,174,175,177,179,180,181,182,185,186,],[-7,-8,-21,-22,-23,-9,-11,-12,-10,138,-5,-6,-13,156,157,159,162,-29,163,-14,-28,-16,-27,175,177,-15,-24,180,-17,-18,-19,186,-20,]),'SEMICOLON':([6,8,9,17,18,19,23,24,25,26,27,28,29,30,32,35,36,37,38,39,43,44,57,58,85,86,87,88,89,92,95,97,98,99,100,101,102,103,104,105,106,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,146,147,],[42,45,46,-83,-44,-84,-46,-48,-50,-58,-52,-67,-70,-74,-76,-81,-85,-86,-87,-88,90,-36,-79,-80,-75,-83,-84,-77,-78,-34,-82,-37,-39,-40,-41,-42,-43,-45,-38,136,-25,-47,-49,-51,-59,-60,-61,-62,-63,-64,-65,-66,-53,-54,-55,-56,-57,-68,-69,-71,-72,-73,-35,153,-26,]),'EQUALS':([17,19,],[51,60,]),'MINUSEQUAL':([17,],[52,]),'PLUSEQUAL':([17,],[53,]),'MODEQUAL':([17,],[54,]),'DIVEQUAL':([17,],[55,]),'TIMESEQUAL':([17,],[56,]),'TIMES':([17,19,29,30,32,35,36,37,38,39,57,58,85,86,87,88,89,92,95,126,127,128,129,130,133,],[-83,-84,82,-74,-76,-81,-85,-86,-87,-88,-79,-80,-75,-83,-84,-77,-78,-34,-82,82,82,-71,-72,-73,-35,]),'DIVIDE':([17,19,29,30,32,35,36,37,38,39,57,58,85,86,87,88,89,92,95,126,127,128,129,130,133,],[-83,-84,83,-74,-76,-81,-85,-86,-87,-88,-79,-80,-75,-83,-84,-77,-78,-34,-82,83,83,-71,-72,-73,-35,]),'MODULO':([17,19,29,30,32,35,36,37,38,39,57,58,85,86,87,88,89,92,95,126,127,128,129,130,133,],[-83,-84,84,-74,-76,-81,-85,-86,-87,-88,-79,-80,-75,-83,-84,-77,-78,-34,-82,84,84,-71,-72,-73,-35,]),'PLUS':([17,19,28,29,30,32,35,36,37,38,39,57,58,85,86,87,88,89,92,95,113,114,115,116,117,118,119,120,126,127,128,129,130,133,],[-83,-84,80,-70,-74,-76,-81,-85,-86,-87,-88,-79,-80,-75,-83,-84,-77,-78,-34,-82,80,80,80,80,80,80,80,80,-68,-69,-71,-72,-73,-35,]),'MINUS':([17,19,28,29,30,32,35,36,37,38,39,57,58,85,86,87,88,89,92,95,113,114,115,116,117,118,119,120,126,127,128,129,130,133,],[-83,-84,81,-70,-74,-76,-81,-85,-86,-87,-88,-79,-80,-75,-83,-84,-77,-78,-34,-82,81,81,81,81,81,81,81,81,-68,-69,-71,-72,-73,-35,]),'GT':([17,19,26,28,29,30,32,35,36,37,38,39,57,58,85,86,87,88,89,92,95,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,],[-83,-84,67,-67,-70,-74,-76,-81,-85,-86,-87,-88,-79,-80,-75,-83,-84,-77,-78,-34,-82,67,-59,-60,-61,-62,-63,-64,-65,-66,67,67,67,67,67,-68,-69,-71,-72,-73,-35,]),'LT':([17,19,26,28,29,30,32,35,36,37,38,39,57,58,85,86,87,88,89,92,95,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,],[-83,-84,68,-67,-70,-74,-76,-81,-85,-86,-87,-88,-79,-80,-75,-83,-84,-77,-78,-34,-82,68,-59,-60,-61,-62,-63,-64,-65,-66,68,68,68,68,68,-68,-69,-71,-72,-73,-35,]),'GE':([17,19,26,28,29,30,32,35,36,37,38,39,57,58,85,86,87,88,89,92,95,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,],[-83,-84,69,-67,-70,-74,-76,-81,-85,-86,-87,-88,-79,-80,-75,-83,-84,-77,-78,-34,-82,69,-59,-60,-61,-62,-63,-64,-65,-66,69,69,69,69,69,-68,-69,-71,-72,-73,-35,]),'LE':([17,19,26,28,29,30,32,35,36,37,38,39,57,58,85,86,87,88,89,92,95,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,],[-83,-84,70,-67,-70,-74,-76,-81,-85,-86,-87,-88,-79,-80,-75,-83,-84,-77,-78,-34,-82,70,-59,-60,-61,-62,-63,-64,-65,-66,70,70,70,70,70,-68,-69,-71,-72,-73,-35,]),'SLT':([17,19,26,28,29,30,32,35,36,37,38,39,57,58,85,86,87,88,89,92,95,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,],[-83,-84,71,-67,-70,-74,-76,-81,-85,-86,-87,-88,-79,-80,-75,-83,-84,-77,-78,-34,-82,71,-59,-60,-61,-62,-63,-64,-65,-66,71,71,71,71,71,-68,-69,-71,-72,-73,-35,]),'SGT':([17,19,26,28,29,30,32,35,36,37,38,39,57,58,85,86,87,88,89,92,95,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,],[-83,-84,72,-67,-70,-74,-76,-81,-85,-86,-87,-88,-79,-80,-75,-83,-84,-77,-78,-34,-82,72,-59,-60,-61,-62,-63,-64,-65,-66,72,72,72,72,72,-68,-69,-71,-72,-73,-35,]),'SGE':([17,19,26,28,29,30,32,35,36,37,38,39,57,58,85,86,87,88,89,92,95,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,],[-83,-84,73,-67,-70,-74,-76,-81,-85,-86,-87,-88,-79,-80,-75,-83,-84,-77,-78,-34,-82,73,-59,-60,-61,-62,-63,-64,-65,-66,73,73,73,73,73,-68,-69,-71,-72,-73,-35,]),'SLE':([17,19,26,28,29,30,32,35,36,37,38,39,57,58,85,86,87,88,89,92,95,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,],[-83,-84,74,-67,-70,-74,-76,-81,-85,-86,-87,-88,-79,-80,-75,-83,-84,-77,-78,-34,-82,74,-59,-60,-61,-62,-63,-64,-65,-66,74,74,74,74,74,-68,-69,-71,-72,-73,-35,]),'EQ':([17,19,26,27,28,29,30,32,35,36,37,38,39,57,58,85,86,87,88,89,92,95,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,],[-83,-84,-58,75,-67,-70,-74,-76,-81,-85,-86,-87,-88,-79,-80,-75,-83,-84,-77,-78,-34,-82,-59,-60,-61,-62,-63,-64,-65,-66,-53,-54,-55,-56,-57,-68,-69,-71,-72,-73,-35,]),'NE':([17,19,26,27,28,29,30,32,35,36,37,38,39,57,58,85,86,87,88,89,92,95,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,],[-83,-84,-58,76,-67,-70,-74,-76,-81,-85,-86,-87,-88,-79,-80,-75,-83,-84,-77,-78,-34,-82,-59,-60,-61,-62,-63,-64,-65,-66,-53,-54,-55,-56,-57,-68,-69,-71,-72,-73,-35,]),'SEQ':([17,19,26,27,28,29,30,32,35,36,37,38,39,57,58,85,86,87,88,89,92,95,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,],[-83,-84,-58,77,-67,-70,-74,-76,-81,-85,-86,-87,-88,-79,-80,-75,-83,-84,-77,-78,-34,-82,-59,-60,-61,-62,-63,-64,-65,-66,-53,-54,-55,-56,-57,-68,-69,-71,-72,-73,-35,]),'SNE':([17,19,26,27,28,29,30,32,35,36,37,38,39,57,58,85,86,87,88,89,92,95,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,],[-83,-84,-58,78,-67,-70,-74,-76,-81,-85,-86,-87,-88,-79,-80,-75,-83,-84,-77,-78,-34,-82,-59,-60,-61,-62,-63,-64,-65,-66,-53,-54,-55,-56,-57,-68,-69,-71,-72,-73,-35,]),'CMP':([17,19,26,27,28,29,30,32,35,36,37,38,39,57,58,85,86,87,88,89,92,95,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,],[-83,-84,-58,79,-67,-70,-74,-76,-81,-85,-86,-87,-88,-79,-80,-75,-83,-84,-77,-78,-34,-82,-59,-60,-61,-62,-63,-64,-65,-66,-53,-54,-55,-56,-57,-68,-69,-71,-72,-73,-35,]),'AND':([17,19,25,26,27,28,29,30,32,35,36,37,38,39,57,58,85,86,87,88,89,92,95,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,],[-83,-84,66,-58,-52,-67,-70,-74,-76,-81,-85,-86,-87,-88,-79,-80,-75,-83,-84,-77,-78,-34,-82,66,-51,-59,-60,-61,-62,-63,-64,-65,-66,-53,-54,-55,-56,-57,-68,-69,-71,-72,-73,-35,]),'OR':([17,19,24,25,26,27,28,29,30,32,35,36,37,38,39,57,58,85,86,87,88,89,92,95,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,],[-83,-84,65,-50,-58,-52,-67,-70,-74,-76,-81,-85,-86,-87,-88,-79,-80,-75,-83,-84,-77,-78,-34,-82,65,-49,-51,-59,-60,-61,-62,-63,-64,-65,-66,-53,-54,-55,-56,-57,-68,-69,-71,-72,-73,-35,]),'LAND':([17,19,23,24,25,26,27,28,29,30,32,35,36,37,38,39,57,58,85,86,87,88,89,92,95,103,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,],[-83,-84,64,-48,-50,-58,-52,-67,-70,-74,-76,-81,-85,-86,-87,-88,-79,-80,-75,-83,-84,-77,-78,-34,-82,64,-47,-49,-51,-59,-60,-61,-62,-63,-64,-65,-66,-53,-54,-55,-56,-57,-68,-69,-71,-72,-73,-35,]),'LOR':([17,18,19,23,24,25,26,27,28,29,30,32,35,36,37,38,39,57,58,85,86,87,88,89,92,95,97,98,99,100,101,102,103,104,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,],[-83,59,-84,-46,-48,-50,-58,-52,-67,-70,-74,-76,-81,-85,-86,-87,-88,-79,-80,-75,-83,-84,-77,-78,-34,-82,59,59,59,59,59,59,-45,59,-47,-49,-51,-59,-60,-61,-62,-63,-64,-65,-66,-53,-54,-55,-56,-57,-68,-69,-71,-72,-73,-35,]),'RPAREN':([17,18,19,23,24,25,26,27,28,29,30,32,35,36,37,38,39,48,49,57,58,85,86,87,88,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,106,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,132,133,143,147,160,161,173,],[-83,-44,-84,-46,-48,-50,-58,-52,-67,-70,-74,-76,-81,-85,-86,-87,-88,92,95,-79,-80,-75,-83,-84,-77,-78,131,-34,133,-32,-82,135,-37,-39,-40,-41,-42,-43,-45,-38,-25,140,-47,-49,-51,-59,-60,-61,-62,-63,-64,-65,-66,-53,-54,-55,-56,-57,-68,-69,-71,-72,-73,142,-35,-33,-26,167,168,176,]),'COMMA':([17,18,19,23,24,25,26,27,28,29,30,32,35,36,37,38,39,57,58,85,86,87,88,89,92,94,95,97,98,99,100,101,102,103,104,106,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,],[-83,-44,-84,-46,-48,-50,-58,-52,-67,-70,-74,-76,-81,-85,-86,-87,-88,-79,-80,-75,-83,-84,-77,-78,-34,134,-82,-37,-39,-40,-41,-42,-43,-45,-38,137,-47,-49,-51,-59,-60,-61,-62,-63,-64,-65,-66,-53,-54,-55,-56,-57,-68,-69,-71,-72,-73,-35,]),'LBRACE':([21,131,135,140,142,164,167,176,183,],[62,141,145,149,151,169,171,178,184,]),'ELSE':([159,180,],[164,183,]),'ELSIF':([159,180,],[166,166,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,2,3,],[1,40,41,]),'command':([0,2,3,62,107,141,145,149,150,151,152,155,158,169,171,172,174,178,179,184,185,],[2,2,2,108,139,108,108,108,139,108,139,139,139,108,108,139,139,108,139,108,139,]),'function':([0,2,3,],[3,3,3,]),'interations':([0,2,3,62,107,141,145,149,150,151,152,155,158,169,171,172,174,178,179,184,185,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'if':([0,2,3,62,107,141,145,149,150,151,152,155,158,169,171,172,174,178,179,184,185,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'exp':([0,2,3,7,12,48,50,61,62,63,91,107,134,136,137,141,145,149,150,151,152,153,154,155,158,169,170,171,172,174,178,179,184,185,],[6,6,6,44,49,94,96,106,6,109,94,6,94,146,106,6,6,6,6,6,6,106,161,6,6,6,173,6,6,6,6,6,6,6,]),'for':([0,2,3,62,107,141,145,149,150,151,152,155,158,169,171,172,174,178,179,184,185,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'dowhile':([0,2,3,62,107,141,145,149,150,151,152,155,158,169,171,172,174,178,179,184,185,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'while':([0,2,3,62,107,141,145,149,150,151,152,155,158,169,171,172,174,178,179,184,185,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'exp_lor':([0,2,3,7,12,48,50,51,52,53,54,55,56,60,61,62,63,91,107,134,136,137,141,145,149,150,151,152,153,154,155,158,169,170,171,172,174,178,179,184,185,],[18,18,18,18,18,18,18,97,98,99,100,101,102,104,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'exp_land':([0,2,3,7,12,48,50,51,52,53,54,55,56,59,60,61,62,63,91,107,134,136,137,141,145,149,150,151,152,153,154,155,158,169,170,171,172,174,178,179,184,185,],[23,23,23,23,23,23,23,23,23,23,23,23,23,103,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'exp_or':([0,2,3,7,12,48,50,51,52,53,54,55,56,59,60,61,62,63,64,91,107,134,136,137,141,145,149,150,151,152,153,154,155,158,169,170,171,172,174,178,179,184,185,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,110,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'exp_and':([0,2,3,7,12,48,50,51,52,53,54,55,56,59,60,61,62,63,64,65,91,107,134,136,137,141,145,149,150,151,152,153,154,155,158,169,170,171,172,174,178,179,184,185,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,111,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'exp_comp':([0,2,3,7,12,48,50,51,52,53,54,55,56,59,60,61,62,63,64,65,66,75,76,77,78,79,91,107,134,136,137,141,145,149,150,151,152,153,154,155,158,169,170,171,172,174,178,179,184,185,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,112,121,122,123,124,125,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'exp_comp_eq':([0,2,3,7,12,48,50,51,52,53,54,55,56,59,60,61,62,63,64,65,91,107,134,136,137,141,145,149,150,151,152,153,154,155,158,169,170,171,172,174,178,179,184,185,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'exp_plusminus':([0,2,3,7,12,48,50,51,52,53,54,55,56,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,91,107,134,136,137,141,145,149,150,151,152,153,154,155,158,169,170,171,172,174,178,179,184,185,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,113,114,115,116,117,118,119,120,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'exp_times_divides':([0,2,3,7,12,48,50,51,52,53,54,55,56,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,91,107,134,136,137,141,145,149,150,151,152,153,154,155,158,169,170,171,172,174,178,179,184,185,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,126,127,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'exp_lnot':([0,2,3,7,12,31,48,50,51,52,53,54,55,56,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,91,107,134,136,137,141,145,149,150,151,152,153,154,155,158,169,170,171,172,174,178,179,184,185,],[30,30,30,30,30,85,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,128,129,130,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'exp_decrement_increment':([0,2,3,7,12,31,48,50,51,52,53,54,55,56,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,91,107,134,136,137,141,145,149,150,151,152,153,154,155,158,169,170,171,172,174,178,179,184,185,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'exp_lastlayer':([0,2,3,7,12,31,48,50,51,52,53,54,55,56,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,91,107,134,136,137,141,145,149,150,151,152,153,154,155,158,169,170,171,172,174,178,179,184,185,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'call':([0,2,3,7,12,31,48,50,51,52,53,54,55,56,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,91,107,134,136,137,141,145,149,150,151,152,153,154,155,158,169,170,171,172,174,178,179,184,185,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'return':([7,],[43,]),'function_assignments':([48,91,134,],[93,132,143,]),'for_assignments':([61,137,153,],[105,147,160,]),'blockcode':([62,141,145,149,151,169,171,178,184,],[107,150,152,155,158,172,174,179,185,]),'if_statement':([135,],[144,]),'elsif':([159,180,],[165,182,]),'elsif2':([180,],[181,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> command init','init',2,'p_init','syntactic.py',7),
  ('init -> command','init',1,'p_init','syntactic.py',8),
  ('init -> function init','init',2,'p_init','syntactic.py',9),
  ('init -> function','init',1,'p_init','syntactic.py',10),
  ('blockcode -> command','blockcode',1,'p_blockcode','syntactic.py',15),
  ('blockcode -> blockcode command','blockcode',2,'p_blockcode','syntactic.py',16),
  ('command -> interations','command',1,'p_command','syntactic.py',21),
  ('command -> if','command',1,'p_command','syntactic.py',22),
  ('command -> exp SEMICOLON','command',2,'p_command','syntactic.py',23),
  ('command -> RETURN return SEMICOLON','command',3,'p_command','syntactic.py',24),
  ('command -> BREAK SEMICOLON','command',2,'p_command','syntactic.py',25),
  ('command -> CONTINUE SEMICOLON','command',2,'p_command','syntactic.py',26),
  ('if -> IF LPAREN exp RPAREN if_statement','if',5,'p_if','syntactic.py',32),
  ('if_statement -> LBRACE blockcode RBRACE','if_statement',3,'p_if_statement','syntactic.py',39),
  ('if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE','if_statement',7,'p_if_statement','syntactic.py',40),
  ('if_statement -> LBRACE blockcode RBRACE elsif','if_statement',4,'p_if_statement','syntactic.py',41),
  ('elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE','elsif',7,'p_elsif','syntactic.py',47),
  ('elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2','elsif',8,'p_elsif','syntactic.py',48),
  ('elsif2 -> elsif','elsif2',1,'p_elsif2','syntactic.py',54),
  ('elsif2 -> ELSE LBRACE blockcode RBRACE','elsif2',4,'p_elsif2','syntactic.py',55),
  ('interations -> for','interations',1,'p_interations','syntactic.py',61),
  ('interations -> dowhile','interations',1,'p_interations','syntactic.py',62),
  ('interations -> while','interations',1,'p_interations','syntactic.py',63),
  ('for -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE','for',11,'p_for','syntactic.py',68),
  ('for_assignments -> exp','for_assignments',1,'p_for_assignments','syntactic.py',72),
  ('for_assignments -> exp COMMA for_assignments','for_assignments',3,'p_for_assignments','syntactic.py',73),
  ('dowhile -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN','dowhile',8,'p_dowhile','syntactic.py',78),
  ('while -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE','while',7,'p_while','syntactic.py',82),
  ('while -> WHILE LPAREN exp RPAREN LBRACE RBRACE','while',6,'p_while','syntactic.py',83),
  ('function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE','function',7,'p_function','syntactic.py',88),
  ('function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE','function',8,'p_function','syntactic.py',89),
  ('function_assignments -> exp','function_assignments',1,'p_function_assignments','syntactic.py',94),
  ('function_assignments -> exp COMMA function_assignments','function_assignments',3,'p_function_assignments','syntactic.py',95),
  ('call -> ID LPAREN RPAREN','call',3,'p_call','syntactic.py',101),
  ('call -> ID LPAREN function_assignments RPAREN','call',4,'p_call','syntactic.py',102),
  ('return -> exp','return',1,'p_return','syntactic.py',107),
  ('exp -> ID_SC EQUALS exp_lor','exp',3,'p_exp','syntactic.py',111),
  ('exp -> ID_LI EQUALS exp_lor','exp',3,'p_exp','syntactic.py',112),
  ('exp -> ID_SC MINUSEQUAL exp_lor','exp',3,'p_exp','syntactic.py',113),
  ('exp -> ID_SC PLUSEQUAL exp_lor','exp',3,'p_exp','syntactic.py',114),
  ('exp -> ID_SC MODEQUAL exp_lor','exp',3,'p_exp','syntactic.py',115),
  ('exp -> ID_SC DIVEQUAL exp_lor','exp',3,'p_exp','syntactic.py',116),
  ('exp -> ID_SC TIMESEQUAL exp_lor','exp',3,'p_exp','syntactic.py',117),
  ('exp -> exp_lor','exp',1,'p_exp','syntactic.py',118),
  ('exp_lor -> exp_lor LOR exp_land','exp_lor',3,'p_exp_lor','syntactic.py',124),
  ('exp_lor -> exp_land','exp_lor',1,'p_exp_lor','syntactic.py',125),
  ('exp_land -> exp_land LAND exp_or','exp_land',3,'p_exp_land','syntactic.py',130),
  ('exp_land -> exp_or','exp_land',1,'p_exp_land','syntactic.py',131),
  ('exp_or -> exp_or OR exp_and','exp_or',3,'p_exp_or','syntactic.py',136),
  ('exp_or -> exp_and','exp_or',1,'p_exp_or','syntactic.py',137),
  ('exp_and -> exp_and AND exp_comp','exp_and',3,'p_exp_and','syntactic.py',142),
  ('exp_and -> exp_comp_eq','exp_and',1,'p_exp_and','syntactic.py',143),
  ('exp_comp_eq -> exp_comp_eq EQ exp_comp','exp_comp_eq',3,'p_exp_comp_eq','syntactic.py',148),
  ('exp_comp_eq -> exp_comp_eq NE exp_comp','exp_comp_eq',3,'p_exp_comp_eq','syntactic.py',149),
  ('exp_comp_eq -> exp_comp_eq SEQ exp_comp','exp_comp_eq',3,'p_exp_comp_eq','syntactic.py',150),
  ('exp_comp_eq -> exp_comp_eq SNE exp_comp','exp_comp_eq',3,'p_exp_comp_eq','syntactic.py',151),
  ('exp_comp_eq -> exp_comp_eq CMP exp_comp','exp_comp_eq',3,'p_exp_comp_eq','syntactic.py',152),
  ('exp_comp_eq -> exp_comp','exp_comp_eq',1,'p_exp_comp_eq','syntactic.py',153),
  ('exp_comp -> exp_comp GT exp_plusminus','exp_comp',3,'p_exp_comp','syntactic.py',158),
  ('exp_comp -> exp_comp LT exp_plusminus','exp_comp',3,'p_exp_comp','syntactic.py',159),
  ('exp_comp -> exp_comp GE exp_plusminus','exp_comp',3,'p_exp_comp','syntactic.py',160),
  ('exp_comp -> exp_comp LE exp_plusminus','exp_comp',3,'p_exp_comp','syntactic.py',161),
  ('exp_comp -> exp_comp SLT exp_plusminus','exp_comp',3,'p_exp_comp','syntactic.py',162),
  ('exp_comp -> exp_comp SGT exp_plusminus','exp_comp',3,'p_exp_comp','syntactic.py',163),
  ('exp_comp -> exp_comp SGE exp_plusminus','exp_comp',3,'p_exp_comp','syntactic.py',164),
  ('exp_comp -> exp_comp SLE exp_plusminus','exp_comp',3,'p_exp_comp','syntactic.py',165),
  ('exp_comp -> exp_plusminus','exp_comp',1,'p_exp_comp','syntactic.py',166),
  ('exp_plusminus -> exp_plusminus PLUS exp_times_divides','exp_plusminus',3,'p_exp_plusminus','syntactic.py',172),
  ('exp_plusminus -> exp_plusminus MINUS exp_times_divides','exp_plusminus',3,'p_exp_plusminus','syntactic.py',173),
  ('exp_plusminus -> exp_times_divides','exp_plusminus',1,'p_exp_plusminus','syntactic.py',174),
  ('exp_times_divides -> exp_times_divides TIMES exp_lnot','exp_times_divides',3,'p_exp_times_divides','syntactic.py',180),
  ('exp_times_divides -> exp_times_divides DIVIDE exp_lnot','exp_times_divides',3,'p_exp_times_divides','syntactic.py',181),
  ('exp_times_divides -> exp_times_divides MODULO exp_lnot','exp_times_divides',3,'p_exp_times_divides','syntactic.py',182),
  ('exp_times_divides -> exp_lnot','exp_times_divides',1,'p_exp_times_divides','syntactic.py',183),
  ('exp_lnot -> XOR exp_lnot','exp_lnot',2,'p_exp_lnot','syntactic.py',189),
  ('exp_lnot -> exp_decrement_increment','exp_lnot',1,'p_exp_lnot','syntactic.py',190),
  ('exp_decrement_increment -> INCREMENT ID_SC','exp_decrement_increment',2,'p_exp_decrement_increment','syntactic.py',196),
  ('exp_decrement_increment -> DECREMENT ID_SC','exp_decrement_increment',2,'p_exp_decrement_increment','syntactic.py',197),
  ('exp_decrement_increment -> ID_SC INCREMENT','exp_decrement_increment',2,'p_exp_decrement_increment','syntactic.py',198),
  ('exp_decrement_increment -> ID_SC DECREMENT','exp_decrement_increment',2,'p_exp_decrement_increment','syntactic.py',199),
  ('exp_decrement_increment -> exp_lastlayer','exp_decrement_increment',1,'p_exp_decrement_increment','syntactic.py',200),
  ('exp_lastlayer -> LPAREN exp RPAREN','exp_lastlayer',3,'p_exo_lastlayer','syntactic.py',205),
  ('exp_lastlayer -> ID_SC','exp_lastlayer',1,'p_exo_lastlayer','syntactic.py',206),
  ('exp_lastlayer -> ID_LI','exp_lastlayer',1,'p_exo_lastlayer','syntactic.py',207),
  ('exp_lastlayer -> NUMBER','exp_lastlayer',1,'p_exo_lastlayer','syntactic.py',208),
  ('exp_lastlayer -> call','exp_lastlayer',1,'p_exo_lastlayer','syntactic.py',209),
  ('exp_lastlayer -> TRUE','exp_lastlayer',1,'p_exo_lastlayer','syntactic.py',210),
  ('exp_lastlayer -> FALSE','exp_lastlayer',1,'p_exo_lastlayer','syntactic.py',211),
]

Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ANDEQUAL
    COLON
    EXP
    LBRACKET
    LNOT
    LSHIFT
    LSHIFTEQUAL
    NO
    OREQUAL
    PERIOD
    Q
    QQ
    QR
    QW
    QX
    RBRACKET
    RSHIFT
    RSHIFTEQUAL
    S
    TERNARY
    TR
    UNLESS
    UNTIL
    XOREQUAL

Grammar

Rule 0     S' -> init
Rule 1     init -> command init
Rule 2     init -> command
Rule 3     init -> function init
Rule 4     init -> function
Rule 5     blockcode -> command
Rule 6     blockcode -> blockcode command
Rule 7     command -> interations
Rule 8     command -> IF LPAREN exp RPAREN if_statement
Rule 9     command -> exp SEMICOLON
Rule 10    command -> RETURN exp SEMICOLON
Rule 11    command -> BREAK SEMICOLON
Rule 12    command -> CONTINUE SEMICOLON
Rule 13    if_statement -> LBRACE blockcode RBRACE
Rule 14    if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE
Rule 15    if_statement -> LBRACE blockcode RBRACE elsif
Rule 16    elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE
Rule 17    elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2
Rule 18    elsif2 -> elsif
Rule 19    elsif2 -> ELSE LBRACE blockcode RBRACE
Rule 20    interations -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
Rule 21    interations -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN
Rule 22    interations -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE
Rule 23    interations -> WHILE LPAREN exp RPAREN LBRACE RBRACE
Rule 24    for_assignments -> exp
Rule 25    for_assignments -> exp COMMA for_assignments
Rule 26    function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE
Rule 27    function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE
Rule 28    function_assignments -> exp
Rule 29    function_assignments -> exp COMMA function_assignments
Rule 30    call -> ID LPAREN RPAREN
Rule 31    call -> ID LPAREN function_assignments RPAREN
Rule 32    exp -> ID_SC EQUALS exp_lor
Rule 33    exp -> ID_LI EQUALS exp_lor
Rule 34    exp -> ID_SC MINUSEQUAL exp_lor
Rule 35    exp -> ID_SC PLUSEQUAL exp_lor
Rule 36    exp -> ID_SC MODEQUAL exp_lor
Rule 37    exp -> ID_SC DIVEQUAL exp_lor
Rule 38    exp -> ID_SC TIMESEQUAL exp_lor
Rule 39    exp -> exp_lor
Rule 40    exp_lor -> exp_lor LOR exp_land
Rule 41    exp_lor -> exp_land
Rule 42    exp_land -> exp_land LAND exp_or
Rule 43    exp_land -> exp_or
Rule 44    exp_or -> exp_or OR exp_and
Rule 45    exp_or -> exp_and
Rule 46    exp_and -> exp_and AND exp_comp
Rule 47    exp_and -> exp_comp_eq
Rule 48    exp_comp_eq -> exp_comp_eq EQ exp_comp
Rule 49    exp_comp_eq -> exp_comp_eq NE exp_comp
Rule 50    exp_comp_eq -> exp_comp_eq SEQ exp_comp
Rule 51    exp_comp_eq -> exp_comp_eq SNE exp_comp
Rule 52    exp_comp_eq -> exp_comp_eq CMP exp_comp
Rule 53    exp_comp_eq -> exp_comp
Rule 54    exp_comp -> exp_comp GT exp_plusminus
Rule 55    exp_comp -> exp_comp LT exp_plusminus
Rule 56    exp_comp -> exp_comp GE exp_plusminus
Rule 57    exp_comp -> exp_comp LE exp_plusminus
Rule 58    exp_comp -> exp_comp SLT exp_plusminus
Rule 59    exp_comp -> exp_comp SGT exp_plusminus
Rule 60    exp_comp -> exp_comp SGE exp_plusminus
Rule 61    exp_comp -> exp_comp SLE exp_plusminus
Rule 62    exp_comp -> exp_plusminus
Rule 63    exp_plusminus -> exp_plusminus PLUS exp_times_divides
Rule 64    exp_plusminus -> exp_plusminus MINUS exp_times_divides
Rule 65    exp_plusminus -> exp_times_divides
Rule 66    exp_times_divides -> exp_times_divides TIMES exp_lnot
Rule 67    exp_times_divides -> exp_times_divides DIVIDE exp_lnot
Rule 68    exp_times_divides -> exp_times_divides MODULO exp_lnot
Rule 69    exp_times_divides -> exp_lnot
Rule 70    exp_lnot -> XOR exp_lnot
Rule 71    exp_lnot -> exp_decrement_increment
Rule 72    exp_decrement_increment -> INCREMENT ID_SC
Rule 73    exp_decrement_increment -> DECREMENT ID_SC
Rule 74    exp_decrement_increment -> ID_SC INCREMENT
Rule 75    exp_decrement_increment -> ID_SC DECREMENT
Rule 76    exp_decrement_increment -> exp_lastlayer
Rule 77    exp_lastlayer -> LPAREN exp RPAREN
Rule 78    exp_lastlayer -> ID_SC
Rule 79    exp_lastlayer -> ID_LI
Rule 80    exp_lastlayer -> NUMBER
Rule 81    exp_lastlayer -> call
Rule 82    exp_lastlayer -> TRUE
Rule 83    exp_lastlayer -> FALSE

Terminals, with rules where they appear

AND                  : 46
ANDEQUAL             : 
BREAK                : 11
CMP                  : 52
COLON                : 
COMMA                : 25 29
CONTINUE             : 12
DECREMENT            : 73 75
DIVEQUAL             : 37
DIVIDE               : 67
DO                   : 21
ELSE                 : 14 19
ELSIF                : 16 17
EQ                   : 48
EQUALS               : 32 33
EXP                  : 
FALSE                : 83
FOR                  : 20
GE                   : 56
GT                   : 54
ID                   : 26 27 30 31
ID_LI                : 33 79
ID_SC                : 32 34 35 36 37 38 72 73 74 75 78
IF                   : 8
INCREMENT            : 72 74
LAND                 : 42
LBRACE               : 13 14 14 15 16 17 19 20 21 22 23 26 27
LBRACKET             : 
LE                   : 57
LNOT                 : 
LOR                  : 40
LPAREN               : 8 16 17 20 21 22 23 26 27 30 31 77
LSHIFT               : 
LSHIFTEQUAL          : 
LT                   : 55
MINUS                : 64
MINUSEQUAL           : 34
MODEQUAL             : 36
MODULO               : 68
NE                   : 49
NO                   : 
NUMBER               : 80
OR                   : 44
OREQUAL              : 
PERIOD               : 
PLUS                 : 63
PLUSEQUAL            : 35
Q                    : 
QQ                   : 
QR                   : 
QW                   : 
QX                   : 
RBRACE               : 13 14 14 15 16 17 19 20 21 22 23 26 27
RBRACKET             : 
RETURN               : 10
RPAREN               : 8 16 17 20 21 22 23 26 27 30 31 77
RSHIFT               : 
RSHIFTEQUAL          : 
S                    : 
SEMICOLON            : 9 10 11 12 20 20
SEQ                  : 50
SGE                  : 60
SGT                  : 59
SLE                  : 61
SLT                  : 58
SNE                  : 51
SUB                  : 26 27
TERNARY              : 
TIMES                : 66
TIMESEQUAL           : 38
TR                   : 
TRUE                 : 82
UNLESS               : 
UNTIL                : 
WHILE                : 21 22 23
XOR                  : 70
XOREQUAL             : 
error                : 

Nonterminals, with rules where they appear

blockcode            : 6 13 14 14 15 16 17 19 20 21 22 26 27
call                 : 81
command              : 1 2 5 6
elsif                : 15 18
elsif2               : 17
exp                  : 8 9 10 16 17 20 21 22 23 24 25 28 29 77
exp_and              : 44 45 46
exp_comp             : 46 48 49 50 51 52 53 54 55 56 57 58 59 60 61
exp_comp_eq          : 47 48 49 50 51 52
exp_decrement_increment : 71
exp_land             : 40 41 42
exp_lastlayer        : 76
exp_lnot             : 66 67 68 69 70
exp_lor              : 32 33 34 35 36 37 38 39 40
exp_or               : 42 43 44
exp_plusminus        : 54 55 56 57 58 59 60 61 62 63 64
exp_times_divides    : 63 64 65 66 67 68
for_assignments      : 20 20 25
function             : 3 4
function_assignments : 27 29 31
if_statement         : 8
init                 : 1 3 0
interations          : 7

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . command init
    (2) init -> . command
    (3) init -> . function init
    (4) init -> . function
    (7) command -> . interations
    (8) command -> . IF LPAREN exp RPAREN if_statement
    (9) command -> . exp SEMICOLON
    (10) command -> . RETURN exp SEMICOLON
    (11) command -> . BREAK SEMICOLON
    (12) command -> . CONTINUE SEMICOLON
    (26) function -> . SUB ID LPAREN RPAREN LBRACE blockcode RBRACE
    (27) function -> . SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE
    (20) interations -> . FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (21) interations -> . DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN
    (22) interations -> . WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE
    (23) interations -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (32) exp -> . ID_SC EQUALS exp_lor
    (33) exp -> . ID_LI EQUALS exp_lor
    (34) exp -> . ID_SC MINUSEQUAL exp_lor
    (35) exp -> . ID_SC PLUSEQUAL exp_lor
    (36) exp -> . ID_SC MODEQUAL exp_lor
    (37) exp -> . ID_SC DIVEQUAL exp_lor
    (38) exp -> . ID_SC TIMESEQUAL exp_lor
    (39) exp -> . exp_lor
    (40) exp_lor -> . exp_lor LOR exp_land
    (41) exp_lor -> . exp_land
    (42) exp_land -> . exp_land LAND exp_or
    (43) exp_land -> . exp_or
    (44) exp_or -> . exp_or OR exp_and
    (45) exp_or -> . exp_and
    (46) exp_and -> . exp_and AND exp_comp
    (47) exp_and -> . exp_comp_eq
    (48) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (49) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (50) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (51) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (52) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (53) exp_comp_eq -> . exp_comp
    (54) exp_comp -> . exp_comp GT exp_plusminus
    (55) exp_comp -> . exp_comp LT exp_plusminus
    (56) exp_comp -> . exp_comp GE exp_plusminus
    (57) exp_comp -> . exp_comp LE exp_plusminus
    (58) exp_comp -> . exp_comp SLT exp_plusminus
    (59) exp_comp -> . exp_comp SGT exp_plusminus
    (60) exp_comp -> . exp_comp SGE exp_plusminus
    (61) exp_comp -> . exp_comp SLE exp_plusminus
    (62) exp_comp -> . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    IF              shift and go to state 5
    RETURN          shift and go to state 8
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    SUB             shift and go to state 11
    FOR             shift and go to state 13
    DO              shift and go to state 14
    WHILE           shift and go to state 15
    ID_SC           shift and go to state 16
    ID_LI           shift and go to state 18
    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    init                           shift and go to state 1
    command                        shift and go to state 2
    function                       shift and go to state 3
    interations                    shift and go to state 4
    exp                            shift and go to state 7
    exp_lor                        shift and go to state 17
    exp_land                       shift and go to state 19
    exp_or                         shift and go to state 20
    exp_and                        shift and go to state 21
    exp_comp                       shift and go to state 22
    exp_comp_eq                    shift and go to state 23
    exp_plusminus                  shift and go to state 24
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 1

    (0) S' -> init .



state 2

    (1) init -> command . init
    (2) init -> command .
    (1) init -> . command init
    (2) init -> . command
    (3) init -> . function init
    (4) init -> . function
    (7) command -> . interations
    (8) command -> . IF LPAREN exp RPAREN if_statement
    (9) command -> . exp SEMICOLON
    (10) command -> . RETURN exp SEMICOLON
    (11) command -> . BREAK SEMICOLON
    (12) command -> . CONTINUE SEMICOLON
    (26) function -> . SUB ID LPAREN RPAREN LBRACE blockcode RBRACE
    (27) function -> . SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE
    (20) interations -> . FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (21) interations -> . DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN
    (22) interations -> . WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE
    (23) interations -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (32) exp -> . ID_SC EQUALS exp_lor
    (33) exp -> . ID_LI EQUALS exp_lor
    (34) exp -> . ID_SC MINUSEQUAL exp_lor
    (35) exp -> . ID_SC PLUSEQUAL exp_lor
    (36) exp -> . ID_SC MODEQUAL exp_lor
    (37) exp -> . ID_SC DIVEQUAL exp_lor
    (38) exp -> . ID_SC TIMESEQUAL exp_lor
    (39) exp -> . exp_lor
    (40) exp_lor -> . exp_lor LOR exp_land
    (41) exp_lor -> . exp_land
    (42) exp_land -> . exp_land LAND exp_or
    (43) exp_land -> . exp_or
    (44) exp_or -> . exp_or OR exp_and
    (45) exp_or -> . exp_and
    (46) exp_and -> . exp_and AND exp_comp
    (47) exp_and -> . exp_comp_eq
    (48) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (49) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (50) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (51) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (52) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (53) exp_comp_eq -> . exp_comp
    (54) exp_comp -> . exp_comp GT exp_plusminus
    (55) exp_comp -> . exp_comp LT exp_plusminus
    (56) exp_comp -> . exp_comp GE exp_plusminus
    (57) exp_comp -> . exp_comp LE exp_plusminus
    (58) exp_comp -> . exp_comp SLT exp_plusminus
    (59) exp_comp -> . exp_comp SGT exp_plusminus
    (60) exp_comp -> . exp_comp SGE exp_plusminus
    (61) exp_comp -> . exp_comp SLE exp_plusminus
    (62) exp_comp -> . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    $end            reduce using rule 2 (init -> command .)
    IF              shift and go to state 5
    RETURN          shift and go to state 8
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    SUB             shift and go to state 11
    FOR             shift and go to state 13
    DO              shift and go to state 14
    WHILE           shift and go to state 15
    ID_SC           shift and go to state 16
    ID_LI           shift and go to state 18
    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    command                        shift and go to state 2
    init                           shift and go to state 36
    function                       shift and go to state 3
    interations                    shift and go to state 4
    exp                            shift and go to state 7
    exp_lor                        shift and go to state 17
    exp_land                       shift and go to state 19
    exp_or                         shift and go to state 20
    exp_and                        shift and go to state 21
    exp_comp                       shift and go to state 22
    exp_comp_eq                    shift and go to state 23
    exp_plusminus                  shift and go to state 24
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 3

    (3) init -> function . init
    (4) init -> function .
    (1) init -> . command init
    (2) init -> . command
    (3) init -> . function init
    (4) init -> . function
    (7) command -> . interations
    (8) command -> . IF LPAREN exp RPAREN if_statement
    (9) command -> . exp SEMICOLON
    (10) command -> . RETURN exp SEMICOLON
    (11) command -> . BREAK SEMICOLON
    (12) command -> . CONTINUE SEMICOLON
    (26) function -> . SUB ID LPAREN RPAREN LBRACE blockcode RBRACE
    (27) function -> . SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE
    (20) interations -> . FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (21) interations -> . DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN
    (22) interations -> . WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE
    (23) interations -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (32) exp -> . ID_SC EQUALS exp_lor
    (33) exp -> . ID_LI EQUALS exp_lor
    (34) exp -> . ID_SC MINUSEQUAL exp_lor
    (35) exp -> . ID_SC PLUSEQUAL exp_lor
    (36) exp -> . ID_SC MODEQUAL exp_lor
    (37) exp -> . ID_SC DIVEQUAL exp_lor
    (38) exp -> . ID_SC TIMESEQUAL exp_lor
    (39) exp -> . exp_lor
    (40) exp_lor -> . exp_lor LOR exp_land
    (41) exp_lor -> . exp_land
    (42) exp_land -> . exp_land LAND exp_or
    (43) exp_land -> . exp_or
    (44) exp_or -> . exp_or OR exp_and
    (45) exp_or -> . exp_and
    (46) exp_and -> . exp_and AND exp_comp
    (47) exp_and -> . exp_comp_eq
    (48) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (49) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (50) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (51) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (52) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (53) exp_comp_eq -> . exp_comp
    (54) exp_comp -> . exp_comp GT exp_plusminus
    (55) exp_comp -> . exp_comp LT exp_plusminus
    (56) exp_comp -> . exp_comp GE exp_plusminus
    (57) exp_comp -> . exp_comp LE exp_plusminus
    (58) exp_comp -> . exp_comp SLT exp_plusminus
    (59) exp_comp -> . exp_comp SGT exp_plusminus
    (60) exp_comp -> . exp_comp SGE exp_plusminus
    (61) exp_comp -> . exp_comp SLE exp_plusminus
    (62) exp_comp -> . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    $end            reduce using rule 4 (init -> function .)
    IF              shift and go to state 5
    RETURN          shift and go to state 8
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    SUB             shift and go to state 11
    FOR             shift and go to state 13
    DO              shift and go to state 14
    WHILE           shift and go to state 15
    ID_SC           shift and go to state 16
    ID_LI           shift and go to state 18
    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    function                       shift and go to state 3
    init                           shift and go to state 37
    command                        shift and go to state 2
    interations                    shift and go to state 4
    exp                            shift and go to state 7
    exp_lor                        shift and go to state 17
    exp_land                       shift and go to state 19
    exp_or                         shift and go to state 20
    exp_and                        shift and go to state 21
    exp_comp                       shift and go to state 22
    exp_comp_eq                    shift and go to state 23
    exp_plusminus                  shift and go to state 24
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 4

    (7) command -> interations .

    IF              reduce using rule 7 (command -> interations .)
    RETURN          reduce using rule 7 (command -> interations .)
    BREAK           reduce using rule 7 (command -> interations .)
    CONTINUE        reduce using rule 7 (command -> interations .)
    SUB             reduce using rule 7 (command -> interations .)
    FOR             reduce using rule 7 (command -> interations .)
    DO              reduce using rule 7 (command -> interations .)
    WHILE           reduce using rule 7 (command -> interations .)
    ID_SC           reduce using rule 7 (command -> interations .)
    ID_LI           reduce using rule 7 (command -> interations .)
    XOR             reduce using rule 7 (command -> interations .)
    INCREMENT       reduce using rule 7 (command -> interations .)
    DECREMENT       reduce using rule 7 (command -> interations .)
    LPAREN          reduce using rule 7 (command -> interations .)
    NUMBER          reduce using rule 7 (command -> interations .)
    TRUE            reduce using rule 7 (command -> interations .)
    FALSE           reduce using rule 7 (command -> interations .)
    ID              reduce using rule 7 (command -> interations .)
    $end            reduce using rule 7 (command -> interations .)
    RBRACE          reduce using rule 7 (command -> interations .)


state 5

    (8) command -> IF . LPAREN exp RPAREN if_statement

    LPAREN          shift and go to state 38


state 6

    (77) exp_lastlayer -> LPAREN . exp RPAREN
    (32) exp -> . ID_SC EQUALS exp_lor
    (33) exp -> . ID_LI EQUALS exp_lor
    (34) exp -> . ID_SC MINUSEQUAL exp_lor
    (35) exp -> . ID_SC PLUSEQUAL exp_lor
    (36) exp -> . ID_SC MODEQUAL exp_lor
    (37) exp -> . ID_SC DIVEQUAL exp_lor
    (38) exp -> . ID_SC TIMESEQUAL exp_lor
    (39) exp -> . exp_lor
    (40) exp_lor -> . exp_lor LOR exp_land
    (41) exp_lor -> . exp_land
    (42) exp_land -> . exp_land LAND exp_or
    (43) exp_land -> . exp_or
    (44) exp_or -> . exp_or OR exp_and
    (45) exp_or -> . exp_and
    (46) exp_and -> . exp_and AND exp_comp
    (47) exp_and -> . exp_comp_eq
    (48) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (49) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (50) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (51) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (52) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (53) exp_comp_eq -> . exp_comp
    (54) exp_comp -> . exp_comp GT exp_plusminus
    (55) exp_comp -> . exp_comp LT exp_plusminus
    (56) exp_comp -> . exp_comp GE exp_plusminus
    (57) exp_comp -> . exp_comp LE exp_plusminus
    (58) exp_comp -> . exp_comp SLT exp_plusminus
    (59) exp_comp -> . exp_comp SGT exp_plusminus
    (60) exp_comp -> . exp_comp SGE exp_plusminus
    (61) exp_comp -> . exp_comp SLE exp_plusminus
    (62) exp_comp -> . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    ID_SC           shift and go to state 16
    ID_LI           shift and go to state 18
    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    exp                            shift and go to state 39
    exp_lor                        shift and go to state 17
    exp_land                       shift and go to state 19
    exp_or                         shift and go to state 20
    exp_and                        shift and go to state 21
    exp_comp                       shift and go to state 22
    exp_comp_eq                    shift and go to state 23
    exp_plusminus                  shift and go to state 24
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 7

    (9) command -> exp . SEMICOLON

    SEMICOLON       shift and go to state 40


state 8

    (10) command -> RETURN . exp SEMICOLON
    (32) exp -> . ID_SC EQUALS exp_lor
    (33) exp -> . ID_LI EQUALS exp_lor
    (34) exp -> . ID_SC MINUSEQUAL exp_lor
    (35) exp -> . ID_SC PLUSEQUAL exp_lor
    (36) exp -> . ID_SC MODEQUAL exp_lor
    (37) exp -> . ID_SC DIVEQUAL exp_lor
    (38) exp -> . ID_SC TIMESEQUAL exp_lor
    (39) exp -> . exp_lor
    (40) exp_lor -> . exp_lor LOR exp_land
    (41) exp_lor -> . exp_land
    (42) exp_land -> . exp_land LAND exp_or
    (43) exp_land -> . exp_or
    (44) exp_or -> . exp_or OR exp_and
    (45) exp_or -> . exp_and
    (46) exp_and -> . exp_and AND exp_comp
    (47) exp_and -> . exp_comp_eq
    (48) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (49) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (50) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (51) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (52) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (53) exp_comp_eq -> . exp_comp
    (54) exp_comp -> . exp_comp GT exp_plusminus
    (55) exp_comp -> . exp_comp LT exp_plusminus
    (56) exp_comp -> . exp_comp GE exp_plusminus
    (57) exp_comp -> . exp_comp LE exp_plusminus
    (58) exp_comp -> . exp_comp SLT exp_plusminus
    (59) exp_comp -> . exp_comp SGT exp_plusminus
    (60) exp_comp -> . exp_comp SGE exp_plusminus
    (61) exp_comp -> . exp_comp SLE exp_plusminus
    (62) exp_comp -> . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    ID_SC           shift and go to state 16
    ID_LI           shift and go to state 18
    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    exp                            shift and go to state 41
    exp_lor                        shift and go to state 17
    exp_land                       shift and go to state 19
    exp_or                         shift and go to state 20
    exp_and                        shift and go to state 21
    exp_comp                       shift and go to state 22
    exp_comp_eq                    shift and go to state 23
    exp_plusminus                  shift and go to state 24
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 9

    (11) command -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 42


state 10

    (12) command -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 43


state 11

    (26) function -> SUB . ID LPAREN RPAREN LBRACE blockcode RBRACE
    (27) function -> SUB . ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE

    ID              shift and go to state 44


state 12

    (30) call -> ID . LPAREN RPAREN
    (31) call -> ID . LPAREN function_assignments RPAREN

    LPAREN          shift and go to state 45


state 13

    (20) interations -> FOR . LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE

    LPAREN          shift and go to state 46


state 14

    (21) interations -> DO . LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN

    LBRACE          shift and go to state 47


state 15

    (22) interations -> WHILE . LPAREN exp RPAREN LBRACE blockcode RBRACE
    (23) interations -> WHILE . LPAREN exp RPAREN LBRACE RBRACE

    LPAREN          shift and go to state 48


state 16

    (32) exp -> ID_SC . EQUALS exp_lor
    (34) exp -> ID_SC . MINUSEQUAL exp_lor
    (35) exp -> ID_SC . PLUSEQUAL exp_lor
    (36) exp -> ID_SC . MODEQUAL exp_lor
    (37) exp -> ID_SC . DIVEQUAL exp_lor
    (38) exp -> ID_SC . TIMESEQUAL exp_lor
    (74) exp_decrement_increment -> ID_SC . INCREMENT
    (75) exp_decrement_increment -> ID_SC . DECREMENT
    (78) exp_lastlayer -> ID_SC .

    EQUALS          shift and go to state 49
    MINUSEQUAL      shift and go to state 50
    PLUSEQUAL       shift and go to state 51
    MODEQUAL        shift and go to state 52
    DIVEQUAL        shift and go to state 53
    TIMESEQUAL      shift and go to state 54
    INCREMENT       shift and go to state 55
    DECREMENT       shift and go to state 56
    TIMES           reduce using rule 78 (exp_lastlayer -> ID_SC .)
    DIVIDE          reduce using rule 78 (exp_lastlayer -> ID_SC .)
    MODULO          reduce using rule 78 (exp_lastlayer -> ID_SC .)
    PLUS            reduce using rule 78 (exp_lastlayer -> ID_SC .)
    MINUS           reduce using rule 78 (exp_lastlayer -> ID_SC .)
    GT              reduce using rule 78 (exp_lastlayer -> ID_SC .)
    LT              reduce using rule 78 (exp_lastlayer -> ID_SC .)
    GE              reduce using rule 78 (exp_lastlayer -> ID_SC .)
    LE              reduce using rule 78 (exp_lastlayer -> ID_SC .)
    SLT             reduce using rule 78 (exp_lastlayer -> ID_SC .)
    SGT             reduce using rule 78 (exp_lastlayer -> ID_SC .)
    SGE             reduce using rule 78 (exp_lastlayer -> ID_SC .)
    SLE             reduce using rule 78 (exp_lastlayer -> ID_SC .)
    EQ              reduce using rule 78 (exp_lastlayer -> ID_SC .)
    NE              reduce using rule 78 (exp_lastlayer -> ID_SC .)
    SEQ             reduce using rule 78 (exp_lastlayer -> ID_SC .)
    SNE             reduce using rule 78 (exp_lastlayer -> ID_SC .)
    CMP             reduce using rule 78 (exp_lastlayer -> ID_SC .)
    AND             reduce using rule 78 (exp_lastlayer -> ID_SC .)
    OR              reduce using rule 78 (exp_lastlayer -> ID_SC .)
    LAND            reduce using rule 78 (exp_lastlayer -> ID_SC .)
    LOR             reduce using rule 78 (exp_lastlayer -> ID_SC .)
    SEMICOLON       reduce using rule 78 (exp_lastlayer -> ID_SC .)
    RPAREN          reduce using rule 78 (exp_lastlayer -> ID_SC .)
    COMMA           reduce using rule 78 (exp_lastlayer -> ID_SC .)


state 17

    (39) exp -> exp_lor .
    (40) exp_lor -> exp_lor . LOR exp_land

    SEMICOLON       reduce using rule 39 (exp -> exp_lor .)
    RPAREN          reduce using rule 39 (exp -> exp_lor .)
    COMMA           reduce using rule 39 (exp -> exp_lor .)
    LOR             shift and go to state 57


state 18

    (33) exp -> ID_LI . EQUALS exp_lor
    (79) exp_lastlayer -> ID_LI .

    EQUALS          shift and go to state 58
    TIMES           reduce using rule 79 (exp_lastlayer -> ID_LI .)
    DIVIDE          reduce using rule 79 (exp_lastlayer -> ID_LI .)
    MODULO          reduce using rule 79 (exp_lastlayer -> ID_LI .)
    PLUS            reduce using rule 79 (exp_lastlayer -> ID_LI .)
    MINUS           reduce using rule 79 (exp_lastlayer -> ID_LI .)
    GT              reduce using rule 79 (exp_lastlayer -> ID_LI .)
    LT              reduce using rule 79 (exp_lastlayer -> ID_LI .)
    GE              reduce using rule 79 (exp_lastlayer -> ID_LI .)
    LE              reduce using rule 79 (exp_lastlayer -> ID_LI .)
    SLT             reduce using rule 79 (exp_lastlayer -> ID_LI .)
    SGT             reduce using rule 79 (exp_lastlayer -> ID_LI .)
    SGE             reduce using rule 79 (exp_lastlayer -> ID_LI .)
    SLE             reduce using rule 79 (exp_lastlayer -> ID_LI .)
    EQ              reduce using rule 79 (exp_lastlayer -> ID_LI .)
    NE              reduce using rule 79 (exp_lastlayer -> ID_LI .)
    SEQ             reduce using rule 79 (exp_lastlayer -> ID_LI .)
    SNE             reduce using rule 79 (exp_lastlayer -> ID_LI .)
    CMP             reduce using rule 79 (exp_lastlayer -> ID_LI .)
    AND             reduce using rule 79 (exp_lastlayer -> ID_LI .)
    OR              reduce using rule 79 (exp_lastlayer -> ID_LI .)
    LAND            reduce using rule 79 (exp_lastlayer -> ID_LI .)
    LOR             reduce using rule 79 (exp_lastlayer -> ID_LI .)
    SEMICOLON       reduce using rule 79 (exp_lastlayer -> ID_LI .)
    RPAREN          reduce using rule 79 (exp_lastlayer -> ID_LI .)
    COMMA           reduce using rule 79 (exp_lastlayer -> ID_LI .)


state 19

    (41) exp_lor -> exp_land .
    (42) exp_land -> exp_land . LAND exp_or

    LOR             reduce using rule 41 (exp_lor -> exp_land .)
    SEMICOLON       reduce using rule 41 (exp_lor -> exp_land .)
    RPAREN          reduce using rule 41 (exp_lor -> exp_land .)
    COMMA           reduce using rule 41 (exp_lor -> exp_land .)
    LAND            shift and go to state 59


state 20

    (43) exp_land -> exp_or .
    (44) exp_or -> exp_or . OR exp_and

    LAND            reduce using rule 43 (exp_land -> exp_or .)
    LOR             reduce using rule 43 (exp_land -> exp_or .)
    SEMICOLON       reduce using rule 43 (exp_land -> exp_or .)
    RPAREN          reduce using rule 43 (exp_land -> exp_or .)
    COMMA           reduce using rule 43 (exp_land -> exp_or .)
    OR              shift and go to state 60


state 21

    (45) exp_or -> exp_and .
    (46) exp_and -> exp_and . AND exp_comp

    OR              reduce using rule 45 (exp_or -> exp_and .)
    LAND            reduce using rule 45 (exp_or -> exp_and .)
    LOR             reduce using rule 45 (exp_or -> exp_and .)
    SEMICOLON       reduce using rule 45 (exp_or -> exp_and .)
    RPAREN          reduce using rule 45 (exp_or -> exp_and .)
    COMMA           reduce using rule 45 (exp_or -> exp_and .)
    AND             shift and go to state 61


state 22

    (53) exp_comp_eq -> exp_comp .
    (54) exp_comp -> exp_comp . GT exp_plusminus
    (55) exp_comp -> exp_comp . LT exp_plusminus
    (56) exp_comp -> exp_comp . GE exp_plusminus
    (57) exp_comp -> exp_comp . LE exp_plusminus
    (58) exp_comp -> exp_comp . SLT exp_plusminus
    (59) exp_comp -> exp_comp . SGT exp_plusminus
    (60) exp_comp -> exp_comp . SGE exp_plusminus
    (61) exp_comp -> exp_comp . SLE exp_plusminus

    EQ              reduce using rule 53 (exp_comp_eq -> exp_comp .)
    NE              reduce using rule 53 (exp_comp_eq -> exp_comp .)
    SEQ             reduce using rule 53 (exp_comp_eq -> exp_comp .)
    SNE             reduce using rule 53 (exp_comp_eq -> exp_comp .)
    CMP             reduce using rule 53 (exp_comp_eq -> exp_comp .)
    AND             reduce using rule 53 (exp_comp_eq -> exp_comp .)
    OR              reduce using rule 53 (exp_comp_eq -> exp_comp .)
    LAND            reduce using rule 53 (exp_comp_eq -> exp_comp .)
    LOR             reduce using rule 53 (exp_comp_eq -> exp_comp .)
    SEMICOLON       reduce using rule 53 (exp_comp_eq -> exp_comp .)
    RPAREN          reduce using rule 53 (exp_comp_eq -> exp_comp .)
    COMMA           reduce using rule 53 (exp_comp_eq -> exp_comp .)
    GT              shift and go to state 62
    LT              shift and go to state 63
    GE              shift and go to state 64
    LE              shift and go to state 65
    SLT             shift and go to state 66
    SGT             shift and go to state 67
    SGE             shift and go to state 68
    SLE             shift and go to state 69


state 23

    (47) exp_and -> exp_comp_eq .
    (48) exp_comp_eq -> exp_comp_eq . EQ exp_comp
    (49) exp_comp_eq -> exp_comp_eq . NE exp_comp
    (50) exp_comp_eq -> exp_comp_eq . SEQ exp_comp
    (51) exp_comp_eq -> exp_comp_eq . SNE exp_comp
    (52) exp_comp_eq -> exp_comp_eq . CMP exp_comp

    AND             reduce using rule 47 (exp_and -> exp_comp_eq .)
    OR              reduce using rule 47 (exp_and -> exp_comp_eq .)
    LAND            reduce using rule 47 (exp_and -> exp_comp_eq .)
    LOR             reduce using rule 47 (exp_and -> exp_comp_eq .)
    SEMICOLON       reduce using rule 47 (exp_and -> exp_comp_eq .)
    RPAREN          reduce using rule 47 (exp_and -> exp_comp_eq .)
    COMMA           reduce using rule 47 (exp_and -> exp_comp_eq .)
    EQ              shift and go to state 70
    NE              shift and go to state 71
    SEQ             shift and go to state 72
    SNE             shift and go to state 73
    CMP             shift and go to state 74


state 24

    (62) exp_comp -> exp_plusminus .
    (63) exp_plusminus -> exp_plusminus . PLUS exp_times_divides
    (64) exp_plusminus -> exp_plusminus . MINUS exp_times_divides

    GT              reduce using rule 62 (exp_comp -> exp_plusminus .)
    LT              reduce using rule 62 (exp_comp -> exp_plusminus .)
    GE              reduce using rule 62 (exp_comp -> exp_plusminus .)
    LE              reduce using rule 62 (exp_comp -> exp_plusminus .)
    SLT             reduce using rule 62 (exp_comp -> exp_plusminus .)
    SGT             reduce using rule 62 (exp_comp -> exp_plusminus .)
    SGE             reduce using rule 62 (exp_comp -> exp_plusminus .)
    SLE             reduce using rule 62 (exp_comp -> exp_plusminus .)
    EQ              reduce using rule 62 (exp_comp -> exp_plusminus .)
    NE              reduce using rule 62 (exp_comp -> exp_plusminus .)
    SEQ             reduce using rule 62 (exp_comp -> exp_plusminus .)
    SNE             reduce using rule 62 (exp_comp -> exp_plusminus .)
    CMP             reduce using rule 62 (exp_comp -> exp_plusminus .)
    AND             reduce using rule 62 (exp_comp -> exp_plusminus .)
    OR              reduce using rule 62 (exp_comp -> exp_plusminus .)
    LAND            reduce using rule 62 (exp_comp -> exp_plusminus .)
    LOR             reduce using rule 62 (exp_comp -> exp_plusminus .)
    SEMICOLON       reduce using rule 62 (exp_comp -> exp_plusminus .)
    RPAREN          reduce using rule 62 (exp_comp -> exp_plusminus .)
    COMMA           reduce using rule 62 (exp_comp -> exp_plusminus .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76


state 25

    (65) exp_plusminus -> exp_times_divides .
    (66) exp_times_divides -> exp_times_divides . TIMES exp_lnot
    (67) exp_times_divides -> exp_times_divides . DIVIDE exp_lnot
    (68) exp_times_divides -> exp_times_divides . MODULO exp_lnot

    PLUS            reduce using rule 65 (exp_plusminus -> exp_times_divides .)
    MINUS           reduce using rule 65 (exp_plusminus -> exp_times_divides .)
    GT              reduce using rule 65 (exp_plusminus -> exp_times_divides .)
    LT              reduce using rule 65 (exp_plusminus -> exp_times_divides .)
    GE              reduce using rule 65 (exp_plusminus -> exp_times_divides .)
    LE              reduce using rule 65 (exp_plusminus -> exp_times_divides .)
    SLT             reduce using rule 65 (exp_plusminus -> exp_times_divides .)
    SGT             reduce using rule 65 (exp_plusminus -> exp_times_divides .)
    SGE             reduce using rule 65 (exp_plusminus -> exp_times_divides .)
    SLE             reduce using rule 65 (exp_plusminus -> exp_times_divides .)
    EQ              reduce using rule 65 (exp_plusminus -> exp_times_divides .)
    NE              reduce using rule 65 (exp_plusminus -> exp_times_divides .)
    SEQ             reduce using rule 65 (exp_plusminus -> exp_times_divides .)
    SNE             reduce using rule 65 (exp_plusminus -> exp_times_divides .)
    CMP             reduce using rule 65 (exp_plusminus -> exp_times_divides .)
    AND             reduce using rule 65 (exp_plusminus -> exp_times_divides .)
    OR              reduce using rule 65 (exp_plusminus -> exp_times_divides .)
    LAND            reduce using rule 65 (exp_plusminus -> exp_times_divides .)
    LOR             reduce using rule 65 (exp_plusminus -> exp_times_divides .)
    SEMICOLON       reduce using rule 65 (exp_plusminus -> exp_times_divides .)
    RPAREN          reduce using rule 65 (exp_plusminus -> exp_times_divides .)
    COMMA           reduce using rule 65 (exp_plusminus -> exp_times_divides .)
    TIMES           shift and go to state 77
    DIVIDE          shift and go to state 78
    MODULO          shift and go to state 79


state 26

    (69) exp_times_divides -> exp_lnot .

    TIMES           reduce using rule 69 (exp_times_divides -> exp_lnot .)
    DIVIDE          reduce using rule 69 (exp_times_divides -> exp_lnot .)
    MODULO          reduce using rule 69 (exp_times_divides -> exp_lnot .)
    PLUS            reduce using rule 69 (exp_times_divides -> exp_lnot .)
    MINUS           reduce using rule 69 (exp_times_divides -> exp_lnot .)
    GT              reduce using rule 69 (exp_times_divides -> exp_lnot .)
    LT              reduce using rule 69 (exp_times_divides -> exp_lnot .)
    GE              reduce using rule 69 (exp_times_divides -> exp_lnot .)
    LE              reduce using rule 69 (exp_times_divides -> exp_lnot .)
    SLT             reduce using rule 69 (exp_times_divides -> exp_lnot .)
    SGT             reduce using rule 69 (exp_times_divides -> exp_lnot .)
    SGE             reduce using rule 69 (exp_times_divides -> exp_lnot .)
    SLE             reduce using rule 69 (exp_times_divides -> exp_lnot .)
    EQ              reduce using rule 69 (exp_times_divides -> exp_lnot .)
    NE              reduce using rule 69 (exp_times_divides -> exp_lnot .)
    SEQ             reduce using rule 69 (exp_times_divides -> exp_lnot .)
    SNE             reduce using rule 69 (exp_times_divides -> exp_lnot .)
    CMP             reduce using rule 69 (exp_times_divides -> exp_lnot .)
    AND             reduce using rule 69 (exp_times_divides -> exp_lnot .)
    OR              reduce using rule 69 (exp_times_divides -> exp_lnot .)
    LAND            reduce using rule 69 (exp_times_divides -> exp_lnot .)
    LOR             reduce using rule 69 (exp_times_divides -> exp_lnot .)
    SEMICOLON       reduce using rule 69 (exp_times_divides -> exp_lnot .)
    RPAREN          reduce using rule 69 (exp_times_divides -> exp_lnot .)
    COMMA           reduce using rule 69 (exp_times_divides -> exp_lnot .)


state 27

    (70) exp_lnot -> XOR . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    ID_SC           shift and go to state 81
    LPAREN          shift and go to state 6
    ID_LI           shift and go to state 82
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    exp_lnot                       shift and go to state 80
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 28

    (71) exp_lnot -> exp_decrement_increment .

    TIMES           reduce using rule 71 (exp_lnot -> exp_decrement_increment .)
    DIVIDE          reduce using rule 71 (exp_lnot -> exp_decrement_increment .)
    MODULO          reduce using rule 71 (exp_lnot -> exp_decrement_increment .)
    PLUS            reduce using rule 71 (exp_lnot -> exp_decrement_increment .)
    MINUS           reduce using rule 71 (exp_lnot -> exp_decrement_increment .)
    GT              reduce using rule 71 (exp_lnot -> exp_decrement_increment .)
    LT              reduce using rule 71 (exp_lnot -> exp_decrement_increment .)
    GE              reduce using rule 71 (exp_lnot -> exp_decrement_increment .)
    LE              reduce using rule 71 (exp_lnot -> exp_decrement_increment .)
    SLT             reduce using rule 71 (exp_lnot -> exp_decrement_increment .)
    SGT             reduce using rule 71 (exp_lnot -> exp_decrement_increment .)
    SGE             reduce using rule 71 (exp_lnot -> exp_decrement_increment .)
    SLE             reduce using rule 71 (exp_lnot -> exp_decrement_increment .)
    EQ              reduce using rule 71 (exp_lnot -> exp_decrement_increment .)
    NE              reduce using rule 71 (exp_lnot -> exp_decrement_increment .)
    SEQ             reduce using rule 71 (exp_lnot -> exp_decrement_increment .)
    SNE             reduce using rule 71 (exp_lnot -> exp_decrement_increment .)
    CMP             reduce using rule 71 (exp_lnot -> exp_decrement_increment .)
    AND             reduce using rule 71 (exp_lnot -> exp_decrement_increment .)
    OR              reduce using rule 71 (exp_lnot -> exp_decrement_increment .)
    LAND            reduce using rule 71 (exp_lnot -> exp_decrement_increment .)
    LOR             reduce using rule 71 (exp_lnot -> exp_decrement_increment .)
    SEMICOLON       reduce using rule 71 (exp_lnot -> exp_decrement_increment .)
    RPAREN          reduce using rule 71 (exp_lnot -> exp_decrement_increment .)
    COMMA           reduce using rule 71 (exp_lnot -> exp_decrement_increment .)


state 29

    (72) exp_decrement_increment -> INCREMENT . ID_SC

    ID_SC           shift and go to state 83


state 30

    (73) exp_decrement_increment -> DECREMENT . ID_SC

    ID_SC           shift and go to state 84


state 31

    (76) exp_decrement_increment -> exp_lastlayer .

    TIMES           reduce using rule 76 (exp_decrement_increment -> exp_lastlayer .)
    DIVIDE          reduce using rule 76 (exp_decrement_increment -> exp_lastlayer .)
    MODULO          reduce using rule 76 (exp_decrement_increment -> exp_lastlayer .)
    PLUS            reduce using rule 76 (exp_decrement_increment -> exp_lastlayer .)
    MINUS           reduce using rule 76 (exp_decrement_increment -> exp_lastlayer .)
    GT              reduce using rule 76 (exp_decrement_increment -> exp_lastlayer .)
    LT              reduce using rule 76 (exp_decrement_increment -> exp_lastlayer .)
    GE              reduce using rule 76 (exp_decrement_increment -> exp_lastlayer .)
    LE              reduce using rule 76 (exp_decrement_increment -> exp_lastlayer .)
    SLT             reduce using rule 76 (exp_decrement_increment -> exp_lastlayer .)
    SGT             reduce using rule 76 (exp_decrement_increment -> exp_lastlayer .)
    SGE             reduce using rule 76 (exp_decrement_increment -> exp_lastlayer .)
    SLE             reduce using rule 76 (exp_decrement_increment -> exp_lastlayer .)
    EQ              reduce using rule 76 (exp_decrement_increment -> exp_lastlayer .)
    NE              reduce using rule 76 (exp_decrement_increment -> exp_lastlayer .)
    SEQ             reduce using rule 76 (exp_decrement_increment -> exp_lastlayer .)
    SNE             reduce using rule 76 (exp_decrement_increment -> exp_lastlayer .)
    CMP             reduce using rule 76 (exp_decrement_increment -> exp_lastlayer .)
    AND             reduce using rule 76 (exp_decrement_increment -> exp_lastlayer .)
    OR              reduce using rule 76 (exp_decrement_increment -> exp_lastlayer .)
    LAND            reduce using rule 76 (exp_decrement_increment -> exp_lastlayer .)
    LOR             reduce using rule 76 (exp_decrement_increment -> exp_lastlayer .)
    SEMICOLON       reduce using rule 76 (exp_decrement_increment -> exp_lastlayer .)
    RPAREN          reduce using rule 76 (exp_decrement_increment -> exp_lastlayer .)
    COMMA           reduce using rule 76 (exp_decrement_increment -> exp_lastlayer .)


state 32

    (80) exp_lastlayer -> NUMBER .

    TIMES           reduce using rule 80 (exp_lastlayer -> NUMBER .)
    DIVIDE          reduce using rule 80 (exp_lastlayer -> NUMBER .)
    MODULO          reduce using rule 80 (exp_lastlayer -> NUMBER .)
    PLUS            reduce using rule 80 (exp_lastlayer -> NUMBER .)
    MINUS           reduce using rule 80 (exp_lastlayer -> NUMBER .)
    GT              reduce using rule 80 (exp_lastlayer -> NUMBER .)
    LT              reduce using rule 80 (exp_lastlayer -> NUMBER .)
    GE              reduce using rule 80 (exp_lastlayer -> NUMBER .)
    LE              reduce using rule 80 (exp_lastlayer -> NUMBER .)
    SLT             reduce using rule 80 (exp_lastlayer -> NUMBER .)
    SGT             reduce using rule 80 (exp_lastlayer -> NUMBER .)
    SGE             reduce using rule 80 (exp_lastlayer -> NUMBER .)
    SLE             reduce using rule 80 (exp_lastlayer -> NUMBER .)
    EQ              reduce using rule 80 (exp_lastlayer -> NUMBER .)
    NE              reduce using rule 80 (exp_lastlayer -> NUMBER .)
    SEQ             reduce using rule 80 (exp_lastlayer -> NUMBER .)
    SNE             reduce using rule 80 (exp_lastlayer -> NUMBER .)
    CMP             reduce using rule 80 (exp_lastlayer -> NUMBER .)
    AND             reduce using rule 80 (exp_lastlayer -> NUMBER .)
    OR              reduce using rule 80 (exp_lastlayer -> NUMBER .)
    LAND            reduce using rule 80 (exp_lastlayer -> NUMBER .)
    LOR             reduce using rule 80 (exp_lastlayer -> NUMBER .)
    SEMICOLON       reduce using rule 80 (exp_lastlayer -> NUMBER .)
    RPAREN          reduce using rule 80 (exp_lastlayer -> NUMBER .)
    COMMA           reduce using rule 80 (exp_lastlayer -> NUMBER .)


state 33

    (81) exp_lastlayer -> call .

    TIMES           reduce using rule 81 (exp_lastlayer -> call .)
    DIVIDE          reduce using rule 81 (exp_lastlayer -> call .)
    MODULO          reduce using rule 81 (exp_lastlayer -> call .)
    PLUS            reduce using rule 81 (exp_lastlayer -> call .)
    MINUS           reduce using rule 81 (exp_lastlayer -> call .)
    GT              reduce using rule 81 (exp_lastlayer -> call .)
    LT              reduce using rule 81 (exp_lastlayer -> call .)
    GE              reduce using rule 81 (exp_lastlayer -> call .)
    LE              reduce using rule 81 (exp_lastlayer -> call .)
    SLT             reduce using rule 81 (exp_lastlayer -> call .)
    SGT             reduce using rule 81 (exp_lastlayer -> call .)
    SGE             reduce using rule 81 (exp_lastlayer -> call .)
    SLE             reduce using rule 81 (exp_lastlayer -> call .)
    EQ              reduce using rule 81 (exp_lastlayer -> call .)
    NE              reduce using rule 81 (exp_lastlayer -> call .)
    SEQ             reduce using rule 81 (exp_lastlayer -> call .)
    SNE             reduce using rule 81 (exp_lastlayer -> call .)
    CMP             reduce using rule 81 (exp_lastlayer -> call .)
    AND             reduce using rule 81 (exp_lastlayer -> call .)
    OR              reduce using rule 81 (exp_lastlayer -> call .)
    LAND            reduce using rule 81 (exp_lastlayer -> call .)
    LOR             reduce using rule 81 (exp_lastlayer -> call .)
    SEMICOLON       reduce using rule 81 (exp_lastlayer -> call .)
    RPAREN          reduce using rule 81 (exp_lastlayer -> call .)
    COMMA           reduce using rule 81 (exp_lastlayer -> call .)


state 34

    (82) exp_lastlayer -> TRUE .

    TIMES           reduce using rule 82 (exp_lastlayer -> TRUE .)
    DIVIDE          reduce using rule 82 (exp_lastlayer -> TRUE .)
    MODULO          reduce using rule 82 (exp_lastlayer -> TRUE .)
    PLUS            reduce using rule 82 (exp_lastlayer -> TRUE .)
    MINUS           reduce using rule 82 (exp_lastlayer -> TRUE .)
    GT              reduce using rule 82 (exp_lastlayer -> TRUE .)
    LT              reduce using rule 82 (exp_lastlayer -> TRUE .)
    GE              reduce using rule 82 (exp_lastlayer -> TRUE .)
    LE              reduce using rule 82 (exp_lastlayer -> TRUE .)
    SLT             reduce using rule 82 (exp_lastlayer -> TRUE .)
    SGT             reduce using rule 82 (exp_lastlayer -> TRUE .)
    SGE             reduce using rule 82 (exp_lastlayer -> TRUE .)
    SLE             reduce using rule 82 (exp_lastlayer -> TRUE .)
    EQ              reduce using rule 82 (exp_lastlayer -> TRUE .)
    NE              reduce using rule 82 (exp_lastlayer -> TRUE .)
    SEQ             reduce using rule 82 (exp_lastlayer -> TRUE .)
    SNE             reduce using rule 82 (exp_lastlayer -> TRUE .)
    CMP             reduce using rule 82 (exp_lastlayer -> TRUE .)
    AND             reduce using rule 82 (exp_lastlayer -> TRUE .)
    OR              reduce using rule 82 (exp_lastlayer -> TRUE .)
    LAND            reduce using rule 82 (exp_lastlayer -> TRUE .)
    LOR             reduce using rule 82 (exp_lastlayer -> TRUE .)
    SEMICOLON       reduce using rule 82 (exp_lastlayer -> TRUE .)
    RPAREN          reduce using rule 82 (exp_lastlayer -> TRUE .)
    COMMA           reduce using rule 82 (exp_lastlayer -> TRUE .)


state 35

    (83) exp_lastlayer -> FALSE .

    TIMES           reduce using rule 83 (exp_lastlayer -> FALSE .)
    DIVIDE          reduce using rule 83 (exp_lastlayer -> FALSE .)
    MODULO          reduce using rule 83 (exp_lastlayer -> FALSE .)
    PLUS            reduce using rule 83 (exp_lastlayer -> FALSE .)
    MINUS           reduce using rule 83 (exp_lastlayer -> FALSE .)
    GT              reduce using rule 83 (exp_lastlayer -> FALSE .)
    LT              reduce using rule 83 (exp_lastlayer -> FALSE .)
    GE              reduce using rule 83 (exp_lastlayer -> FALSE .)
    LE              reduce using rule 83 (exp_lastlayer -> FALSE .)
    SLT             reduce using rule 83 (exp_lastlayer -> FALSE .)
    SGT             reduce using rule 83 (exp_lastlayer -> FALSE .)
    SGE             reduce using rule 83 (exp_lastlayer -> FALSE .)
    SLE             reduce using rule 83 (exp_lastlayer -> FALSE .)
    EQ              reduce using rule 83 (exp_lastlayer -> FALSE .)
    NE              reduce using rule 83 (exp_lastlayer -> FALSE .)
    SEQ             reduce using rule 83 (exp_lastlayer -> FALSE .)
    SNE             reduce using rule 83 (exp_lastlayer -> FALSE .)
    CMP             reduce using rule 83 (exp_lastlayer -> FALSE .)
    AND             reduce using rule 83 (exp_lastlayer -> FALSE .)
    OR              reduce using rule 83 (exp_lastlayer -> FALSE .)
    LAND            reduce using rule 83 (exp_lastlayer -> FALSE .)
    LOR             reduce using rule 83 (exp_lastlayer -> FALSE .)
    SEMICOLON       reduce using rule 83 (exp_lastlayer -> FALSE .)
    RPAREN          reduce using rule 83 (exp_lastlayer -> FALSE .)
    COMMA           reduce using rule 83 (exp_lastlayer -> FALSE .)


state 36

    (1) init -> command init .

    $end            reduce using rule 1 (init -> command init .)


state 37

    (3) init -> function init .

    $end            reduce using rule 3 (init -> function init .)


state 38

    (8) command -> IF LPAREN . exp RPAREN if_statement
    (32) exp -> . ID_SC EQUALS exp_lor
    (33) exp -> . ID_LI EQUALS exp_lor
    (34) exp -> . ID_SC MINUSEQUAL exp_lor
    (35) exp -> . ID_SC PLUSEQUAL exp_lor
    (36) exp -> . ID_SC MODEQUAL exp_lor
    (37) exp -> . ID_SC DIVEQUAL exp_lor
    (38) exp -> . ID_SC TIMESEQUAL exp_lor
    (39) exp -> . exp_lor
    (40) exp_lor -> . exp_lor LOR exp_land
    (41) exp_lor -> . exp_land
    (42) exp_land -> . exp_land LAND exp_or
    (43) exp_land -> . exp_or
    (44) exp_or -> . exp_or OR exp_and
    (45) exp_or -> . exp_and
    (46) exp_and -> . exp_and AND exp_comp
    (47) exp_and -> . exp_comp_eq
    (48) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (49) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (50) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (51) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (52) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (53) exp_comp_eq -> . exp_comp
    (54) exp_comp -> . exp_comp GT exp_plusminus
    (55) exp_comp -> . exp_comp LT exp_plusminus
    (56) exp_comp -> . exp_comp GE exp_plusminus
    (57) exp_comp -> . exp_comp LE exp_plusminus
    (58) exp_comp -> . exp_comp SLT exp_plusminus
    (59) exp_comp -> . exp_comp SGT exp_plusminus
    (60) exp_comp -> . exp_comp SGE exp_plusminus
    (61) exp_comp -> . exp_comp SLE exp_plusminus
    (62) exp_comp -> . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    ID_SC           shift and go to state 16
    ID_LI           shift and go to state 18
    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    exp                            shift and go to state 85
    exp_lor                        shift and go to state 17
    exp_land                       shift and go to state 19
    exp_or                         shift and go to state 20
    exp_and                        shift and go to state 21
    exp_comp                       shift and go to state 22
    exp_comp_eq                    shift and go to state 23
    exp_plusminus                  shift and go to state 24
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 39

    (77) exp_lastlayer -> LPAREN exp . RPAREN

    RPAREN          shift and go to state 86


state 40

    (9) command -> exp SEMICOLON .

    IF              reduce using rule 9 (command -> exp SEMICOLON .)
    RETURN          reduce using rule 9 (command -> exp SEMICOLON .)
    BREAK           reduce using rule 9 (command -> exp SEMICOLON .)
    CONTINUE        reduce using rule 9 (command -> exp SEMICOLON .)
    SUB             reduce using rule 9 (command -> exp SEMICOLON .)
    FOR             reduce using rule 9 (command -> exp SEMICOLON .)
    DO              reduce using rule 9 (command -> exp SEMICOLON .)
    WHILE           reduce using rule 9 (command -> exp SEMICOLON .)
    ID_SC           reduce using rule 9 (command -> exp SEMICOLON .)
    ID_LI           reduce using rule 9 (command -> exp SEMICOLON .)
    XOR             reduce using rule 9 (command -> exp SEMICOLON .)
    INCREMENT       reduce using rule 9 (command -> exp SEMICOLON .)
    DECREMENT       reduce using rule 9 (command -> exp SEMICOLON .)
    LPAREN          reduce using rule 9 (command -> exp SEMICOLON .)
    NUMBER          reduce using rule 9 (command -> exp SEMICOLON .)
    TRUE            reduce using rule 9 (command -> exp SEMICOLON .)
    FALSE           reduce using rule 9 (command -> exp SEMICOLON .)
    ID              reduce using rule 9 (command -> exp SEMICOLON .)
    $end            reduce using rule 9 (command -> exp SEMICOLON .)
    RBRACE          reduce using rule 9 (command -> exp SEMICOLON .)


state 41

    (10) command -> RETURN exp . SEMICOLON

    SEMICOLON       shift and go to state 87


state 42

    (11) command -> BREAK SEMICOLON .

    IF              reduce using rule 11 (command -> BREAK SEMICOLON .)
    RETURN          reduce using rule 11 (command -> BREAK SEMICOLON .)
    BREAK           reduce using rule 11 (command -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 11 (command -> BREAK SEMICOLON .)
    SUB             reduce using rule 11 (command -> BREAK SEMICOLON .)
    FOR             reduce using rule 11 (command -> BREAK SEMICOLON .)
    DO              reduce using rule 11 (command -> BREAK SEMICOLON .)
    WHILE           reduce using rule 11 (command -> BREAK SEMICOLON .)
    ID_SC           reduce using rule 11 (command -> BREAK SEMICOLON .)
    ID_LI           reduce using rule 11 (command -> BREAK SEMICOLON .)
    XOR             reduce using rule 11 (command -> BREAK SEMICOLON .)
    INCREMENT       reduce using rule 11 (command -> BREAK SEMICOLON .)
    DECREMENT       reduce using rule 11 (command -> BREAK SEMICOLON .)
    LPAREN          reduce using rule 11 (command -> BREAK SEMICOLON .)
    NUMBER          reduce using rule 11 (command -> BREAK SEMICOLON .)
    TRUE            reduce using rule 11 (command -> BREAK SEMICOLON .)
    FALSE           reduce using rule 11 (command -> BREAK SEMICOLON .)
    ID              reduce using rule 11 (command -> BREAK SEMICOLON .)
    $end            reduce using rule 11 (command -> BREAK SEMICOLON .)
    RBRACE          reduce using rule 11 (command -> BREAK SEMICOLON .)


state 43

    (12) command -> CONTINUE SEMICOLON .

    IF              reduce using rule 12 (command -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 12 (command -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 12 (command -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 12 (command -> CONTINUE SEMICOLON .)
    SUB             reduce using rule 12 (command -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 12 (command -> CONTINUE SEMICOLON .)
    DO              reduce using rule 12 (command -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 12 (command -> CONTINUE SEMICOLON .)
    ID_SC           reduce using rule 12 (command -> CONTINUE SEMICOLON .)
    ID_LI           reduce using rule 12 (command -> CONTINUE SEMICOLON .)
    XOR             reduce using rule 12 (command -> CONTINUE SEMICOLON .)
    INCREMENT       reduce using rule 12 (command -> CONTINUE SEMICOLON .)
    DECREMENT       reduce using rule 12 (command -> CONTINUE SEMICOLON .)
    LPAREN          reduce using rule 12 (command -> CONTINUE SEMICOLON .)
    NUMBER          reduce using rule 12 (command -> CONTINUE SEMICOLON .)
    TRUE            reduce using rule 12 (command -> CONTINUE SEMICOLON .)
    FALSE           reduce using rule 12 (command -> CONTINUE SEMICOLON .)
    ID              reduce using rule 12 (command -> CONTINUE SEMICOLON .)
    $end            reduce using rule 12 (command -> CONTINUE SEMICOLON .)
    RBRACE          reduce using rule 12 (command -> CONTINUE SEMICOLON .)


state 44

    (26) function -> SUB ID . LPAREN RPAREN LBRACE blockcode RBRACE
    (27) function -> SUB ID . LPAREN function_assignments RPAREN LBRACE blockcode RBRACE

    LPAREN          shift and go to state 88


state 45

    (30) call -> ID LPAREN . RPAREN
    (31) call -> ID LPAREN . function_assignments RPAREN
    (28) function_assignments -> . exp
    (29) function_assignments -> . exp COMMA function_assignments
    (32) exp -> . ID_SC EQUALS exp_lor
    (33) exp -> . ID_LI EQUALS exp_lor
    (34) exp -> . ID_SC MINUSEQUAL exp_lor
    (35) exp -> . ID_SC PLUSEQUAL exp_lor
    (36) exp -> . ID_SC MODEQUAL exp_lor
    (37) exp -> . ID_SC DIVEQUAL exp_lor
    (38) exp -> . ID_SC TIMESEQUAL exp_lor
    (39) exp -> . exp_lor
    (40) exp_lor -> . exp_lor LOR exp_land
    (41) exp_lor -> . exp_land
    (42) exp_land -> . exp_land LAND exp_or
    (43) exp_land -> . exp_or
    (44) exp_or -> . exp_or OR exp_and
    (45) exp_or -> . exp_and
    (46) exp_and -> . exp_and AND exp_comp
    (47) exp_and -> . exp_comp_eq
    (48) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (49) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (50) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (51) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (52) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (53) exp_comp_eq -> . exp_comp
    (54) exp_comp -> . exp_comp GT exp_plusminus
    (55) exp_comp -> . exp_comp LT exp_plusminus
    (56) exp_comp -> . exp_comp GE exp_plusminus
    (57) exp_comp -> . exp_comp LE exp_plusminus
    (58) exp_comp -> . exp_comp SLT exp_plusminus
    (59) exp_comp -> . exp_comp SGT exp_plusminus
    (60) exp_comp -> . exp_comp SGE exp_plusminus
    (61) exp_comp -> . exp_comp SLE exp_plusminus
    (62) exp_comp -> . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    RPAREN          shift and go to state 89
    ID_SC           shift and go to state 16
    ID_LI           shift and go to state 18
    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    function_assignments           shift and go to state 90
    exp                            shift and go to state 91
    exp_lor                        shift and go to state 17
    exp_land                       shift and go to state 19
    exp_or                         shift and go to state 20
    exp_and                        shift and go to state 21
    exp_comp                       shift and go to state 22
    exp_comp_eq                    shift and go to state 23
    exp_plusminus                  shift and go to state 24
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 46

    (20) interations -> FOR LPAREN . for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (24) for_assignments -> . exp
    (25) for_assignments -> . exp COMMA for_assignments
    (32) exp -> . ID_SC EQUALS exp_lor
    (33) exp -> . ID_LI EQUALS exp_lor
    (34) exp -> . ID_SC MINUSEQUAL exp_lor
    (35) exp -> . ID_SC PLUSEQUAL exp_lor
    (36) exp -> . ID_SC MODEQUAL exp_lor
    (37) exp -> . ID_SC DIVEQUAL exp_lor
    (38) exp -> . ID_SC TIMESEQUAL exp_lor
    (39) exp -> . exp_lor
    (40) exp_lor -> . exp_lor LOR exp_land
    (41) exp_lor -> . exp_land
    (42) exp_land -> . exp_land LAND exp_or
    (43) exp_land -> . exp_or
    (44) exp_or -> . exp_or OR exp_and
    (45) exp_or -> . exp_and
    (46) exp_and -> . exp_and AND exp_comp
    (47) exp_and -> . exp_comp_eq
    (48) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (49) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (50) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (51) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (52) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (53) exp_comp_eq -> . exp_comp
    (54) exp_comp -> . exp_comp GT exp_plusminus
    (55) exp_comp -> . exp_comp LT exp_plusminus
    (56) exp_comp -> . exp_comp GE exp_plusminus
    (57) exp_comp -> . exp_comp LE exp_plusminus
    (58) exp_comp -> . exp_comp SLT exp_plusminus
    (59) exp_comp -> . exp_comp SGT exp_plusminus
    (60) exp_comp -> . exp_comp SGE exp_plusminus
    (61) exp_comp -> . exp_comp SLE exp_plusminus
    (62) exp_comp -> . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    ID_SC           shift and go to state 16
    ID_LI           shift and go to state 18
    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    for_assignments                shift and go to state 92
    exp                            shift and go to state 93
    exp_lor                        shift and go to state 17
    exp_land                       shift and go to state 19
    exp_or                         shift and go to state 20
    exp_and                        shift and go to state 21
    exp_comp                       shift and go to state 22
    exp_comp_eq                    shift and go to state 23
    exp_plusminus                  shift and go to state 24
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 47

    (21) interations -> DO LBRACE . blockcode RBRACE WHILE LPAREN exp RPAREN
    (5) blockcode -> . command
    (6) blockcode -> . blockcode command
    (7) command -> . interations
    (8) command -> . IF LPAREN exp RPAREN if_statement
    (9) command -> . exp SEMICOLON
    (10) command -> . RETURN exp SEMICOLON
    (11) command -> . BREAK SEMICOLON
    (12) command -> . CONTINUE SEMICOLON
    (20) interations -> . FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (21) interations -> . DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN
    (22) interations -> . WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE
    (23) interations -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (32) exp -> . ID_SC EQUALS exp_lor
    (33) exp -> . ID_LI EQUALS exp_lor
    (34) exp -> . ID_SC MINUSEQUAL exp_lor
    (35) exp -> . ID_SC PLUSEQUAL exp_lor
    (36) exp -> . ID_SC MODEQUAL exp_lor
    (37) exp -> . ID_SC DIVEQUAL exp_lor
    (38) exp -> . ID_SC TIMESEQUAL exp_lor
    (39) exp -> . exp_lor
    (40) exp_lor -> . exp_lor LOR exp_land
    (41) exp_lor -> . exp_land
    (42) exp_land -> . exp_land LAND exp_or
    (43) exp_land -> . exp_or
    (44) exp_or -> . exp_or OR exp_and
    (45) exp_or -> . exp_and
    (46) exp_and -> . exp_and AND exp_comp
    (47) exp_and -> . exp_comp_eq
    (48) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (49) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (50) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (51) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (52) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (53) exp_comp_eq -> . exp_comp
    (54) exp_comp -> . exp_comp GT exp_plusminus
    (55) exp_comp -> . exp_comp LT exp_plusminus
    (56) exp_comp -> . exp_comp GE exp_plusminus
    (57) exp_comp -> . exp_comp LE exp_plusminus
    (58) exp_comp -> . exp_comp SLT exp_plusminus
    (59) exp_comp -> . exp_comp SGT exp_plusminus
    (60) exp_comp -> . exp_comp SGE exp_plusminus
    (61) exp_comp -> . exp_comp SLE exp_plusminus
    (62) exp_comp -> . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    IF              shift and go to state 5
    RETURN          shift and go to state 8
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    FOR             shift and go to state 13
    DO              shift and go to state 14
    WHILE           shift and go to state 15
    ID_SC           shift and go to state 16
    ID_LI           shift and go to state 18
    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    blockcode                      shift and go to state 94
    exp                            shift and go to state 7
    command                        shift and go to state 95
    interations                    shift and go to state 4
    exp_lor                        shift and go to state 17
    exp_land                       shift and go to state 19
    exp_or                         shift and go to state 20
    exp_and                        shift and go to state 21
    exp_comp                       shift and go to state 22
    exp_comp_eq                    shift and go to state 23
    exp_plusminus                  shift and go to state 24
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 48

    (22) interations -> WHILE LPAREN . exp RPAREN LBRACE blockcode RBRACE
    (23) interations -> WHILE LPAREN . exp RPAREN LBRACE RBRACE
    (32) exp -> . ID_SC EQUALS exp_lor
    (33) exp -> . ID_LI EQUALS exp_lor
    (34) exp -> . ID_SC MINUSEQUAL exp_lor
    (35) exp -> . ID_SC PLUSEQUAL exp_lor
    (36) exp -> . ID_SC MODEQUAL exp_lor
    (37) exp -> . ID_SC DIVEQUAL exp_lor
    (38) exp -> . ID_SC TIMESEQUAL exp_lor
    (39) exp -> . exp_lor
    (40) exp_lor -> . exp_lor LOR exp_land
    (41) exp_lor -> . exp_land
    (42) exp_land -> . exp_land LAND exp_or
    (43) exp_land -> . exp_or
    (44) exp_or -> . exp_or OR exp_and
    (45) exp_or -> . exp_and
    (46) exp_and -> . exp_and AND exp_comp
    (47) exp_and -> . exp_comp_eq
    (48) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (49) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (50) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (51) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (52) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (53) exp_comp_eq -> . exp_comp
    (54) exp_comp -> . exp_comp GT exp_plusminus
    (55) exp_comp -> . exp_comp LT exp_plusminus
    (56) exp_comp -> . exp_comp GE exp_plusminus
    (57) exp_comp -> . exp_comp LE exp_plusminus
    (58) exp_comp -> . exp_comp SLT exp_plusminus
    (59) exp_comp -> . exp_comp SGT exp_plusminus
    (60) exp_comp -> . exp_comp SGE exp_plusminus
    (61) exp_comp -> . exp_comp SLE exp_plusminus
    (62) exp_comp -> . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    ID_SC           shift and go to state 16
    ID_LI           shift and go to state 18
    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    exp                            shift and go to state 96
    exp_lor                        shift and go to state 17
    exp_land                       shift and go to state 19
    exp_or                         shift and go to state 20
    exp_and                        shift and go to state 21
    exp_comp                       shift and go to state 22
    exp_comp_eq                    shift and go to state 23
    exp_plusminus                  shift and go to state 24
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 49

    (32) exp -> ID_SC EQUALS . exp_lor
    (40) exp_lor -> . exp_lor LOR exp_land
    (41) exp_lor -> . exp_land
    (42) exp_land -> . exp_land LAND exp_or
    (43) exp_land -> . exp_or
    (44) exp_or -> . exp_or OR exp_and
    (45) exp_or -> . exp_and
    (46) exp_and -> . exp_and AND exp_comp
    (47) exp_and -> . exp_comp_eq
    (48) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (49) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (50) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (51) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (52) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (53) exp_comp_eq -> . exp_comp
    (54) exp_comp -> . exp_comp GT exp_plusminus
    (55) exp_comp -> . exp_comp LT exp_plusminus
    (56) exp_comp -> . exp_comp GE exp_plusminus
    (57) exp_comp -> . exp_comp LE exp_plusminus
    (58) exp_comp -> . exp_comp SLT exp_plusminus
    (59) exp_comp -> . exp_comp SGT exp_plusminus
    (60) exp_comp -> . exp_comp SGE exp_plusminus
    (61) exp_comp -> . exp_comp SLE exp_plusminus
    (62) exp_comp -> . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    ID_SC           shift and go to state 81
    LPAREN          shift and go to state 6
    ID_LI           shift and go to state 82
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    exp_lor                        shift and go to state 97
    exp_land                       shift and go to state 19
    exp_or                         shift and go to state 20
    exp_and                        shift and go to state 21
    exp_comp                       shift and go to state 22
    exp_comp_eq                    shift and go to state 23
    exp_plusminus                  shift and go to state 24
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 50

    (34) exp -> ID_SC MINUSEQUAL . exp_lor
    (40) exp_lor -> . exp_lor LOR exp_land
    (41) exp_lor -> . exp_land
    (42) exp_land -> . exp_land LAND exp_or
    (43) exp_land -> . exp_or
    (44) exp_or -> . exp_or OR exp_and
    (45) exp_or -> . exp_and
    (46) exp_and -> . exp_and AND exp_comp
    (47) exp_and -> . exp_comp_eq
    (48) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (49) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (50) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (51) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (52) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (53) exp_comp_eq -> . exp_comp
    (54) exp_comp -> . exp_comp GT exp_plusminus
    (55) exp_comp -> . exp_comp LT exp_plusminus
    (56) exp_comp -> . exp_comp GE exp_plusminus
    (57) exp_comp -> . exp_comp LE exp_plusminus
    (58) exp_comp -> . exp_comp SLT exp_plusminus
    (59) exp_comp -> . exp_comp SGT exp_plusminus
    (60) exp_comp -> . exp_comp SGE exp_plusminus
    (61) exp_comp -> . exp_comp SLE exp_plusminus
    (62) exp_comp -> . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    ID_SC           shift and go to state 81
    LPAREN          shift and go to state 6
    ID_LI           shift and go to state 82
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    exp_lor                        shift and go to state 98
    exp_land                       shift and go to state 19
    exp_or                         shift and go to state 20
    exp_and                        shift and go to state 21
    exp_comp                       shift and go to state 22
    exp_comp_eq                    shift and go to state 23
    exp_plusminus                  shift and go to state 24
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 51

    (35) exp -> ID_SC PLUSEQUAL . exp_lor
    (40) exp_lor -> . exp_lor LOR exp_land
    (41) exp_lor -> . exp_land
    (42) exp_land -> . exp_land LAND exp_or
    (43) exp_land -> . exp_or
    (44) exp_or -> . exp_or OR exp_and
    (45) exp_or -> . exp_and
    (46) exp_and -> . exp_and AND exp_comp
    (47) exp_and -> . exp_comp_eq
    (48) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (49) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (50) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (51) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (52) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (53) exp_comp_eq -> . exp_comp
    (54) exp_comp -> . exp_comp GT exp_plusminus
    (55) exp_comp -> . exp_comp LT exp_plusminus
    (56) exp_comp -> . exp_comp GE exp_plusminus
    (57) exp_comp -> . exp_comp LE exp_plusminus
    (58) exp_comp -> . exp_comp SLT exp_plusminus
    (59) exp_comp -> . exp_comp SGT exp_plusminus
    (60) exp_comp -> . exp_comp SGE exp_plusminus
    (61) exp_comp -> . exp_comp SLE exp_plusminus
    (62) exp_comp -> . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    ID_SC           shift and go to state 81
    LPAREN          shift and go to state 6
    ID_LI           shift and go to state 82
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    exp_lor                        shift and go to state 99
    exp_land                       shift and go to state 19
    exp_or                         shift and go to state 20
    exp_and                        shift and go to state 21
    exp_comp                       shift and go to state 22
    exp_comp_eq                    shift and go to state 23
    exp_plusminus                  shift and go to state 24
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 52

    (36) exp -> ID_SC MODEQUAL . exp_lor
    (40) exp_lor -> . exp_lor LOR exp_land
    (41) exp_lor -> . exp_land
    (42) exp_land -> . exp_land LAND exp_or
    (43) exp_land -> . exp_or
    (44) exp_or -> . exp_or OR exp_and
    (45) exp_or -> . exp_and
    (46) exp_and -> . exp_and AND exp_comp
    (47) exp_and -> . exp_comp_eq
    (48) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (49) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (50) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (51) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (52) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (53) exp_comp_eq -> . exp_comp
    (54) exp_comp -> . exp_comp GT exp_plusminus
    (55) exp_comp -> . exp_comp LT exp_plusminus
    (56) exp_comp -> . exp_comp GE exp_plusminus
    (57) exp_comp -> . exp_comp LE exp_plusminus
    (58) exp_comp -> . exp_comp SLT exp_plusminus
    (59) exp_comp -> . exp_comp SGT exp_plusminus
    (60) exp_comp -> . exp_comp SGE exp_plusminus
    (61) exp_comp -> . exp_comp SLE exp_plusminus
    (62) exp_comp -> . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    ID_SC           shift and go to state 81
    LPAREN          shift and go to state 6
    ID_LI           shift and go to state 82
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    exp_lor                        shift and go to state 100
    exp_land                       shift and go to state 19
    exp_or                         shift and go to state 20
    exp_and                        shift and go to state 21
    exp_comp                       shift and go to state 22
    exp_comp_eq                    shift and go to state 23
    exp_plusminus                  shift and go to state 24
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 53

    (37) exp -> ID_SC DIVEQUAL . exp_lor
    (40) exp_lor -> . exp_lor LOR exp_land
    (41) exp_lor -> . exp_land
    (42) exp_land -> . exp_land LAND exp_or
    (43) exp_land -> . exp_or
    (44) exp_or -> . exp_or OR exp_and
    (45) exp_or -> . exp_and
    (46) exp_and -> . exp_and AND exp_comp
    (47) exp_and -> . exp_comp_eq
    (48) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (49) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (50) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (51) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (52) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (53) exp_comp_eq -> . exp_comp
    (54) exp_comp -> . exp_comp GT exp_plusminus
    (55) exp_comp -> . exp_comp LT exp_plusminus
    (56) exp_comp -> . exp_comp GE exp_plusminus
    (57) exp_comp -> . exp_comp LE exp_plusminus
    (58) exp_comp -> . exp_comp SLT exp_plusminus
    (59) exp_comp -> . exp_comp SGT exp_plusminus
    (60) exp_comp -> . exp_comp SGE exp_plusminus
    (61) exp_comp -> . exp_comp SLE exp_plusminus
    (62) exp_comp -> . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    ID_SC           shift and go to state 81
    LPAREN          shift and go to state 6
    ID_LI           shift and go to state 82
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    exp_lor                        shift and go to state 101
    exp_land                       shift and go to state 19
    exp_or                         shift and go to state 20
    exp_and                        shift and go to state 21
    exp_comp                       shift and go to state 22
    exp_comp_eq                    shift and go to state 23
    exp_plusminus                  shift and go to state 24
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 54

    (38) exp -> ID_SC TIMESEQUAL . exp_lor
    (40) exp_lor -> . exp_lor LOR exp_land
    (41) exp_lor -> . exp_land
    (42) exp_land -> . exp_land LAND exp_or
    (43) exp_land -> . exp_or
    (44) exp_or -> . exp_or OR exp_and
    (45) exp_or -> . exp_and
    (46) exp_and -> . exp_and AND exp_comp
    (47) exp_and -> . exp_comp_eq
    (48) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (49) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (50) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (51) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (52) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (53) exp_comp_eq -> . exp_comp
    (54) exp_comp -> . exp_comp GT exp_plusminus
    (55) exp_comp -> . exp_comp LT exp_plusminus
    (56) exp_comp -> . exp_comp GE exp_plusminus
    (57) exp_comp -> . exp_comp LE exp_plusminus
    (58) exp_comp -> . exp_comp SLT exp_plusminus
    (59) exp_comp -> . exp_comp SGT exp_plusminus
    (60) exp_comp -> . exp_comp SGE exp_plusminus
    (61) exp_comp -> . exp_comp SLE exp_plusminus
    (62) exp_comp -> . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    ID_SC           shift and go to state 81
    LPAREN          shift and go to state 6
    ID_LI           shift and go to state 82
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    exp_lor                        shift and go to state 102
    exp_land                       shift and go to state 19
    exp_or                         shift and go to state 20
    exp_and                        shift and go to state 21
    exp_comp                       shift and go to state 22
    exp_comp_eq                    shift and go to state 23
    exp_plusminus                  shift and go to state 24
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 55

    (74) exp_decrement_increment -> ID_SC INCREMENT .

    TIMES           reduce using rule 74 (exp_decrement_increment -> ID_SC INCREMENT .)
    DIVIDE          reduce using rule 74 (exp_decrement_increment -> ID_SC INCREMENT .)
    MODULO          reduce using rule 74 (exp_decrement_increment -> ID_SC INCREMENT .)
    PLUS            reduce using rule 74 (exp_decrement_increment -> ID_SC INCREMENT .)
    MINUS           reduce using rule 74 (exp_decrement_increment -> ID_SC INCREMENT .)
    GT              reduce using rule 74 (exp_decrement_increment -> ID_SC INCREMENT .)
    LT              reduce using rule 74 (exp_decrement_increment -> ID_SC INCREMENT .)
    GE              reduce using rule 74 (exp_decrement_increment -> ID_SC INCREMENT .)
    LE              reduce using rule 74 (exp_decrement_increment -> ID_SC INCREMENT .)
    SLT             reduce using rule 74 (exp_decrement_increment -> ID_SC INCREMENT .)
    SGT             reduce using rule 74 (exp_decrement_increment -> ID_SC INCREMENT .)
    SGE             reduce using rule 74 (exp_decrement_increment -> ID_SC INCREMENT .)
    SLE             reduce using rule 74 (exp_decrement_increment -> ID_SC INCREMENT .)
    EQ              reduce using rule 74 (exp_decrement_increment -> ID_SC INCREMENT .)
    NE              reduce using rule 74 (exp_decrement_increment -> ID_SC INCREMENT .)
    SEQ             reduce using rule 74 (exp_decrement_increment -> ID_SC INCREMENT .)
    SNE             reduce using rule 74 (exp_decrement_increment -> ID_SC INCREMENT .)
    CMP             reduce using rule 74 (exp_decrement_increment -> ID_SC INCREMENT .)
    AND             reduce using rule 74 (exp_decrement_increment -> ID_SC INCREMENT .)
    OR              reduce using rule 74 (exp_decrement_increment -> ID_SC INCREMENT .)
    LAND            reduce using rule 74 (exp_decrement_increment -> ID_SC INCREMENT .)
    LOR             reduce using rule 74 (exp_decrement_increment -> ID_SC INCREMENT .)
    SEMICOLON       reduce using rule 74 (exp_decrement_increment -> ID_SC INCREMENT .)
    RPAREN          reduce using rule 74 (exp_decrement_increment -> ID_SC INCREMENT .)
    COMMA           reduce using rule 74 (exp_decrement_increment -> ID_SC INCREMENT .)


state 56

    (75) exp_decrement_increment -> ID_SC DECREMENT .

    TIMES           reduce using rule 75 (exp_decrement_increment -> ID_SC DECREMENT .)
    DIVIDE          reduce using rule 75 (exp_decrement_increment -> ID_SC DECREMENT .)
    MODULO          reduce using rule 75 (exp_decrement_increment -> ID_SC DECREMENT .)
    PLUS            reduce using rule 75 (exp_decrement_increment -> ID_SC DECREMENT .)
    MINUS           reduce using rule 75 (exp_decrement_increment -> ID_SC DECREMENT .)
    GT              reduce using rule 75 (exp_decrement_increment -> ID_SC DECREMENT .)
    LT              reduce using rule 75 (exp_decrement_increment -> ID_SC DECREMENT .)
    GE              reduce using rule 75 (exp_decrement_increment -> ID_SC DECREMENT .)
    LE              reduce using rule 75 (exp_decrement_increment -> ID_SC DECREMENT .)
    SLT             reduce using rule 75 (exp_decrement_increment -> ID_SC DECREMENT .)
    SGT             reduce using rule 75 (exp_decrement_increment -> ID_SC DECREMENT .)
    SGE             reduce using rule 75 (exp_decrement_increment -> ID_SC DECREMENT .)
    SLE             reduce using rule 75 (exp_decrement_increment -> ID_SC DECREMENT .)
    EQ              reduce using rule 75 (exp_decrement_increment -> ID_SC DECREMENT .)
    NE              reduce using rule 75 (exp_decrement_increment -> ID_SC DECREMENT .)
    SEQ             reduce using rule 75 (exp_decrement_increment -> ID_SC DECREMENT .)
    SNE             reduce using rule 75 (exp_decrement_increment -> ID_SC DECREMENT .)
    CMP             reduce using rule 75 (exp_decrement_increment -> ID_SC DECREMENT .)
    AND             reduce using rule 75 (exp_decrement_increment -> ID_SC DECREMENT .)
    OR              reduce using rule 75 (exp_decrement_increment -> ID_SC DECREMENT .)
    LAND            reduce using rule 75 (exp_decrement_increment -> ID_SC DECREMENT .)
    LOR             reduce using rule 75 (exp_decrement_increment -> ID_SC DECREMENT .)
    SEMICOLON       reduce using rule 75 (exp_decrement_increment -> ID_SC DECREMENT .)
    RPAREN          reduce using rule 75 (exp_decrement_increment -> ID_SC DECREMENT .)
    COMMA           reduce using rule 75 (exp_decrement_increment -> ID_SC DECREMENT .)


state 57

    (40) exp_lor -> exp_lor LOR . exp_land
    (42) exp_land -> . exp_land LAND exp_or
    (43) exp_land -> . exp_or
    (44) exp_or -> . exp_or OR exp_and
    (45) exp_or -> . exp_and
    (46) exp_and -> . exp_and AND exp_comp
    (47) exp_and -> . exp_comp_eq
    (48) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (49) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (50) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (51) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (52) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (53) exp_comp_eq -> . exp_comp
    (54) exp_comp -> . exp_comp GT exp_plusminus
    (55) exp_comp -> . exp_comp LT exp_plusminus
    (56) exp_comp -> . exp_comp GE exp_plusminus
    (57) exp_comp -> . exp_comp LE exp_plusminus
    (58) exp_comp -> . exp_comp SLT exp_plusminus
    (59) exp_comp -> . exp_comp SGT exp_plusminus
    (60) exp_comp -> . exp_comp SGE exp_plusminus
    (61) exp_comp -> . exp_comp SLE exp_plusminus
    (62) exp_comp -> . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    ID_SC           shift and go to state 81
    LPAREN          shift and go to state 6
    ID_LI           shift and go to state 82
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    exp_land                       shift and go to state 103
    exp_or                         shift and go to state 20
    exp_and                        shift and go to state 21
    exp_comp                       shift and go to state 22
    exp_comp_eq                    shift and go to state 23
    exp_plusminus                  shift and go to state 24
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 58

    (33) exp -> ID_LI EQUALS . exp_lor
    (40) exp_lor -> . exp_lor LOR exp_land
    (41) exp_lor -> . exp_land
    (42) exp_land -> . exp_land LAND exp_or
    (43) exp_land -> . exp_or
    (44) exp_or -> . exp_or OR exp_and
    (45) exp_or -> . exp_and
    (46) exp_and -> . exp_and AND exp_comp
    (47) exp_and -> . exp_comp_eq
    (48) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (49) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (50) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (51) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (52) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (53) exp_comp_eq -> . exp_comp
    (54) exp_comp -> . exp_comp GT exp_plusminus
    (55) exp_comp -> . exp_comp LT exp_plusminus
    (56) exp_comp -> . exp_comp GE exp_plusminus
    (57) exp_comp -> . exp_comp LE exp_plusminus
    (58) exp_comp -> . exp_comp SLT exp_plusminus
    (59) exp_comp -> . exp_comp SGT exp_plusminus
    (60) exp_comp -> . exp_comp SGE exp_plusminus
    (61) exp_comp -> . exp_comp SLE exp_plusminus
    (62) exp_comp -> . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    ID_SC           shift and go to state 81
    LPAREN          shift and go to state 6
    ID_LI           shift and go to state 82
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    exp_lor                        shift and go to state 104
    exp_land                       shift and go to state 19
    exp_or                         shift and go to state 20
    exp_and                        shift and go to state 21
    exp_comp                       shift and go to state 22
    exp_comp_eq                    shift and go to state 23
    exp_plusminus                  shift and go to state 24
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 59

    (42) exp_land -> exp_land LAND . exp_or
    (44) exp_or -> . exp_or OR exp_and
    (45) exp_or -> . exp_and
    (46) exp_and -> . exp_and AND exp_comp
    (47) exp_and -> . exp_comp_eq
    (48) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (49) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (50) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (51) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (52) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (53) exp_comp_eq -> . exp_comp
    (54) exp_comp -> . exp_comp GT exp_plusminus
    (55) exp_comp -> . exp_comp LT exp_plusminus
    (56) exp_comp -> . exp_comp GE exp_plusminus
    (57) exp_comp -> . exp_comp LE exp_plusminus
    (58) exp_comp -> . exp_comp SLT exp_plusminus
    (59) exp_comp -> . exp_comp SGT exp_plusminus
    (60) exp_comp -> . exp_comp SGE exp_plusminus
    (61) exp_comp -> . exp_comp SLE exp_plusminus
    (62) exp_comp -> . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    ID_SC           shift and go to state 81
    LPAREN          shift and go to state 6
    ID_LI           shift and go to state 82
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    exp_or                         shift and go to state 105
    exp_and                        shift and go to state 21
    exp_comp                       shift and go to state 22
    exp_comp_eq                    shift and go to state 23
    exp_plusminus                  shift and go to state 24
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 60

    (44) exp_or -> exp_or OR . exp_and
    (46) exp_and -> . exp_and AND exp_comp
    (47) exp_and -> . exp_comp_eq
    (48) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (49) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (50) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (51) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (52) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (53) exp_comp_eq -> . exp_comp
    (54) exp_comp -> . exp_comp GT exp_plusminus
    (55) exp_comp -> . exp_comp LT exp_plusminus
    (56) exp_comp -> . exp_comp GE exp_plusminus
    (57) exp_comp -> . exp_comp LE exp_plusminus
    (58) exp_comp -> . exp_comp SLT exp_plusminus
    (59) exp_comp -> . exp_comp SGT exp_plusminus
    (60) exp_comp -> . exp_comp SGE exp_plusminus
    (61) exp_comp -> . exp_comp SLE exp_plusminus
    (62) exp_comp -> . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    ID_SC           shift and go to state 81
    LPAREN          shift and go to state 6
    ID_LI           shift and go to state 82
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    exp_and                        shift and go to state 106
    exp_comp                       shift and go to state 22
    exp_comp_eq                    shift and go to state 23
    exp_plusminus                  shift and go to state 24
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 61

    (46) exp_and -> exp_and AND . exp_comp
    (54) exp_comp -> . exp_comp GT exp_plusminus
    (55) exp_comp -> . exp_comp LT exp_plusminus
    (56) exp_comp -> . exp_comp GE exp_plusminus
    (57) exp_comp -> . exp_comp LE exp_plusminus
    (58) exp_comp -> . exp_comp SLT exp_plusminus
    (59) exp_comp -> . exp_comp SGT exp_plusminus
    (60) exp_comp -> . exp_comp SGE exp_plusminus
    (61) exp_comp -> . exp_comp SLE exp_plusminus
    (62) exp_comp -> . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    ID_SC           shift and go to state 81
    LPAREN          shift and go to state 6
    ID_LI           shift and go to state 82
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    exp_comp                       shift and go to state 107
    exp_plusminus                  shift and go to state 24
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 62

    (54) exp_comp -> exp_comp GT . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    ID_SC           shift and go to state 81
    LPAREN          shift and go to state 6
    ID_LI           shift and go to state 82
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    exp_plusminus                  shift and go to state 108
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 63

    (55) exp_comp -> exp_comp LT . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    ID_SC           shift and go to state 81
    LPAREN          shift and go to state 6
    ID_LI           shift and go to state 82
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    exp_plusminus                  shift and go to state 109
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 64

    (56) exp_comp -> exp_comp GE . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    ID_SC           shift and go to state 81
    LPAREN          shift and go to state 6
    ID_LI           shift and go to state 82
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    exp_plusminus                  shift and go to state 110
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 65

    (57) exp_comp -> exp_comp LE . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    ID_SC           shift and go to state 81
    LPAREN          shift and go to state 6
    ID_LI           shift and go to state 82
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    exp_plusminus                  shift and go to state 111
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 66

    (58) exp_comp -> exp_comp SLT . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    ID_SC           shift and go to state 81
    LPAREN          shift and go to state 6
    ID_LI           shift and go to state 82
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    exp_plusminus                  shift and go to state 112
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 67

    (59) exp_comp -> exp_comp SGT . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    ID_SC           shift and go to state 81
    LPAREN          shift and go to state 6
    ID_LI           shift and go to state 82
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    exp_plusminus                  shift and go to state 113
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 68

    (60) exp_comp -> exp_comp SGE . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    ID_SC           shift and go to state 81
    LPAREN          shift and go to state 6
    ID_LI           shift and go to state 82
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    exp_plusminus                  shift and go to state 114
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 69

    (61) exp_comp -> exp_comp SLE . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    ID_SC           shift and go to state 81
    LPAREN          shift and go to state 6
    ID_LI           shift and go to state 82
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    exp_plusminus                  shift and go to state 115
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 70

    (48) exp_comp_eq -> exp_comp_eq EQ . exp_comp
    (54) exp_comp -> . exp_comp GT exp_plusminus
    (55) exp_comp -> . exp_comp LT exp_plusminus
    (56) exp_comp -> . exp_comp GE exp_plusminus
    (57) exp_comp -> . exp_comp LE exp_plusminus
    (58) exp_comp -> . exp_comp SLT exp_plusminus
    (59) exp_comp -> . exp_comp SGT exp_plusminus
    (60) exp_comp -> . exp_comp SGE exp_plusminus
    (61) exp_comp -> . exp_comp SLE exp_plusminus
    (62) exp_comp -> . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    ID_SC           shift and go to state 81
    LPAREN          shift and go to state 6
    ID_LI           shift and go to state 82
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    exp_comp                       shift and go to state 116
    exp_plusminus                  shift and go to state 24
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 71

    (49) exp_comp_eq -> exp_comp_eq NE . exp_comp
    (54) exp_comp -> . exp_comp GT exp_plusminus
    (55) exp_comp -> . exp_comp LT exp_plusminus
    (56) exp_comp -> . exp_comp GE exp_plusminus
    (57) exp_comp -> . exp_comp LE exp_plusminus
    (58) exp_comp -> . exp_comp SLT exp_plusminus
    (59) exp_comp -> . exp_comp SGT exp_plusminus
    (60) exp_comp -> . exp_comp SGE exp_plusminus
    (61) exp_comp -> . exp_comp SLE exp_plusminus
    (62) exp_comp -> . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    ID_SC           shift and go to state 81
    LPAREN          shift and go to state 6
    ID_LI           shift and go to state 82
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    exp_comp                       shift and go to state 117
    exp_plusminus                  shift and go to state 24
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 72

    (50) exp_comp_eq -> exp_comp_eq SEQ . exp_comp
    (54) exp_comp -> . exp_comp GT exp_plusminus
    (55) exp_comp -> . exp_comp LT exp_plusminus
    (56) exp_comp -> . exp_comp GE exp_plusminus
    (57) exp_comp -> . exp_comp LE exp_plusminus
    (58) exp_comp -> . exp_comp SLT exp_plusminus
    (59) exp_comp -> . exp_comp SGT exp_plusminus
    (60) exp_comp -> . exp_comp SGE exp_plusminus
    (61) exp_comp -> . exp_comp SLE exp_plusminus
    (62) exp_comp -> . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    ID_SC           shift and go to state 81
    LPAREN          shift and go to state 6
    ID_LI           shift and go to state 82
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    exp_comp                       shift and go to state 118
    exp_plusminus                  shift and go to state 24
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 73

    (51) exp_comp_eq -> exp_comp_eq SNE . exp_comp
    (54) exp_comp -> . exp_comp GT exp_plusminus
    (55) exp_comp -> . exp_comp LT exp_plusminus
    (56) exp_comp -> . exp_comp GE exp_plusminus
    (57) exp_comp -> . exp_comp LE exp_plusminus
    (58) exp_comp -> . exp_comp SLT exp_plusminus
    (59) exp_comp -> . exp_comp SGT exp_plusminus
    (60) exp_comp -> . exp_comp SGE exp_plusminus
    (61) exp_comp -> . exp_comp SLE exp_plusminus
    (62) exp_comp -> . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    ID_SC           shift and go to state 81
    LPAREN          shift and go to state 6
    ID_LI           shift and go to state 82
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    exp_comp                       shift and go to state 119
    exp_plusminus                  shift and go to state 24
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 74

    (52) exp_comp_eq -> exp_comp_eq CMP . exp_comp
    (54) exp_comp -> . exp_comp GT exp_plusminus
    (55) exp_comp -> . exp_comp LT exp_plusminus
    (56) exp_comp -> . exp_comp GE exp_plusminus
    (57) exp_comp -> . exp_comp LE exp_plusminus
    (58) exp_comp -> . exp_comp SLT exp_plusminus
    (59) exp_comp -> . exp_comp SGT exp_plusminus
    (60) exp_comp -> . exp_comp SGE exp_plusminus
    (61) exp_comp -> . exp_comp SLE exp_plusminus
    (62) exp_comp -> . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    ID_SC           shift and go to state 81
    LPAREN          shift and go to state 6
    ID_LI           shift and go to state 82
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    exp_comp                       shift and go to state 120
    exp_plusminus                  shift and go to state 24
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 75

    (63) exp_plusminus -> exp_plusminus PLUS . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    ID_SC           shift and go to state 81
    LPAREN          shift and go to state 6
    ID_LI           shift and go to state 82
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    exp_times_divides              shift and go to state 121
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 76

    (64) exp_plusminus -> exp_plusminus MINUS . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    ID_SC           shift and go to state 81
    LPAREN          shift and go to state 6
    ID_LI           shift and go to state 82
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    exp_times_divides              shift and go to state 122
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 77

    (66) exp_times_divides -> exp_times_divides TIMES . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    ID_SC           shift and go to state 81
    LPAREN          shift and go to state 6
    ID_LI           shift and go to state 82
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    exp_lnot                       shift and go to state 123
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 78

    (67) exp_times_divides -> exp_times_divides DIVIDE . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    ID_SC           shift and go to state 81
    LPAREN          shift and go to state 6
    ID_LI           shift and go to state 82
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    exp_lnot                       shift and go to state 124
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 79

    (68) exp_times_divides -> exp_times_divides MODULO . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    ID_SC           shift and go to state 81
    LPAREN          shift and go to state 6
    ID_LI           shift and go to state 82
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    exp_lnot                       shift and go to state 125
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 80

    (70) exp_lnot -> XOR exp_lnot .

    TIMES           reduce using rule 70 (exp_lnot -> XOR exp_lnot .)
    DIVIDE          reduce using rule 70 (exp_lnot -> XOR exp_lnot .)
    MODULO          reduce using rule 70 (exp_lnot -> XOR exp_lnot .)
    PLUS            reduce using rule 70 (exp_lnot -> XOR exp_lnot .)
    MINUS           reduce using rule 70 (exp_lnot -> XOR exp_lnot .)
    GT              reduce using rule 70 (exp_lnot -> XOR exp_lnot .)
    LT              reduce using rule 70 (exp_lnot -> XOR exp_lnot .)
    GE              reduce using rule 70 (exp_lnot -> XOR exp_lnot .)
    LE              reduce using rule 70 (exp_lnot -> XOR exp_lnot .)
    SLT             reduce using rule 70 (exp_lnot -> XOR exp_lnot .)
    SGT             reduce using rule 70 (exp_lnot -> XOR exp_lnot .)
    SGE             reduce using rule 70 (exp_lnot -> XOR exp_lnot .)
    SLE             reduce using rule 70 (exp_lnot -> XOR exp_lnot .)
    EQ              reduce using rule 70 (exp_lnot -> XOR exp_lnot .)
    NE              reduce using rule 70 (exp_lnot -> XOR exp_lnot .)
    SEQ             reduce using rule 70 (exp_lnot -> XOR exp_lnot .)
    SNE             reduce using rule 70 (exp_lnot -> XOR exp_lnot .)
    CMP             reduce using rule 70 (exp_lnot -> XOR exp_lnot .)
    AND             reduce using rule 70 (exp_lnot -> XOR exp_lnot .)
    OR              reduce using rule 70 (exp_lnot -> XOR exp_lnot .)
    LAND            reduce using rule 70 (exp_lnot -> XOR exp_lnot .)
    LOR             reduce using rule 70 (exp_lnot -> XOR exp_lnot .)
    SEMICOLON       reduce using rule 70 (exp_lnot -> XOR exp_lnot .)
    RPAREN          reduce using rule 70 (exp_lnot -> XOR exp_lnot .)
    COMMA           reduce using rule 70 (exp_lnot -> XOR exp_lnot .)


state 81

    (74) exp_decrement_increment -> ID_SC . INCREMENT
    (75) exp_decrement_increment -> ID_SC . DECREMENT
    (78) exp_lastlayer -> ID_SC .

    INCREMENT       shift and go to state 55
    DECREMENT       shift and go to state 56
    TIMES           reduce using rule 78 (exp_lastlayer -> ID_SC .)
    DIVIDE          reduce using rule 78 (exp_lastlayer -> ID_SC .)
    MODULO          reduce using rule 78 (exp_lastlayer -> ID_SC .)
    PLUS            reduce using rule 78 (exp_lastlayer -> ID_SC .)
    MINUS           reduce using rule 78 (exp_lastlayer -> ID_SC .)
    GT              reduce using rule 78 (exp_lastlayer -> ID_SC .)
    LT              reduce using rule 78 (exp_lastlayer -> ID_SC .)
    GE              reduce using rule 78 (exp_lastlayer -> ID_SC .)
    LE              reduce using rule 78 (exp_lastlayer -> ID_SC .)
    SLT             reduce using rule 78 (exp_lastlayer -> ID_SC .)
    SGT             reduce using rule 78 (exp_lastlayer -> ID_SC .)
    SGE             reduce using rule 78 (exp_lastlayer -> ID_SC .)
    SLE             reduce using rule 78 (exp_lastlayer -> ID_SC .)
    EQ              reduce using rule 78 (exp_lastlayer -> ID_SC .)
    NE              reduce using rule 78 (exp_lastlayer -> ID_SC .)
    SEQ             reduce using rule 78 (exp_lastlayer -> ID_SC .)
    SNE             reduce using rule 78 (exp_lastlayer -> ID_SC .)
    CMP             reduce using rule 78 (exp_lastlayer -> ID_SC .)
    AND             reduce using rule 78 (exp_lastlayer -> ID_SC .)
    OR              reduce using rule 78 (exp_lastlayer -> ID_SC .)
    LAND            reduce using rule 78 (exp_lastlayer -> ID_SC .)
    LOR             reduce using rule 78 (exp_lastlayer -> ID_SC .)
    SEMICOLON       reduce using rule 78 (exp_lastlayer -> ID_SC .)
    RPAREN          reduce using rule 78 (exp_lastlayer -> ID_SC .)
    COMMA           reduce using rule 78 (exp_lastlayer -> ID_SC .)


state 82

    (79) exp_lastlayer -> ID_LI .

    TIMES           reduce using rule 79 (exp_lastlayer -> ID_LI .)
    DIVIDE          reduce using rule 79 (exp_lastlayer -> ID_LI .)
    MODULO          reduce using rule 79 (exp_lastlayer -> ID_LI .)
    PLUS            reduce using rule 79 (exp_lastlayer -> ID_LI .)
    MINUS           reduce using rule 79 (exp_lastlayer -> ID_LI .)
    GT              reduce using rule 79 (exp_lastlayer -> ID_LI .)
    LT              reduce using rule 79 (exp_lastlayer -> ID_LI .)
    GE              reduce using rule 79 (exp_lastlayer -> ID_LI .)
    LE              reduce using rule 79 (exp_lastlayer -> ID_LI .)
    SLT             reduce using rule 79 (exp_lastlayer -> ID_LI .)
    SGT             reduce using rule 79 (exp_lastlayer -> ID_LI .)
    SGE             reduce using rule 79 (exp_lastlayer -> ID_LI .)
    SLE             reduce using rule 79 (exp_lastlayer -> ID_LI .)
    EQ              reduce using rule 79 (exp_lastlayer -> ID_LI .)
    NE              reduce using rule 79 (exp_lastlayer -> ID_LI .)
    SEQ             reduce using rule 79 (exp_lastlayer -> ID_LI .)
    SNE             reduce using rule 79 (exp_lastlayer -> ID_LI .)
    CMP             reduce using rule 79 (exp_lastlayer -> ID_LI .)
    AND             reduce using rule 79 (exp_lastlayer -> ID_LI .)
    OR              reduce using rule 79 (exp_lastlayer -> ID_LI .)
    LAND            reduce using rule 79 (exp_lastlayer -> ID_LI .)
    LOR             reduce using rule 79 (exp_lastlayer -> ID_LI .)
    SEMICOLON       reduce using rule 79 (exp_lastlayer -> ID_LI .)
    RPAREN          reduce using rule 79 (exp_lastlayer -> ID_LI .)
    COMMA           reduce using rule 79 (exp_lastlayer -> ID_LI .)


state 83

    (72) exp_decrement_increment -> INCREMENT ID_SC .

    TIMES           reduce using rule 72 (exp_decrement_increment -> INCREMENT ID_SC .)
    DIVIDE          reduce using rule 72 (exp_decrement_increment -> INCREMENT ID_SC .)
    MODULO          reduce using rule 72 (exp_decrement_increment -> INCREMENT ID_SC .)
    PLUS            reduce using rule 72 (exp_decrement_increment -> INCREMENT ID_SC .)
    MINUS           reduce using rule 72 (exp_decrement_increment -> INCREMENT ID_SC .)
    GT              reduce using rule 72 (exp_decrement_increment -> INCREMENT ID_SC .)
    LT              reduce using rule 72 (exp_decrement_increment -> INCREMENT ID_SC .)
    GE              reduce using rule 72 (exp_decrement_increment -> INCREMENT ID_SC .)
    LE              reduce using rule 72 (exp_decrement_increment -> INCREMENT ID_SC .)
    SLT             reduce using rule 72 (exp_decrement_increment -> INCREMENT ID_SC .)
    SGT             reduce using rule 72 (exp_decrement_increment -> INCREMENT ID_SC .)
    SGE             reduce using rule 72 (exp_decrement_increment -> INCREMENT ID_SC .)
    SLE             reduce using rule 72 (exp_decrement_increment -> INCREMENT ID_SC .)
    EQ              reduce using rule 72 (exp_decrement_increment -> INCREMENT ID_SC .)
    NE              reduce using rule 72 (exp_decrement_increment -> INCREMENT ID_SC .)
    SEQ             reduce using rule 72 (exp_decrement_increment -> INCREMENT ID_SC .)
    SNE             reduce using rule 72 (exp_decrement_increment -> INCREMENT ID_SC .)
    CMP             reduce using rule 72 (exp_decrement_increment -> INCREMENT ID_SC .)
    AND             reduce using rule 72 (exp_decrement_increment -> INCREMENT ID_SC .)
    OR              reduce using rule 72 (exp_decrement_increment -> INCREMENT ID_SC .)
    LAND            reduce using rule 72 (exp_decrement_increment -> INCREMENT ID_SC .)
    LOR             reduce using rule 72 (exp_decrement_increment -> INCREMENT ID_SC .)
    SEMICOLON       reduce using rule 72 (exp_decrement_increment -> INCREMENT ID_SC .)
    RPAREN          reduce using rule 72 (exp_decrement_increment -> INCREMENT ID_SC .)
    COMMA           reduce using rule 72 (exp_decrement_increment -> INCREMENT ID_SC .)


state 84

    (73) exp_decrement_increment -> DECREMENT ID_SC .

    TIMES           reduce using rule 73 (exp_decrement_increment -> DECREMENT ID_SC .)
    DIVIDE          reduce using rule 73 (exp_decrement_increment -> DECREMENT ID_SC .)
    MODULO          reduce using rule 73 (exp_decrement_increment -> DECREMENT ID_SC .)
    PLUS            reduce using rule 73 (exp_decrement_increment -> DECREMENT ID_SC .)
    MINUS           reduce using rule 73 (exp_decrement_increment -> DECREMENT ID_SC .)
    GT              reduce using rule 73 (exp_decrement_increment -> DECREMENT ID_SC .)
    LT              reduce using rule 73 (exp_decrement_increment -> DECREMENT ID_SC .)
    GE              reduce using rule 73 (exp_decrement_increment -> DECREMENT ID_SC .)
    LE              reduce using rule 73 (exp_decrement_increment -> DECREMENT ID_SC .)
    SLT             reduce using rule 73 (exp_decrement_increment -> DECREMENT ID_SC .)
    SGT             reduce using rule 73 (exp_decrement_increment -> DECREMENT ID_SC .)
    SGE             reduce using rule 73 (exp_decrement_increment -> DECREMENT ID_SC .)
    SLE             reduce using rule 73 (exp_decrement_increment -> DECREMENT ID_SC .)
    EQ              reduce using rule 73 (exp_decrement_increment -> DECREMENT ID_SC .)
    NE              reduce using rule 73 (exp_decrement_increment -> DECREMENT ID_SC .)
    SEQ             reduce using rule 73 (exp_decrement_increment -> DECREMENT ID_SC .)
    SNE             reduce using rule 73 (exp_decrement_increment -> DECREMENT ID_SC .)
    CMP             reduce using rule 73 (exp_decrement_increment -> DECREMENT ID_SC .)
    AND             reduce using rule 73 (exp_decrement_increment -> DECREMENT ID_SC .)
    OR              reduce using rule 73 (exp_decrement_increment -> DECREMENT ID_SC .)
    LAND            reduce using rule 73 (exp_decrement_increment -> DECREMENT ID_SC .)
    LOR             reduce using rule 73 (exp_decrement_increment -> DECREMENT ID_SC .)
    SEMICOLON       reduce using rule 73 (exp_decrement_increment -> DECREMENT ID_SC .)
    RPAREN          reduce using rule 73 (exp_decrement_increment -> DECREMENT ID_SC .)
    COMMA           reduce using rule 73 (exp_decrement_increment -> DECREMENT ID_SC .)


state 85

    (8) command -> IF LPAREN exp . RPAREN if_statement

    RPAREN          shift and go to state 126


state 86

    (77) exp_lastlayer -> LPAREN exp RPAREN .

    TIMES           reduce using rule 77 (exp_lastlayer -> LPAREN exp RPAREN .)
    DIVIDE          reduce using rule 77 (exp_lastlayer -> LPAREN exp RPAREN .)
    MODULO          reduce using rule 77 (exp_lastlayer -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 77 (exp_lastlayer -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 77 (exp_lastlayer -> LPAREN exp RPAREN .)
    GT              reduce using rule 77 (exp_lastlayer -> LPAREN exp RPAREN .)
    LT              reduce using rule 77 (exp_lastlayer -> LPAREN exp RPAREN .)
    GE              reduce using rule 77 (exp_lastlayer -> LPAREN exp RPAREN .)
    LE              reduce using rule 77 (exp_lastlayer -> LPAREN exp RPAREN .)
    SLT             reduce using rule 77 (exp_lastlayer -> LPAREN exp RPAREN .)
    SGT             reduce using rule 77 (exp_lastlayer -> LPAREN exp RPAREN .)
    SGE             reduce using rule 77 (exp_lastlayer -> LPAREN exp RPAREN .)
    SLE             reduce using rule 77 (exp_lastlayer -> LPAREN exp RPAREN .)
    EQ              reduce using rule 77 (exp_lastlayer -> LPAREN exp RPAREN .)
    NE              reduce using rule 77 (exp_lastlayer -> LPAREN exp RPAREN .)
    SEQ             reduce using rule 77 (exp_lastlayer -> LPAREN exp RPAREN .)
    SNE             reduce using rule 77 (exp_lastlayer -> LPAREN exp RPAREN .)
    CMP             reduce using rule 77 (exp_lastlayer -> LPAREN exp RPAREN .)
    AND             reduce using rule 77 (exp_lastlayer -> LPAREN exp RPAREN .)
    OR              reduce using rule 77 (exp_lastlayer -> LPAREN exp RPAREN .)
    LAND            reduce using rule 77 (exp_lastlayer -> LPAREN exp RPAREN .)
    LOR             reduce using rule 77 (exp_lastlayer -> LPAREN exp RPAREN .)
    SEMICOLON       reduce using rule 77 (exp_lastlayer -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 77 (exp_lastlayer -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 77 (exp_lastlayer -> LPAREN exp RPAREN .)


state 87

    (10) command -> RETURN exp SEMICOLON .

    IF              reduce using rule 10 (command -> RETURN exp SEMICOLON .)
    RETURN          reduce using rule 10 (command -> RETURN exp SEMICOLON .)
    BREAK           reduce using rule 10 (command -> RETURN exp SEMICOLON .)
    CONTINUE        reduce using rule 10 (command -> RETURN exp SEMICOLON .)
    SUB             reduce using rule 10 (command -> RETURN exp SEMICOLON .)
    FOR             reduce using rule 10 (command -> RETURN exp SEMICOLON .)
    DO              reduce using rule 10 (command -> RETURN exp SEMICOLON .)
    WHILE           reduce using rule 10 (command -> RETURN exp SEMICOLON .)
    ID_SC           reduce using rule 10 (command -> RETURN exp SEMICOLON .)
    ID_LI           reduce using rule 10 (command -> RETURN exp SEMICOLON .)
    XOR             reduce using rule 10 (command -> RETURN exp SEMICOLON .)
    INCREMENT       reduce using rule 10 (command -> RETURN exp SEMICOLON .)
    DECREMENT       reduce using rule 10 (command -> RETURN exp SEMICOLON .)
    LPAREN          reduce using rule 10 (command -> RETURN exp SEMICOLON .)
    NUMBER          reduce using rule 10 (command -> RETURN exp SEMICOLON .)
    TRUE            reduce using rule 10 (command -> RETURN exp SEMICOLON .)
    FALSE           reduce using rule 10 (command -> RETURN exp SEMICOLON .)
    ID              reduce using rule 10 (command -> RETURN exp SEMICOLON .)
    $end            reduce using rule 10 (command -> RETURN exp SEMICOLON .)
    RBRACE          reduce using rule 10 (command -> RETURN exp SEMICOLON .)


state 88

    (26) function -> SUB ID LPAREN . RPAREN LBRACE blockcode RBRACE
    (27) function -> SUB ID LPAREN . function_assignments RPAREN LBRACE blockcode RBRACE
    (28) function_assignments -> . exp
    (29) function_assignments -> . exp COMMA function_assignments
    (32) exp -> . ID_SC EQUALS exp_lor
    (33) exp -> . ID_LI EQUALS exp_lor
    (34) exp -> . ID_SC MINUSEQUAL exp_lor
    (35) exp -> . ID_SC PLUSEQUAL exp_lor
    (36) exp -> . ID_SC MODEQUAL exp_lor
    (37) exp -> . ID_SC DIVEQUAL exp_lor
    (38) exp -> . ID_SC TIMESEQUAL exp_lor
    (39) exp -> . exp_lor
    (40) exp_lor -> . exp_lor LOR exp_land
    (41) exp_lor -> . exp_land
    (42) exp_land -> . exp_land LAND exp_or
    (43) exp_land -> . exp_or
    (44) exp_or -> . exp_or OR exp_and
    (45) exp_or -> . exp_and
    (46) exp_and -> . exp_and AND exp_comp
    (47) exp_and -> . exp_comp_eq
    (48) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (49) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (50) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (51) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (52) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (53) exp_comp_eq -> . exp_comp
    (54) exp_comp -> . exp_comp GT exp_plusminus
    (55) exp_comp -> . exp_comp LT exp_plusminus
    (56) exp_comp -> . exp_comp GE exp_plusminus
    (57) exp_comp -> . exp_comp LE exp_plusminus
    (58) exp_comp -> . exp_comp SLT exp_plusminus
    (59) exp_comp -> . exp_comp SGT exp_plusminus
    (60) exp_comp -> . exp_comp SGE exp_plusminus
    (61) exp_comp -> . exp_comp SLE exp_plusminus
    (62) exp_comp -> . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    RPAREN          shift and go to state 127
    ID_SC           shift and go to state 16
    ID_LI           shift and go to state 18
    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    function_assignments           shift and go to state 128
    exp                            shift and go to state 91
    exp_lor                        shift and go to state 17
    exp_land                       shift and go to state 19
    exp_or                         shift and go to state 20
    exp_and                        shift and go to state 21
    exp_comp                       shift and go to state 22
    exp_comp_eq                    shift and go to state 23
    exp_plusminus                  shift and go to state 24
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 89

    (30) call -> ID LPAREN RPAREN .

    TIMES           reduce using rule 30 (call -> ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 30 (call -> ID LPAREN RPAREN .)
    MODULO          reduce using rule 30 (call -> ID LPAREN RPAREN .)
    PLUS            reduce using rule 30 (call -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 30 (call -> ID LPAREN RPAREN .)
    GT              reduce using rule 30 (call -> ID LPAREN RPAREN .)
    LT              reduce using rule 30 (call -> ID LPAREN RPAREN .)
    GE              reduce using rule 30 (call -> ID LPAREN RPAREN .)
    LE              reduce using rule 30 (call -> ID LPAREN RPAREN .)
    SLT             reduce using rule 30 (call -> ID LPAREN RPAREN .)
    SGT             reduce using rule 30 (call -> ID LPAREN RPAREN .)
    SGE             reduce using rule 30 (call -> ID LPAREN RPAREN .)
    SLE             reduce using rule 30 (call -> ID LPAREN RPAREN .)
    EQ              reduce using rule 30 (call -> ID LPAREN RPAREN .)
    NE              reduce using rule 30 (call -> ID LPAREN RPAREN .)
    SEQ             reduce using rule 30 (call -> ID LPAREN RPAREN .)
    SNE             reduce using rule 30 (call -> ID LPAREN RPAREN .)
    CMP             reduce using rule 30 (call -> ID LPAREN RPAREN .)
    AND             reduce using rule 30 (call -> ID LPAREN RPAREN .)
    OR              reduce using rule 30 (call -> ID LPAREN RPAREN .)
    LAND            reduce using rule 30 (call -> ID LPAREN RPAREN .)
    LOR             reduce using rule 30 (call -> ID LPAREN RPAREN .)
    SEMICOLON       reduce using rule 30 (call -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 30 (call -> ID LPAREN RPAREN .)
    COMMA           reduce using rule 30 (call -> ID LPAREN RPAREN .)


state 90

    (31) call -> ID LPAREN function_assignments . RPAREN

    RPAREN          shift and go to state 129


state 91

    (28) function_assignments -> exp .
    (29) function_assignments -> exp . COMMA function_assignments

    RPAREN          reduce using rule 28 (function_assignments -> exp .)
    COMMA           shift and go to state 130


state 92

    (20) interations -> FOR LPAREN for_assignments . SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE

    SEMICOLON       shift and go to state 131


state 93

    (24) for_assignments -> exp .
    (25) for_assignments -> exp . COMMA for_assignments

    SEMICOLON       reduce using rule 24 (for_assignments -> exp .)
    RPAREN          reduce using rule 24 (for_assignments -> exp .)
    COMMA           shift and go to state 132


state 94

    (21) interations -> DO LBRACE blockcode . RBRACE WHILE LPAREN exp RPAREN
    (6) blockcode -> blockcode . command
    (7) command -> . interations
    (8) command -> . IF LPAREN exp RPAREN if_statement
    (9) command -> . exp SEMICOLON
    (10) command -> . RETURN exp SEMICOLON
    (11) command -> . BREAK SEMICOLON
    (12) command -> . CONTINUE SEMICOLON
    (20) interations -> . FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (21) interations -> . DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN
    (22) interations -> . WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE
    (23) interations -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (32) exp -> . ID_SC EQUALS exp_lor
    (33) exp -> . ID_LI EQUALS exp_lor
    (34) exp -> . ID_SC MINUSEQUAL exp_lor
    (35) exp -> . ID_SC PLUSEQUAL exp_lor
    (36) exp -> . ID_SC MODEQUAL exp_lor
    (37) exp -> . ID_SC DIVEQUAL exp_lor
    (38) exp -> . ID_SC TIMESEQUAL exp_lor
    (39) exp -> . exp_lor
    (40) exp_lor -> . exp_lor LOR exp_land
    (41) exp_lor -> . exp_land
    (42) exp_land -> . exp_land LAND exp_or
    (43) exp_land -> . exp_or
    (44) exp_or -> . exp_or OR exp_and
    (45) exp_or -> . exp_and
    (46) exp_and -> . exp_and AND exp_comp
    (47) exp_and -> . exp_comp_eq
    (48) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (49) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (50) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (51) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (52) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (53) exp_comp_eq -> . exp_comp
    (54) exp_comp -> . exp_comp GT exp_plusminus
    (55) exp_comp -> . exp_comp LT exp_plusminus
    (56) exp_comp -> . exp_comp GE exp_plusminus
    (57) exp_comp -> . exp_comp LE exp_plusminus
    (58) exp_comp -> . exp_comp SLT exp_plusminus
    (59) exp_comp -> . exp_comp SGT exp_plusminus
    (60) exp_comp -> . exp_comp SGE exp_plusminus
    (61) exp_comp -> . exp_comp SLE exp_plusminus
    (62) exp_comp -> . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    RBRACE          shift and go to state 133
    IF              shift and go to state 5
    RETURN          shift and go to state 8
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    FOR             shift and go to state 13
    DO              shift and go to state 14
    WHILE           shift and go to state 15
    ID_SC           shift and go to state 16
    ID_LI           shift and go to state 18
    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    exp                            shift and go to state 7
    command                        shift and go to state 134
    interations                    shift and go to state 4
    exp_lor                        shift and go to state 17
    exp_land                       shift and go to state 19
    exp_or                         shift and go to state 20
    exp_and                        shift and go to state 21
    exp_comp                       shift and go to state 22
    exp_comp_eq                    shift and go to state 23
    exp_plusminus                  shift and go to state 24
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 95

    (5) blockcode -> command .

    RBRACE          reduce using rule 5 (blockcode -> command .)
    IF              reduce using rule 5 (blockcode -> command .)
    RETURN          reduce using rule 5 (blockcode -> command .)
    BREAK           reduce using rule 5 (blockcode -> command .)
    CONTINUE        reduce using rule 5 (blockcode -> command .)
    FOR             reduce using rule 5 (blockcode -> command .)
    DO              reduce using rule 5 (blockcode -> command .)
    WHILE           reduce using rule 5 (blockcode -> command .)
    ID_SC           reduce using rule 5 (blockcode -> command .)
    ID_LI           reduce using rule 5 (blockcode -> command .)
    XOR             reduce using rule 5 (blockcode -> command .)
    INCREMENT       reduce using rule 5 (blockcode -> command .)
    DECREMENT       reduce using rule 5 (blockcode -> command .)
    LPAREN          reduce using rule 5 (blockcode -> command .)
    NUMBER          reduce using rule 5 (blockcode -> command .)
    TRUE            reduce using rule 5 (blockcode -> command .)
    FALSE           reduce using rule 5 (blockcode -> command .)
    ID              reduce using rule 5 (blockcode -> command .)


state 96

    (22) interations -> WHILE LPAREN exp . RPAREN LBRACE blockcode RBRACE
    (23) interations -> WHILE LPAREN exp . RPAREN LBRACE RBRACE

    RPAREN          shift and go to state 135


state 97

    (32) exp -> ID_SC EQUALS exp_lor .
    (40) exp_lor -> exp_lor . LOR exp_land

    SEMICOLON       reduce using rule 32 (exp -> ID_SC EQUALS exp_lor .)
    RPAREN          reduce using rule 32 (exp -> ID_SC EQUALS exp_lor .)
    COMMA           reduce using rule 32 (exp -> ID_SC EQUALS exp_lor .)
    LOR             shift and go to state 57


state 98

    (34) exp -> ID_SC MINUSEQUAL exp_lor .
    (40) exp_lor -> exp_lor . LOR exp_land

    SEMICOLON       reduce using rule 34 (exp -> ID_SC MINUSEQUAL exp_lor .)
    RPAREN          reduce using rule 34 (exp -> ID_SC MINUSEQUAL exp_lor .)
    COMMA           reduce using rule 34 (exp -> ID_SC MINUSEQUAL exp_lor .)
    LOR             shift and go to state 57


state 99

    (35) exp -> ID_SC PLUSEQUAL exp_lor .
    (40) exp_lor -> exp_lor . LOR exp_land

    SEMICOLON       reduce using rule 35 (exp -> ID_SC PLUSEQUAL exp_lor .)
    RPAREN          reduce using rule 35 (exp -> ID_SC PLUSEQUAL exp_lor .)
    COMMA           reduce using rule 35 (exp -> ID_SC PLUSEQUAL exp_lor .)
    LOR             shift and go to state 57


state 100

    (36) exp -> ID_SC MODEQUAL exp_lor .
    (40) exp_lor -> exp_lor . LOR exp_land

    SEMICOLON       reduce using rule 36 (exp -> ID_SC MODEQUAL exp_lor .)
    RPAREN          reduce using rule 36 (exp -> ID_SC MODEQUAL exp_lor .)
    COMMA           reduce using rule 36 (exp -> ID_SC MODEQUAL exp_lor .)
    LOR             shift and go to state 57


state 101

    (37) exp -> ID_SC DIVEQUAL exp_lor .
    (40) exp_lor -> exp_lor . LOR exp_land

    SEMICOLON       reduce using rule 37 (exp -> ID_SC DIVEQUAL exp_lor .)
    RPAREN          reduce using rule 37 (exp -> ID_SC DIVEQUAL exp_lor .)
    COMMA           reduce using rule 37 (exp -> ID_SC DIVEQUAL exp_lor .)
    LOR             shift and go to state 57


state 102

    (38) exp -> ID_SC TIMESEQUAL exp_lor .
    (40) exp_lor -> exp_lor . LOR exp_land

    SEMICOLON       reduce using rule 38 (exp -> ID_SC TIMESEQUAL exp_lor .)
    RPAREN          reduce using rule 38 (exp -> ID_SC TIMESEQUAL exp_lor .)
    COMMA           reduce using rule 38 (exp -> ID_SC TIMESEQUAL exp_lor .)
    LOR             shift and go to state 57


state 103

    (40) exp_lor -> exp_lor LOR exp_land .
    (42) exp_land -> exp_land . LAND exp_or

    LOR             reduce using rule 40 (exp_lor -> exp_lor LOR exp_land .)
    SEMICOLON       reduce using rule 40 (exp_lor -> exp_lor LOR exp_land .)
    RPAREN          reduce using rule 40 (exp_lor -> exp_lor LOR exp_land .)
    COMMA           reduce using rule 40 (exp_lor -> exp_lor LOR exp_land .)
    LAND            shift and go to state 59


state 104

    (33) exp -> ID_LI EQUALS exp_lor .
    (40) exp_lor -> exp_lor . LOR exp_land

    SEMICOLON       reduce using rule 33 (exp -> ID_LI EQUALS exp_lor .)
    RPAREN          reduce using rule 33 (exp -> ID_LI EQUALS exp_lor .)
    COMMA           reduce using rule 33 (exp -> ID_LI EQUALS exp_lor .)
    LOR             shift and go to state 57


state 105

    (42) exp_land -> exp_land LAND exp_or .
    (44) exp_or -> exp_or . OR exp_and

    LAND            reduce using rule 42 (exp_land -> exp_land LAND exp_or .)
    LOR             reduce using rule 42 (exp_land -> exp_land LAND exp_or .)
    SEMICOLON       reduce using rule 42 (exp_land -> exp_land LAND exp_or .)
    RPAREN          reduce using rule 42 (exp_land -> exp_land LAND exp_or .)
    COMMA           reduce using rule 42 (exp_land -> exp_land LAND exp_or .)
    OR              shift and go to state 60


state 106

    (44) exp_or -> exp_or OR exp_and .
    (46) exp_and -> exp_and . AND exp_comp

    OR              reduce using rule 44 (exp_or -> exp_or OR exp_and .)
    LAND            reduce using rule 44 (exp_or -> exp_or OR exp_and .)
    LOR             reduce using rule 44 (exp_or -> exp_or OR exp_and .)
    SEMICOLON       reduce using rule 44 (exp_or -> exp_or OR exp_and .)
    RPAREN          reduce using rule 44 (exp_or -> exp_or OR exp_and .)
    COMMA           reduce using rule 44 (exp_or -> exp_or OR exp_and .)
    AND             shift and go to state 61


state 107

    (46) exp_and -> exp_and AND exp_comp .
    (54) exp_comp -> exp_comp . GT exp_plusminus
    (55) exp_comp -> exp_comp . LT exp_plusminus
    (56) exp_comp -> exp_comp . GE exp_plusminus
    (57) exp_comp -> exp_comp . LE exp_plusminus
    (58) exp_comp -> exp_comp . SLT exp_plusminus
    (59) exp_comp -> exp_comp . SGT exp_plusminus
    (60) exp_comp -> exp_comp . SGE exp_plusminus
    (61) exp_comp -> exp_comp . SLE exp_plusminus

    AND             reduce using rule 46 (exp_and -> exp_and AND exp_comp .)
    OR              reduce using rule 46 (exp_and -> exp_and AND exp_comp .)
    LAND            reduce using rule 46 (exp_and -> exp_and AND exp_comp .)
    LOR             reduce using rule 46 (exp_and -> exp_and AND exp_comp .)
    SEMICOLON       reduce using rule 46 (exp_and -> exp_and AND exp_comp .)
    RPAREN          reduce using rule 46 (exp_and -> exp_and AND exp_comp .)
    COMMA           reduce using rule 46 (exp_and -> exp_and AND exp_comp .)
    GT              shift and go to state 62
    LT              shift and go to state 63
    GE              shift and go to state 64
    LE              shift and go to state 65
    SLT             shift and go to state 66
    SGT             shift and go to state 67
    SGE             shift and go to state 68
    SLE             shift and go to state 69


state 108

    (54) exp_comp -> exp_comp GT exp_plusminus .
    (63) exp_plusminus -> exp_plusminus . PLUS exp_times_divides
    (64) exp_plusminus -> exp_plusminus . MINUS exp_times_divides

    GT              reduce using rule 54 (exp_comp -> exp_comp GT exp_plusminus .)
    LT              reduce using rule 54 (exp_comp -> exp_comp GT exp_plusminus .)
    GE              reduce using rule 54 (exp_comp -> exp_comp GT exp_plusminus .)
    LE              reduce using rule 54 (exp_comp -> exp_comp GT exp_plusminus .)
    SLT             reduce using rule 54 (exp_comp -> exp_comp GT exp_plusminus .)
    SGT             reduce using rule 54 (exp_comp -> exp_comp GT exp_plusminus .)
    SGE             reduce using rule 54 (exp_comp -> exp_comp GT exp_plusminus .)
    SLE             reduce using rule 54 (exp_comp -> exp_comp GT exp_plusminus .)
    EQ              reduce using rule 54 (exp_comp -> exp_comp GT exp_plusminus .)
    NE              reduce using rule 54 (exp_comp -> exp_comp GT exp_plusminus .)
    SEQ             reduce using rule 54 (exp_comp -> exp_comp GT exp_plusminus .)
    SNE             reduce using rule 54 (exp_comp -> exp_comp GT exp_plusminus .)
    CMP             reduce using rule 54 (exp_comp -> exp_comp GT exp_plusminus .)
    AND             reduce using rule 54 (exp_comp -> exp_comp GT exp_plusminus .)
    OR              reduce using rule 54 (exp_comp -> exp_comp GT exp_plusminus .)
    LAND            reduce using rule 54 (exp_comp -> exp_comp GT exp_plusminus .)
    LOR             reduce using rule 54 (exp_comp -> exp_comp GT exp_plusminus .)
    SEMICOLON       reduce using rule 54 (exp_comp -> exp_comp GT exp_plusminus .)
    RPAREN          reduce using rule 54 (exp_comp -> exp_comp GT exp_plusminus .)
    COMMA           reduce using rule 54 (exp_comp -> exp_comp GT exp_plusminus .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76


state 109

    (55) exp_comp -> exp_comp LT exp_plusminus .
    (63) exp_plusminus -> exp_plusminus . PLUS exp_times_divides
    (64) exp_plusminus -> exp_plusminus . MINUS exp_times_divides

    GT              reduce using rule 55 (exp_comp -> exp_comp LT exp_plusminus .)
    LT              reduce using rule 55 (exp_comp -> exp_comp LT exp_plusminus .)
    GE              reduce using rule 55 (exp_comp -> exp_comp LT exp_plusminus .)
    LE              reduce using rule 55 (exp_comp -> exp_comp LT exp_plusminus .)
    SLT             reduce using rule 55 (exp_comp -> exp_comp LT exp_plusminus .)
    SGT             reduce using rule 55 (exp_comp -> exp_comp LT exp_plusminus .)
    SGE             reduce using rule 55 (exp_comp -> exp_comp LT exp_plusminus .)
    SLE             reduce using rule 55 (exp_comp -> exp_comp LT exp_plusminus .)
    EQ              reduce using rule 55 (exp_comp -> exp_comp LT exp_plusminus .)
    NE              reduce using rule 55 (exp_comp -> exp_comp LT exp_plusminus .)
    SEQ             reduce using rule 55 (exp_comp -> exp_comp LT exp_plusminus .)
    SNE             reduce using rule 55 (exp_comp -> exp_comp LT exp_plusminus .)
    CMP             reduce using rule 55 (exp_comp -> exp_comp LT exp_plusminus .)
    AND             reduce using rule 55 (exp_comp -> exp_comp LT exp_plusminus .)
    OR              reduce using rule 55 (exp_comp -> exp_comp LT exp_plusminus .)
    LAND            reduce using rule 55 (exp_comp -> exp_comp LT exp_plusminus .)
    LOR             reduce using rule 55 (exp_comp -> exp_comp LT exp_plusminus .)
    SEMICOLON       reduce using rule 55 (exp_comp -> exp_comp LT exp_plusminus .)
    RPAREN          reduce using rule 55 (exp_comp -> exp_comp LT exp_plusminus .)
    COMMA           reduce using rule 55 (exp_comp -> exp_comp LT exp_plusminus .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76


state 110

    (56) exp_comp -> exp_comp GE exp_plusminus .
    (63) exp_plusminus -> exp_plusminus . PLUS exp_times_divides
    (64) exp_plusminus -> exp_plusminus . MINUS exp_times_divides

    GT              reduce using rule 56 (exp_comp -> exp_comp GE exp_plusminus .)
    LT              reduce using rule 56 (exp_comp -> exp_comp GE exp_plusminus .)
    GE              reduce using rule 56 (exp_comp -> exp_comp GE exp_plusminus .)
    LE              reduce using rule 56 (exp_comp -> exp_comp GE exp_plusminus .)
    SLT             reduce using rule 56 (exp_comp -> exp_comp GE exp_plusminus .)
    SGT             reduce using rule 56 (exp_comp -> exp_comp GE exp_plusminus .)
    SGE             reduce using rule 56 (exp_comp -> exp_comp GE exp_plusminus .)
    SLE             reduce using rule 56 (exp_comp -> exp_comp GE exp_plusminus .)
    EQ              reduce using rule 56 (exp_comp -> exp_comp GE exp_plusminus .)
    NE              reduce using rule 56 (exp_comp -> exp_comp GE exp_plusminus .)
    SEQ             reduce using rule 56 (exp_comp -> exp_comp GE exp_plusminus .)
    SNE             reduce using rule 56 (exp_comp -> exp_comp GE exp_plusminus .)
    CMP             reduce using rule 56 (exp_comp -> exp_comp GE exp_plusminus .)
    AND             reduce using rule 56 (exp_comp -> exp_comp GE exp_plusminus .)
    OR              reduce using rule 56 (exp_comp -> exp_comp GE exp_plusminus .)
    LAND            reduce using rule 56 (exp_comp -> exp_comp GE exp_plusminus .)
    LOR             reduce using rule 56 (exp_comp -> exp_comp GE exp_plusminus .)
    SEMICOLON       reduce using rule 56 (exp_comp -> exp_comp GE exp_plusminus .)
    RPAREN          reduce using rule 56 (exp_comp -> exp_comp GE exp_plusminus .)
    COMMA           reduce using rule 56 (exp_comp -> exp_comp GE exp_plusminus .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76


state 111

    (57) exp_comp -> exp_comp LE exp_plusminus .
    (63) exp_plusminus -> exp_plusminus . PLUS exp_times_divides
    (64) exp_plusminus -> exp_plusminus . MINUS exp_times_divides

    GT              reduce using rule 57 (exp_comp -> exp_comp LE exp_plusminus .)
    LT              reduce using rule 57 (exp_comp -> exp_comp LE exp_plusminus .)
    GE              reduce using rule 57 (exp_comp -> exp_comp LE exp_plusminus .)
    LE              reduce using rule 57 (exp_comp -> exp_comp LE exp_plusminus .)
    SLT             reduce using rule 57 (exp_comp -> exp_comp LE exp_plusminus .)
    SGT             reduce using rule 57 (exp_comp -> exp_comp LE exp_plusminus .)
    SGE             reduce using rule 57 (exp_comp -> exp_comp LE exp_plusminus .)
    SLE             reduce using rule 57 (exp_comp -> exp_comp LE exp_plusminus .)
    EQ              reduce using rule 57 (exp_comp -> exp_comp LE exp_plusminus .)
    NE              reduce using rule 57 (exp_comp -> exp_comp LE exp_plusminus .)
    SEQ             reduce using rule 57 (exp_comp -> exp_comp LE exp_plusminus .)
    SNE             reduce using rule 57 (exp_comp -> exp_comp LE exp_plusminus .)
    CMP             reduce using rule 57 (exp_comp -> exp_comp LE exp_plusminus .)
    AND             reduce using rule 57 (exp_comp -> exp_comp LE exp_plusminus .)
    OR              reduce using rule 57 (exp_comp -> exp_comp LE exp_plusminus .)
    LAND            reduce using rule 57 (exp_comp -> exp_comp LE exp_plusminus .)
    LOR             reduce using rule 57 (exp_comp -> exp_comp LE exp_plusminus .)
    SEMICOLON       reduce using rule 57 (exp_comp -> exp_comp LE exp_plusminus .)
    RPAREN          reduce using rule 57 (exp_comp -> exp_comp LE exp_plusminus .)
    COMMA           reduce using rule 57 (exp_comp -> exp_comp LE exp_plusminus .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76


state 112

    (58) exp_comp -> exp_comp SLT exp_plusminus .
    (63) exp_plusminus -> exp_plusminus . PLUS exp_times_divides
    (64) exp_plusminus -> exp_plusminus . MINUS exp_times_divides

    GT              reduce using rule 58 (exp_comp -> exp_comp SLT exp_plusminus .)
    LT              reduce using rule 58 (exp_comp -> exp_comp SLT exp_plusminus .)
    GE              reduce using rule 58 (exp_comp -> exp_comp SLT exp_plusminus .)
    LE              reduce using rule 58 (exp_comp -> exp_comp SLT exp_plusminus .)
    SLT             reduce using rule 58 (exp_comp -> exp_comp SLT exp_plusminus .)
    SGT             reduce using rule 58 (exp_comp -> exp_comp SLT exp_plusminus .)
    SGE             reduce using rule 58 (exp_comp -> exp_comp SLT exp_plusminus .)
    SLE             reduce using rule 58 (exp_comp -> exp_comp SLT exp_plusminus .)
    EQ              reduce using rule 58 (exp_comp -> exp_comp SLT exp_plusminus .)
    NE              reduce using rule 58 (exp_comp -> exp_comp SLT exp_plusminus .)
    SEQ             reduce using rule 58 (exp_comp -> exp_comp SLT exp_plusminus .)
    SNE             reduce using rule 58 (exp_comp -> exp_comp SLT exp_plusminus .)
    CMP             reduce using rule 58 (exp_comp -> exp_comp SLT exp_plusminus .)
    AND             reduce using rule 58 (exp_comp -> exp_comp SLT exp_plusminus .)
    OR              reduce using rule 58 (exp_comp -> exp_comp SLT exp_plusminus .)
    LAND            reduce using rule 58 (exp_comp -> exp_comp SLT exp_plusminus .)
    LOR             reduce using rule 58 (exp_comp -> exp_comp SLT exp_plusminus .)
    SEMICOLON       reduce using rule 58 (exp_comp -> exp_comp SLT exp_plusminus .)
    RPAREN          reduce using rule 58 (exp_comp -> exp_comp SLT exp_plusminus .)
    COMMA           reduce using rule 58 (exp_comp -> exp_comp SLT exp_plusminus .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76


state 113

    (59) exp_comp -> exp_comp SGT exp_plusminus .
    (63) exp_plusminus -> exp_plusminus . PLUS exp_times_divides
    (64) exp_plusminus -> exp_plusminus . MINUS exp_times_divides

    GT              reduce using rule 59 (exp_comp -> exp_comp SGT exp_plusminus .)
    LT              reduce using rule 59 (exp_comp -> exp_comp SGT exp_plusminus .)
    GE              reduce using rule 59 (exp_comp -> exp_comp SGT exp_plusminus .)
    LE              reduce using rule 59 (exp_comp -> exp_comp SGT exp_plusminus .)
    SLT             reduce using rule 59 (exp_comp -> exp_comp SGT exp_plusminus .)
    SGT             reduce using rule 59 (exp_comp -> exp_comp SGT exp_plusminus .)
    SGE             reduce using rule 59 (exp_comp -> exp_comp SGT exp_plusminus .)
    SLE             reduce using rule 59 (exp_comp -> exp_comp SGT exp_plusminus .)
    EQ              reduce using rule 59 (exp_comp -> exp_comp SGT exp_plusminus .)
    NE              reduce using rule 59 (exp_comp -> exp_comp SGT exp_plusminus .)
    SEQ             reduce using rule 59 (exp_comp -> exp_comp SGT exp_plusminus .)
    SNE             reduce using rule 59 (exp_comp -> exp_comp SGT exp_plusminus .)
    CMP             reduce using rule 59 (exp_comp -> exp_comp SGT exp_plusminus .)
    AND             reduce using rule 59 (exp_comp -> exp_comp SGT exp_plusminus .)
    OR              reduce using rule 59 (exp_comp -> exp_comp SGT exp_plusminus .)
    LAND            reduce using rule 59 (exp_comp -> exp_comp SGT exp_plusminus .)
    LOR             reduce using rule 59 (exp_comp -> exp_comp SGT exp_plusminus .)
    SEMICOLON       reduce using rule 59 (exp_comp -> exp_comp SGT exp_plusminus .)
    RPAREN          reduce using rule 59 (exp_comp -> exp_comp SGT exp_plusminus .)
    COMMA           reduce using rule 59 (exp_comp -> exp_comp SGT exp_plusminus .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76


state 114

    (60) exp_comp -> exp_comp SGE exp_plusminus .
    (63) exp_plusminus -> exp_plusminus . PLUS exp_times_divides
    (64) exp_plusminus -> exp_plusminus . MINUS exp_times_divides

    GT              reduce using rule 60 (exp_comp -> exp_comp SGE exp_plusminus .)
    LT              reduce using rule 60 (exp_comp -> exp_comp SGE exp_plusminus .)
    GE              reduce using rule 60 (exp_comp -> exp_comp SGE exp_plusminus .)
    LE              reduce using rule 60 (exp_comp -> exp_comp SGE exp_plusminus .)
    SLT             reduce using rule 60 (exp_comp -> exp_comp SGE exp_plusminus .)
    SGT             reduce using rule 60 (exp_comp -> exp_comp SGE exp_plusminus .)
    SGE             reduce using rule 60 (exp_comp -> exp_comp SGE exp_plusminus .)
    SLE             reduce using rule 60 (exp_comp -> exp_comp SGE exp_plusminus .)
    EQ              reduce using rule 60 (exp_comp -> exp_comp SGE exp_plusminus .)
    NE              reduce using rule 60 (exp_comp -> exp_comp SGE exp_plusminus .)
    SEQ             reduce using rule 60 (exp_comp -> exp_comp SGE exp_plusminus .)
    SNE             reduce using rule 60 (exp_comp -> exp_comp SGE exp_plusminus .)
    CMP             reduce using rule 60 (exp_comp -> exp_comp SGE exp_plusminus .)
    AND             reduce using rule 60 (exp_comp -> exp_comp SGE exp_plusminus .)
    OR              reduce using rule 60 (exp_comp -> exp_comp SGE exp_plusminus .)
    LAND            reduce using rule 60 (exp_comp -> exp_comp SGE exp_plusminus .)
    LOR             reduce using rule 60 (exp_comp -> exp_comp SGE exp_plusminus .)
    SEMICOLON       reduce using rule 60 (exp_comp -> exp_comp SGE exp_plusminus .)
    RPAREN          reduce using rule 60 (exp_comp -> exp_comp SGE exp_plusminus .)
    COMMA           reduce using rule 60 (exp_comp -> exp_comp SGE exp_plusminus .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76


state 115

    (61) exp_comp -> exp_comp SLE exp_plusminus .
    (63) exp_plusminus -> exp_plusminus . PLUS exp_times_divides
    (64) exp_plusminus -> exp_plusminus . MINUS exp_times_divides

    GT              reduce using rule 61 (exp_comp -> exp_comp SLE exp_plusminus .)
    LT              reduce using rule 61 (exp_comp -> exp_comp SLE exp_plusminus .)
    GE              reduce using rule 61 (exp_comp -> exp_comp SLE exp_plusminus .)
    LE              reduce using rule 61 (exp_comp -> exp_comp SLE exp_plusminus .)
    SLT             reduce using rule 61 (exp_comp -> exp_comp SLE exp_plusminus .)
    SGT             reduce using rule 61 (exp_comp -> exp_comp SLE exp_plusminus .)
    SGE             reduce using rule 61 (exp_comp -> exp_comp SLE exp_plusminus .)
    SLE             reduce using rule 61 (exp_comp -> exp_comp SLE exp_plusminus .)
    EQ              reduce using rule 61 (exp_comp -> exp_comp SLE exp_plusminus .)
    NE              reduce using rule 61 (exp_comp -> exp_comp SLE exp_plusminus .)
    SEQ             reduce using rule 61 (exp_comp -> exp_comp SLE exp_plusminus .)
    SNE             reduce using rule 61 (exp_comp -> exp_comp SLE exp_plusminus .)
    CMP             reduce using rule 61 (exp_comp -> exp_comp SLE exp_plusminus .)
    AND             reduce using rule 61 (exp_comp -> exp_comp SLE exp_plusminus .)
    OR              reduce using rule 61 (exp_comp -> exp_comp SLE exp_plusminus .)
    LAND            reduce using rule 61 (exp_comp -> exp_comp SLE exp_plusminus .)
    LOR             reduce using rule 61 (exp_comp -> exp_comp SLE exp_plusminus .)
    SEMICOLON       reduce using rule 61 (exp_comp -> exp_comp SLE exp_plusminus .)
    RPAREN          reduce using rule 61 (exp_comp -> exp_comp SLE exp_plusminus .)
    COMMA           reduce using rule 61 (exp_comp -> exp_comp SLE exp_plusminus .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76


state 116

    (48) exp_comp_eq -> exp_comp_eq EQ exp_comp .
    (54) exp_comp -> exp_comp . GT exp_plusminus
    (55) exp_comp -> exp_comp . LT exp_plusminus
    (56) exp_comp -> exp_comp . GE exp_plusminus
    (57) exp_comp -> exp_comp . LE exp_plusminus
    (58) exp_comp -> exp_comp . SLT exp_plusminus
    (59) exp_comp -> exp_comp . SGT exp_plusminus
    (60) exp_comp -> exp_comp . SGE exp_plusminus
    (61) exp_comp -> exp_comp . SLE exp_plusminus

    EQ              reduce using rule 48 (exp_comp_eq -> exp_comp_eq EQ exp_comp .)
    NE              reduce using rule 48 (exp_comp_eq -> exp_comp_eq EQ exp_comp .)
    SEQ             reduce using rule 48 (exp_comp_eq -> exp_comp_eq EQ exp_comp .)
    SNE             reduce using rule 48 (exp_comp_eq -> exp_comp_eq EQ exp_comp .)
    CMP             reduce using rule 48 (exp_comp_eq -> exp_comp_eq EQ exp_comp .)
    AND             reduce using rule 48 (exp_comp_eq -> exp_comp_eq EQ exp_comp .)
    OR              reduce using rule 48 (exp_comp_eq -> exp_comp_eq EQ exp_comp .)
    LAND            reduce using rule 48 (exp_comp_eq -> exp_comp_eq EQ exp_comp .)
    LOR             reduce using rule 48 (exp_comp_eq -> exp_comp_eq EQ exp_comp .)
    SEMICOLON       reduce using rule 48 (exp_comp_eq -> exp_comp_eq EQ exp_comp .)
    RPAREN          reduce using rule 48 (exp_comp_eq -> exp_comp_eq EQ exp_comp .)
    COMMA           reduce using rule 48 (exp_comp_eq -> exp_comp_eq EQ exp_comp .)
    GT              shift and go to state 62
    LT              shift and go to state 63
    GE              shift and go to state 64
    LE              shift and go to state 65
    SLT             shift and go to state 66
    SGT             shift and go to state 67
    SGE             shift and go to state 68
    SLE             shift and go to state 69


state 117

    (49) exp_comp_eq -> exp_comp_eq NE exp_comp .
    (54) exp_comp -> exp_comp . GT exp_plusminus
    (55) exp_comp -> exp_comp . LT exp_plusminus
    (56) exp_comp -> exp_comp . GE exp_plusminus
    (57) exp_comp -> exp_comp . LE exp_plusminus
    (58) exp_comp -> exp_comp . SLT exp_plusminus
    (59) exp_comp -> exp_comp . SGT exp_plusminus
    (60) exp_comp -> exp_comp . SGE exp_plusminus
    (61) exp_comp -> exp_comp . SLE exp_plusminus

    EQ              reduce using rule 49 (exp_comp_eq -> exp_comp_eq NE exp_comp .)
    NE              reduce using rule 49 (exp_comp_eq -> exp_comp_eq NE exp_comp .)
    SEQ             reduce using rule 49 (exp_comp_eq -> exp_comp_eq NE exp_comp .)
    SNE             reduce using rule 49 (exp_comp_eq -> exp_comp_eq NE exp_comp .)
    CMP             reduce using rule 49 (exp_comp_eq -> exp_comp_eq NE exp_comp .)
    AND             reduce using rule 49 (exp_comp_eq -> exp_comp_eq NE exp_comp .)
    OR              reduce using rule 49 (exp_comp_eq -> exp_comp_eq NE exp_comp .)
    LAND            reduce using rule 49 (exp_comp_eq -> exp_comp_eq NE exp_comp .)
    LOR             reduce using rule 49 (exp_comp_eq -> exp_comp_eq NE exp_comp .)
    SEMICOLON       reduce using rule 49 (exp_comp_eq -> exp_comp_eq NE exp_comp .)
    RPAREN          reduce using rule 49 (exp_comp_eq -> exp_comp_eq NE exp_comp .)
    COMMA           reduce using rule 49 (exp_comp_eq -> exp_comp_eq NE exp_comp .)
    GT              shift and go to state 62
    LT              shift and go to state 63
    GE              shift and go to state 64
    LE              shift and go to state 65
    SLT             shift and go to state 66
    SGT             shift and go to state 67
    SGE             shift and go to state 68
    SLE             shift and go to state 69


state 118

    (50) exp_comp_eq -> exp_comp_eq SEQ exp_comp .
    (54) exp_comp -> exp_comp . GT exp_plusminus
    (55) exp_comp -> exp_comp . LT exp_plusminus
    (56) exp_comp -> exp_comp . GE exp_plusminus
    (57) exp_comp -> exp_comp . LE exp_plusminus
    (58) exp_comp -> exp_comp . SLT exp_plusminus
    (59) exp_comp -> exp_comp . SGT exp_plusminus
    (60) exp_comp -> exp_comp . SGE exp_plusminus
    (61) exp_comp -> exp_comp . SLE exp_plusminus

    EQ              reduce using rule 50 (exp_comp_eq -> exp_comp_eq SEQ exp_comp .)
    NE              reduce using rule 50 (exp_comp_eq -> exp_comp_eq SEQ exp_comp .)
    SEQ             reduce using rule 50 (exp_comp_eq -> exp_comp_eq SEQ exp_comp .)
    SNE             reduce using rule 50 (exp_comp_eq -> exp_comp_eq SEQ exp_comp .)
    CMP             reduce using rule 50 (exp_comp_eq -> exp_comp_eq SEQ exp_comp .)
    AND             reduce using rule 50 (exp_comp_eq -> exp_comp_eq SEQ exp_comp .)
    OR              reduce using rule 50 (exp_comp_eq -> exp_comp_eq SEQ exp_comp .)
    LAND            reduce using rule 50 (exp_comp_eq -> exp_comp_eq SEQ exp_comp .)
    LOR             reduce using rule 50 (exp_comp_eq -> exp_comp_eq SEQ exp_comp .)
    SEMICOLON       reduce using rule 50 (exp_comp_eq -> exp_comp_eq SEQ exp_comp .)
    RPAREN          reduce using rule 50 (exp_comp_eq -> exp_comp_eq SEQ exp_comp .)
    COMMA           reduce using rule 50 (exp_comp_eq -> exp_comp_eq SEQ exp_comp .)
    GT              shift and go to state 62
    LT              shift and go to state 63
    GE              shift and go to state 64
    LE              shift and go to state 65
    SLT             shift and go to state 66
    SGT             shift and go to state 67
    SGE             shift and go to state 68
    SLE             shift and go to state 69


state 119

    (51) exp_comp_eq -> exp_comp_eq SNE exp_comp .
    (54) exp_comp -> exp_comp . GT exp_plusminus
    (55) exp_comp -> exp_comp . LT exp_plusminus
    (56) exp_comp -> exp_comp . GE exp_plusminus
    (57) exp_comp -> exp_comp . LE exp_plusminus
    (58) exp_comp -> exp_comp . SLT exp_plusminus
    (59) exp_comp -> exp_comp . SGT exp_plusminus
    (60) exp_comp -> exp_comp . SGE exp_plusminus
    (61) exp_comp -> exp_comp . SLE exp_plusminus

    EQ              reduce using rule 51 (exp_comp_eq -> exp_comp_eq SNE exp_comp .)
    NE              reduce using rule 51 (exp_comp_eq -> exp_comp_eq SNE exp_comp .)
    SEQ             reduce using rule 51 (exp_comp_eq -> exp_comp_eq SNE exp_comp .)
    SNE             reduce using rule 51 (exp_comp_eq -> exp_comp_eq SNE exp_comp .)
    CMP             reduce using rule 51 (exp_comp_eq -> exp_comp_eq SNE exp_comp .)
    AND             reduce using rule 51 (exp_comp_eq -> exp_comp_eq SNE exp_comp .)
    OR              reduce using rule 51 (exp_comp_eq -> exp_comp_eq SNE exp_comp .)
    LAND            reduce using rule 51 (exp_comp_eq -> exp_comp_eq SNE exp_comp .)
    LOR             reduce using rule 51 (exp_comp_eq -> exp_comp_eq SNE exp_comp .)
    SEMICOLON       reduce using rule 51 (exp_comp_eq -> exp_comp_eq SNE exp_comp .)
    RPAREN          reduce using rule 51 (exp_comp_eq -> exp_comp_eq SNE exp_comp .)
    COMMA           reduce using rule 51 (exp_comp_eq -> exp_comp_eq SNE exp_comp .)
    GT              shift and go to state 62
    LT              shift and go to state 63
    GE              shift and go to state 64
    LE              shift and go to state 65
    SLT             shift and go to state 66
    SGT             shift and go to state 67
    SGE             shift and go to state 68
    SLE             shift and go to state 69


state 120

    (52) exp_comp_eq -> exp_comp_eq CMP exp_comp .
    (54) exp_comp -> exp_comp . GT exp_plusminus
    (55) exp_comp -> exp_comp . LT exp_plusminus
    (56) exp_comp -> exp_comp . GE exp_plusminus
    (57) exp_comp -> exp_comp . LE exp_plusminus
    (58) exp_comp -> exp_comp . SLT exp_plusminus
    (59) exp_comp -> exp_comp . SGT exp_plusminus
    (60) exp_comp -> exp_comp . SGE exp_plusminus
    (61) exp_comp -> exp_comp . SLE exp_plusminus

    EQ              reduce using rule 52 (exp_comp_eq -> exp_comp_eq CMP exp_comp .)
    NE              reduce using rule 52 (exp_comp_eq -> exp_comp_eq CMP exp_comp .)
    SEQ             reduce using rule 52 (exp_comp_eq -> exp_comp_eq CMP exp_comp .)
    SNE             reduce using rule 52 (exp_comp_eq -> exp_comp_eq CMP exp_comp .)
    CMP             reduce using rule 52 (exp_comp_eq -> exp_comp_eq CMP exp_comp .)
    AND             reduce using rule 52 (exp_comp_eq -> exp_comp_eq CMP exp_comp .)
    OR              reduce using rule 52 (exp_comp_eq -> exp_comp_eq CMP exp_comp .)
    LAND            reduce using rule 52 (exp_comp_eq -> exp_comp_eq CMP exp_comp .)
    LOR             reduce using rule 52 (exp_comp_eq -> exp_comp_eq CMP exp_comp .)
    SEMICOLON       reduce using rule 52 (exp_comp_eq -> exp_comp_eq CMP exp_comp .)
    RPAREN          reduce using rule 52 (exp_comp_eq -> exp_comp_eq CMP exp_comp .)
    COMMA           reduce using rule 52 (exp_comp_eq -> exp_comp_eq CMP exp_comp .)
    GT              shift and go to state 62
    LT              shift and go to state 63
    GE              shift and go to state 64
    LE              shift and go to state 65
    SLT             shift and go to state 66
    SGT             shift and go to state 67
    SGE             shift and go to state 68
    SLE             shift and go to state 69


state 121

    (63) exp_plusminus -> exp_plusminus PLUS exp_times_divides .
    (66) exp_times_divides -> exp_times_divides . TIMES exp_lnot
    (67) exp_times_divides -> exp_times_divides . DIVIDE exp_lnot
    (68) exp_times_divides -> exp_times_divides . MODULO exp_lnot

    PLUS            reduce using rule 63 (exp_plusminus -> exp_plusminus PLUS exp_times_divides .)
    MINUS           reduce using rule 63 (exp_plusminus -> exp_plusminus PLUS exp_times_divides .)
    GT              reduce using rule 63 (exp_plusminus -> exp_plusminus PLUS exp_times_divides .)
    LT              reduce using rule 63 (exp_plusminus -> exp_plusminus PLUS exp_times_divides .)
    GE              reduce using rule 63 (exp_plusminus -> exp_plusminus PLUS exp_times_divides .)
    LE              reduce using rule 63 (exp_plusminus -> exp_plusminus PLUS exp_times_divides .)
    SLT             reduce using rule 63 (exp_plusminus -> exp_plusminus PLUS exp_times_divides .)
    SGT             reduce using rule 63 (exp_plusminus -> exp_plusminus PLUS exp_times_divides .)
    SGE             reduce using rule 63 (exp_plusminus -> exp_plusminus PLUS exp_times_divides .)
    SLE             reduce using rule 63 (exp_plusminus -> exp_plusminus PLUS exp_times_divides .)
    EQ              reduce using rule 63 (exp_plusminus -> exp_plusminus PLUS exp_times_divides .)
    NE              reduce using rule 63 (exp_plusminus -> exp_plusminus PLUS exp_times_divides .)
    SEQ             reduce using rule 63 (exp_plusminus -> exp_plusminus PLUS exp_times_divides .)
    SNE             reduce using rule 63 (exp_plusminus -> exp_plusminus PLUS exp_times_divides .)
    CMP             reduce using rule 63 (exp_plusminus -> exp_plusminus PLUS exp_times_divides .)
    AND             reduce using rule 63 (exp_plusminus -> exp_plusminus PLUS exp_times_divides .)
    OR              reduce using rule 63 (exp_plusminus -> exp_plusminus PLUS exp_times_divides .)
    LAND            reduce using rule 63 (exp_plusminus -> exp_plusminus PLUS exp_times_divides .)
    LOR             reduce using rule 63 (exp_plusminus -> exp_plusminus PLUS exp_times_divides .)
    SEMICOLON       reduce using rule 63 (exp_plusminus -> exp_plusminus PLUS exp_times_divides .)
    RPAREN          reduce using rule 63 (exp_plusminus -> exp_plusminus PLUS exp_times_divides .)
    COMMA           reduce using rule 63 (exp_plusminus -> exp_plusminus PLUS exp_times_divides .)
    TIMES           shift and go to state 77
    DIVIDE          shift and go to state 78
    MODULO          shift and go to state 79


state 122

    (64) exp_plusminus -> exp_plusminus MINUS exp_times_divides .
    (66) exp_times_divides -> exp_times_divides . TIMES exp_lnot
    (67) exp_times_divides -> exp_times_divides . DIVIDE exp_lnot
    (68) exp_times_divides -> exp_times_divides . MODULO exp_lnot

    PLUS            reduce using rule 64 (exp_plusminus -> exp_plusminus MINUS exp_times_divides .)
    MINUS           reduce using rule 64 (exp_plusminus -> exp_plusminus MINUS exp_times_divides .)
    GT              reduce using rule 64 (exp_plusminus -> exp_plusminus MINUS exp_times_divides .)
    LT              reduce using rule 64 (exp_plusminus -> exp_plusminus MINUS exp_times_divides .)
    GE              reduce using rule 64 (exp_plusminus -> exp_plusminus MINUS exp_times_divides .)
    LE              reduce using rule 64 (exp_plusminus -> exp_plusminus MINUS exp_times_divides .)
    SLT             reduce using rule 64 (exp_plusminus -> exp_plusminus MINUS exp_times_divides .)
    SGT             reduce using rule 64 (exp_plusminus -> exp_plusminus MINUS exp_times_divides .)
    SGE             reduce using rule 64 (exp_plusminus -> exp_plusminus MINUS exp_times_divides .)
    SLE             reduce using rule 64 (exp_plusminus -> exp_plusminus MINUS exp_times_divides .)
    EQ              reduce using rule 64 (exp_plusminus -> exp_plusminus MINUS exp_times_divides .)
    NE              reduce using rule 64 (exp_plusminus -> exp_plusminus MINUS exp_times_divides .)
    SEQ             reduce using rule 64 (exp_plusminus -> exp_plusminus MINUS exp_times_divides .)
    SNE             reduce using rule 64 (exp_plusminus -> exp_plusminus MINUS exp_times_divides .)
    CMP             reduce using rule 64 (exp_plusminus -> exp_plusminus MINUS exp_times_divides .)
    AND             reduce using rule 64 (exp_plusminus -> exp_plusminus MINUS exp_times_divides .)
    OR              reduce using rule 64 (exp_plusminus -> exp_plusminus MINUS exp_times_divides .)
    LAND            reduce using rule 64 (exp_plusminus -> exp_plusminus MINUS exp_times_divides .)
    LOR             reduce using rule 64 (exp_plusminus -> exp_plusminus MINUS exp_times_divides .)
    SEMICOLON       reduce using rule 64 (exp_plusminus -> exp_plusminus MINUS exp_times_divides .)
    RPAREN          reduce using rule 64 (exp_plusminus -> exp_plusminus MINUS exp_times_divides .)
    COMMA           reduce using rule 64 (exp_plusminus -> exp_plusminus MINUS exp_times_divides .)
    TIMES           shift and go to state 77
    DIVIDE          shift and go to state 78
    MODULO          shift and go to state 79


state 123

    (66) exp_times_divides -> exp_times_divides TIMES exp_lnot .

    TIMES           reduce using rule 66 (exp_times_divides -> exp_times_divides TIMES exp_lnot .)
    DIVIDE          reduce using rule 66 (exp_times_divides -> exp_times_divides TIMES exp_lnot .)
    MODULO          reduce using rule 66 (exp_times_divides -> exp_times_divides TIMES exp_lnot .)
    PLUS            reduce using rule 66 (exp_times_divides -> exp_times_divides TIMES exp_lnot .)
    MINUS           reduce using rule 66 (exp_times_divides -> exp_times_divides TIMES exp_lnot .)
    GT              reduce using rule 66 (exp_times_divides -> exp_times_divides TIMES exp_lnot .)
    LT              reduce using rule 66 (exp_times_divides -> exp_times_divides TIMES exp_lnot .)
    GE              reduce using rule 66 (exp_times_divides -> exp_times_divides TIMES exp_lnot .)
    LE              reduce using rule 66 (exp_times_divides -> exp_times_divides TIMES exp_lnot .)
    SLT             reduce using rule 66 (exp_times_divides -> exp_times_divides TIMES exp_lnot .)
    SGT             reduce using rule 66 (exp_times_divides -> exp_times_divides TIMES exp_lnot .)
    SGE             reduce using rule 66 (exp_times_divides -> exp_times_divides TIMES exp_lnot .)
    SLE             reduce using rule 66 (exp_times_divides -> exp_times_divides TIMES exp_lnot .)
    EQ              reduce using rule 66 (exp_times_divides -> exp_times_divides TIMES exp_lnot .)
    NE              reduce using rule 66 (exp_times_divides -> exp_times_divides TIMES exp_lnot .)
    SEQ             reduce using rule 66 (exp_times_divides -> exp_times_divides TIMES exp_lnot .)
    SNE             reduce using rule 66 (exp_times_divides -> exp_times_divides TIMES exp_lnot .)
    CMP             reduce using rule 66 (exp_times_divides -> exp_times_divides TIMES exp_lnot .)
    AND             reduce using rule 66 (exp_times_divides -> exp_times_divides TIMES exp_lnot .)
    OR              reduce using rule 66 (exp_times_divides -> exp_times_divides TIMES exp_lnot .)
    LAND            reduce using rule 66 (exp_times_divides -> exp_times_divides TIMES exp_lnot .)
    LOR             reduce using rule 66 (exp_times_divides -> exp_times_divides TIMES exp_lnot .)
    SEMICOLON       reduce using rule 66 (exp_times_divides -> exp_times_divides TIMES exp_lnot .)
    RPAREN          reduce using rule 66 (exp_times_divides -> exp_times_divides TIMES exp_lnot .)
    COMMA           reduce using rule 66 (exp_times_divides -> exp_times_divides TIMES exp_lnot .)


state 124

    (67) exp_times_divides -> exp_times_divides DIVIDE exp_lnot .

    TIMES           reduce using rule 67 (exp_times_divides -> exp_times_divides DIVIDE exp_lnot .)
    DIVIDE          reduce using rule 67 (exp_times_divides -> exp_times_divides DIVIDE exp_lnot .)
    MODULO          reduce using rule 67 (exp_times_divides -> exp_times_divides DIVIDE exp_lnot .)
    PLUS            reduce using rule 67 (exp_times_divides -> exp_times_divides DIVIDE exp_lnot .)
    MINUS           reduce using rule 67 (exp_times_divides -> exp_times_divides DIVIDE exp_lnot .)
    GT              reduce using rule 67 (exp_times_divides -> exp_times_divides DIVIDE exp_lnot .)
    LT              reduce using rule 67 (exp_times_divides -> exp_times_divides DIVIDE exp_lnot .)
    GE              reduce using rule 67 (exp_times_divides -> exp_times_divides DIVIDE exp_lnot .)
    LE              reduce using rule 67 (exp_times_divides -> exp_times_divides DIVIDE exp_lnot .)
    SLT             reduce using rule 67 (exp_times_divides -> exp_times_divides DIVIDE exp_lnot .)
    SGT             reduce using rule 67 (exp_times_divides -> exp_times_divides DIVIDE exp_lnot .)
    SGE             reduce using rule 67 (exp_times_divides -> exp_times_divides DIVIDE exp_lnot .)
    SLE             reduce using rule 67 (exp_times_divides -> exp_times_divides DIVIDE exp_lnot .)
    EQ              reduce using rule 67 (exp_times_divides -> exp_times_divides DIVIDE exp_lnot .)
    NE              reduce using rule 67 (exp_times_divides -> exp_times_divides DIVIDE exp_lnot .)
    SEQ             reduce using rule 67 (exp_times_divides -> exp_times_divides DIVIDE exp_lnot .)
    SNE             reduce using rule 67 (exp_times_divides -> exp_times_divides DIVIDE exp_lnot .)
    CMP             reduce using rule 67 (exp_times_divides -> exp_times_divides DIVIDE exp_lnot .)
    AND             reduce using rule 67 (exp_times_divides -> exp_times_divides DIVIDE exp_lnot .)
    OR              reduce using rule 67 (exp_times_divides -> exp_times_divides DIVIDE exp_lnot .)
    LAND            reduce using rule 67 (exp_times_divides -> exp_times_divides DIVIDE exp_lnot .)
    LOR             reduce using rule 67 (exp_times_divides -> exp_times_divides DIVIDE exp_lnot .)
    SEMICOLON       reduce using rule 67 (exp_times_divides -> exp_times_divides DIVIDE exp_lnot .)
    RPAREN          reduce using rule 67 (exp_times_divides -> exp_times_divides DIVIDE exp_lnot .)
    COMMA           reduce using rule 67 (exp_times_divides -> exp_times_divides DIVIDE exp_lnot .)


state 125

    (68) exp_times_divides -> exp_times_divides MODULO exp_lnot .

    TIMES           reduce using rule 68 (exp_times_divides -> exp_times_divides MODULO exp_lnot .)
    DIVIDE          reduce using rule 68 (exp_times_divides -> exp_times_divides MODULO exp_lnot .)
    MODULO          reduce using rule 68 (exp_times_divides -> exp_times_divides MODULO exp_lnot .)
    PLUS            reduce using rule 68 (exp_times_divides -> exp_times_divides MODULO exp_lnot .)
    MINUS           reduce using rule 68 (exp_times_divides -> exp_times_divides MODULO exp_lnot .)
    GT              reduce using rule 68 (exp_times_divides -> exp_times_divides MODULO exp_lnot .)
    LT              reduce using rule 68 (exp_times_divides -> exp_times_divides MODULO exp_lnot .)
    GE              reduce using rule 68 (exp_times_divides -> exp_times_divides MODULO exp_lnot .)
    LE              reduce using rule 68 (exp_times_divides -> exp_times_divides MODULO exp_lnot .)
    SLT             reduce using rule 68 (exp_times_divides -> exp_times_divides MODULO exp_lnot .)
    SGT             reduce using rule 68 (exp_times_divides -> exp_times_divides MODULO exp_lnot .)
    SGE             reduce using rule 68 (exp_times_divides -> exp_times_divides MODULO exp_lnot .)
    SLE             reduce using rule 68 (exp_times_divides -> exp_times_divides MODULO exp_lnot .)
    EQ              reduce using rule 68 (exp_times_divides -> exp_times_divides MODULO exp_lnot .)
    NE              reduce using rule 68 (exp_times_divides -> exp_times_divides MODULO exp_lnot .)
    SEQ             reduce using rule 68 (exp_times_divides -> exp_times_divides MODULO exp_lnot .)
    SNE             reduce using rule 68 (exp_times_divides -> exp_times_divides MODULO exp_lnot .)
    CMP             reduce using rule 68 (exp_times_divides -> exp_times_divides MODULO exp_lnot .)
    AND             reduce using rule 68 (exp_times_divides -> exp_times_divides MODULO exp_lnot .)
    OR              reduce using rule 68 (exp_times_divides -> exp_times_divides MODULO exp_lnot .)
    LAND            reduce using rule 68 (exp_times_divides -> exp_times_divides MODULO exp_lnot .)
    LOR             reduce using rule 68 (exp_times_divides -> exp_times_divides MODULO exp_lnot .)
    SEMICOLON       reduce using rule 68 (exp_times_divides -> exp_times_divides MODULO exp_lnot .)
    RPAREN          reduce using rule 68 (exp_times_divides -> exp_times_divides MODULO exp_lnot .)
    COMMA           reduce using rule 68 (exp_times_divides -> exp_times_divides MODULO exp_lnot .)


state 126

    (8) command -> IF LPAREN exp RPAREN . if_statement
    (13) if_statement -> . LBRACE blockcode RBRACE
    (14) if_statement -> . LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE
    (15) if_statement -> . LBRACE blockcode RBRACE elsif

    LBRACE          shift and go to state 137

    if_statement                   shift and go to state 136

state 127

    (26) function -> SUB ID LPAREN RPAREN . LBRACE blockcode RBRACE

    LBRACE          shift and go to state 138


state 128

    (27) function -> SUB ID LPAREN function_assignments . RPAREN LBRACE blockcode RBRACE

    RPAREN          shift and go to state 139


state 129

    (31) call -> ID LPAREN function_assignments RPAREN .

    TIMES           reduce using rule 31 (call -> ID LPAREN function_assignments RPAREN .)
    DIVIDE          reduce using rule 31 (call -> ID LPAREN function_assignments RPAREN .)
    MODULO          reduce using rule 31 (call -> ID LPAREN function_assignments RPAREN .)
    PLUS            reduce using rule 31 (call -> ID LPAREN function_assignments RPAREN .)
    MINUS           reduce using rule 31 (call -> ID LPAREN function_assignments RPAREN .)
    GT              reduce using rule 31 (call -> ID LPAREN function_assignments RPAREN .)
    LT              reduce using rule 31 (call -> ID LPAREN function_assignments RPAREN .)
    GE              reduce using rule 31 (call -> ID LPAREN function_assignments RPAREN .)
    LE              reduce using rule 31 (call -> ID LPAREN function_assignments RPAREN .)
    SLT             reduce using rule 31 (call -> ID LPAREN function_assignments RPAREN .)
    SGT             reduce using rule 31 (call -> ID LPAREN function_assignments RPAREN .)
    SGE             reduce using rule 31 (call -> ID LPAREN function_assignments RPAREN .)
    SLE             reduce using rule 31 (call -> ID LPAREN function_assignments RPAREN .)
    EQ              reduce using rule 31 (call -> ID LPAREN function_assignments RPAREN .)
    NE              reduce using rule 31 (call -> ID LPAREN function_assignments RPAREN .)
    SEQ             reduce using rule 31 (call -> ID LPAREN function_assignments RPAREN .)
    SNE             reduce using rule 31 (call -> ID LPAREN function_assignments RPAREN .)
    CMP             reduce using rule 31 (call -> ID LPAREN function_assignments RPAREN .)
    AND             reduce using rule 31 (call -> ID LPAREN function_assignments RPAREN .)
    OR              reduce using rule 31 (call -> ID LPAREN function_assignments RPAREN .)
    LAND            reduce using rule 31 (call -> ID LPAREN function_assignments RPAREN .)
    LOR             reduce using rule 31 (call -> ID LPAREN function_assignments RPAREN .)
    SEMICOLON       reduce using rule 31 (call -> ID LPAREN function_assignments RPAREN .)
    RPAREN          reduce using rule 31 (call -> ID LPAREN function_assignments RPAREN .)
    COMMA           reduce using rule 31 (call -> ID LPAREN function_assignments RPAREN .)


state 130

    (29) function_assignments -> exp COMMA . function_assignments
    (28) function_assignments -> . exp
    (29) function_assignments -> . exp COMMA function_assignments
    (32) exp -> . ID_SC EQUALS exp_lor
    (33) exp -> . ID_LI EQUALS exp_lor
    (34) exp -> . ID_SC MINUSEQUAL exp_lor
    (35) exp -> . ID_SC PLUSEQUAL exp_lor
    (36) exp -> . ID_SC MODEQUAL exp_lor
    (37) exp -> . ID_SC DIVEQUAL exp_lor
    (38) exp -> . ID_SC TIMESEQUAL exp_lor
    (39) exp -> . exp_lor
    (40) exp_lor -> . exp_lor LOR exp_land
    (41) exp_lor -> . exp_land
    (42) exp_land -> . exp_land LAND exp_or
    (43) exp_land -> . exp_or
    (44) exp_or -> . exp_or OR exp_and
    (45) exp_or -> . exp_and
    (46) exp_and -> . exp_and AND exp_comp
    (47) exp_and -> . exp_comp_eq
    (48) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (49) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (50) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (51) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (52) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (53) exp_comp_eq -> . exp_comp
    (54) exp_comp -> . exp_comp GT exp_plusminus
    (55) exp_comp -> . exp_comp LT exp_plusminus
    (56) exp_comp -> . exp_comp GE exp_plusminus
    (57) exp_comp -> . exp_comp LE exp_plusminus
    (58) exp_comp -> . exp_comp SLT exp_plusminus
    (59) exp_comp -> . exp_comp SGT exp_plusminus
    (60) exp_comp -> . exp_comp SGE exp_plusminus
    (61) exp_comp -> . exp_comp SLE exp_plusminus
    (62) exp_comp -> . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    ID_SC           shift and go to state 16
    ID_LI           shift and go to state 18
    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    exp                            shift and go to state 91
    function_assignments           shift and go to state 140
    exp_lor                        shift and go to state 17
    exp_land                       shift and go to state 19
    exp_or                         shift and go to state 20
    exp_and                        shift and go to state 21
    exp_comp                       shift and go to state 22
    exp_comp_eq                    shift and go to state 23
    exp_plusminus                  shift and go to state 24
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 131

    (20) interations -> FOR LPAREN for_assignments SEMICOLON . exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (32) exp -> . ID_SC EQUALS exp_lor
    (33) exp -> . ID_LI EQUALS exp_lor
    (34) exp -> . ID_SC MINUSEQUAL exp_lor
    (35) exp -> . ID_SC PLUSEQUAL exp_lor
    (36) exp -> . ID_SC MODEQUAL exp_lor
    (37) exp -> . ID_SC DIVEQUAL exp_lor
    (38) exp -> . ID_SC TIMESEQUAL exp_lor
    (39) exp -> . exp_lor
    (40) exp_lor -> . exp_lor LOR exp_land
    (41) exp_lor -> . exp_land
    (42) exp_land -> . exp_land LAND exp_or
    (43) exp_land -> . exp_or
    (44) exp_or -> . exp_or OR exp_and
    (45) exp_or -> . exp_and
    (46) exp_and -> . exp_and AND exp_comp
    (47) exp_and -> . exp_comp_eq
    (48) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (49) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (50) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (51) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (52) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (53) exp_comp_eq -> . exp_comp
    (54) exp_comp -> . exp_comp GT exp_plusminus
    (55) exp_comp -> . exp_comp LT exp_plusminus
    (56) exp_comp -> . exp_comp GE exp_plusminus
    (57) exp_comp -> . exp_comp LE exp_plusminus
    (58) exp_comp -> . exp_comp SLT exp_plusminus
    (59) exp_comp -> . exp_comp SGT exp_plusminus
    (60) exp_comp -> . exp_comp SGE exp_plusminus
    (61) exp_comp -> . exp_comp SLE exp_plusminus
    (62) exp_comp -> . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    ID_SC           shift and go to state 16
    ID_LI           shift and go to state 18
    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    exp                            shift and go to state 141
    exp_lor                        shift and go to state 17
    exp_land                       shift and go to state 19
    exp_or                         shift and go to state 20
    exp_and                        shift and go to state 21
    exp_comp                       shift and go to state 22
    exp_comp_eq                    shift and go to state 23
    exp_plusminus                  shift and go to state 24
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 132

    (25) for_assignments -> exp COMMA . for_assignments
    (24) for_assignments -> . exp
    (25) for_assignments -> . exp COMMA for_assignments
    (32) exp -> . ID_SC EQUALS exp_lor
    (33) exp -> . ID_LI EQUALS exp_lor
    (34) exp -> . ID_SC MINUSEQUAL exp_lor
    (35) exp -> . ID_SC PLUSEQUAL exp_lor
    (36) exp -> . ID_SC MODEQUAL exp_lor
    (37) exp -> . ID_SC DIVEQUAL exp_lor
    (38) exp -> . ID_SC TIMESEQUAL exp_lor
    (39) exp -> . exp_lor
    (40) exp_lor -> . exp_lor LOR exp_land
    (41) exp_lor -> . exp_land
    (42) exp_land -> . exp_land LAND exp_or
    (43) exp_land -> . exp_or
    (44) exp_or -> . exp_or OR exp_and
    (45) exp_or -> . exp_and
    (46) exp_and -> . exp_and AND exp_comp
    (47) exp_and -> . exp_comp_eq
    (48) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (49) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (50) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (51) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (52) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (53) exp_comp_eq -> . exp_comp
    (54) exp_comp -> . exp_comp GT exp_plusminus
    (55) exp_comp -> . exp_comp LT exp_plusminus
    (56) exp_comp -> . exp_comp GE exp_plusminus
    (57) exp_comp -> . exp_comp LE exp_plusminus
    (58) exp_comp -> . exp_comp SLT exp_plusminus
    (59) exp_comp -> . exp_comp SGT exp_plusminus
    (60) exp_comp -> . exp_comp SGE exp_plusminus
    (61) exp_comp -> . exp_comp SLE exp_plusminus
    (62) exp_comp -> . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    ID_SC           shift and go to state 16
    ID_LI           shift and go to state 18
    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    exp                            shift and go to state 93
    for_assignments                shift and go to state 142
    exp_lor                        shift and go to state 17
    exp_land                       shift and go to state 19
    exp_or                         shift and go to state 20
    exp_and                        shift and go to state 21
    exp_comp                       shift and go to state 22
    exp_comp_eq                    shift and go to state 23
    exp_plusminus                  shift and go to state 24
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 133

    (21) interations -> DO LBRACE blockcode RBRACE . WHILE LPAREN exp RPAREN

    WHILE           shift and go to state 143


state 134

    (6) blockcode -> blockcode command .

    RBRACE          reduce using rule 6 (blockcode -> blockcode command .)
    IF              reduce using rule 6 (blockcode -> blockcode command .)
    RETURN          reduce using rule 6 (blockcode -> blockcode command .)
    BREAK           reduce using rule 6 (blockcode -> blockcode command .)
    CONTINUE        reduce using rule 6 (blockcode -> blockcode command .)
    FOR             reduce using rule 6 (blockcode -> blockcode command .)
    DO              reduce using rule 6 (blockcode -> blockcode command .)
    WHILE           reduce using rule 6 (blockcode -> blockcode command .)
    ID_SC           reduce using rule 6 (blockcode -> blockcode command .)
    ID_LI           reduce using rule 6 (blockcode -> blockcode command .)
    XOR             reduce using rule 6 (blockcode -> blockcode command .)
    INCREMENT       reduce using rule 6 (blockcode -> blockcode command .)
    DECREMENT       reduce using rule 6 (blockcode -> blockcode command .)
    LPAREN          reduce using rule 6 (blockcode -> blockcode command .)
    NUMBER          reduce using rule 6 (blockcode -> blockcode command .)
    TRUE            reduce using rule 6 (blockcode -> blockcode command .)
    FALSE           reduce using rule 6 (blockcode -> blockcode command .)
    ID              reduce using rule 6 (blockcode -> blockcode command .)


state 135

    (22) interations -> WHILE LPAREN exp RPAREN . LBRACE blockcode RBRACE
    (23) interations -> WHILE LPAREN exp RPAREN . LBRACE RBRACE

    LBRACE          shift and go to state 144


state 136

    (8) command -> IF LPAREN exp RPAREN if_statement .

    IF              reduce using rule 8 (command -> IF LPAREN exp RPAREN if_statement .)
    RETURN          reduce using rule 8 (command -> IF LPAREN exp RPAREN if_statement .)
    BREAK           reduce using rule 8 (command -> IF LPAREN exp RPAREN if_statement .)
    CONTINUE        reduce using rule 8 (command -> IF LPAREN exp RPAREN if_statement .)
    SUB             reduce using rule 8 (command -> IF LPAREN exp RPAREN if_statement .)
    FOR             reduce using rule 8 (command -> IF LPAREN exp RPAREN if_statement .)
    DO              reduce using rule 8 (command -> IF LPAREN exp RPAREN if_statement .)
    WHILE           reduce using rule 8 (command -> IF LPAREN exp RPAREN if_statement .)
    ID_SC           reduce using rule 8 (command -> IF LPAREN exp RPAREN if_statement .)
    ID_LI           reduce using rule 8 (command -> IF LPAREN exp RPAREN if_statement .)
    XOR             reduce using rule 8 (command -> IF LPAREN exp RPAREN if_statement .)
    INCREMENT       reduce using rule 8 (command -> IF LPAREN exp RPAREN if_statement .)
    DECREMENT       reduce using rule 8 (command -> IF LPAREN exp RPAREN if_statement .)
    LPAREN          reduce using rule 8 (command -> IF LPAREN exp RPAREN if_statement .)
    NUMBER          reduce using rule 8 (command -> IF LPAREN exp RPAREN if_statement .)
    TRUE            reduce using rule 8 (command -> IF LPAREN exp RPAREN if_statement .)
    FALSE           reduce using rule 8 (command -> IF LPAREN exp RPAREN if_statement .)
    ID              reduce using rule 8 (command -> IF LPAREN exp RPAREN if_statement .)
    $end            reduce using rule 8 (command -> IF LPAREN exp RPAREN if_statement .)
    RBRACE          reduce using rule 8 (command -> IF LPAREN exp RPAREN if_statement .)


state 137

    (13) if_statement -> LBRACE . blockcode RBRACE
    (14) if_statement -> LBRACE . blockcode RBRACE ELSE LBRACE blockcode RBRACE
    (15) if_statement -> LBRACE . blockcode RBRACE elsif
    (5) blockcode -> . command
    (6) blockcode -> . blockcode command
    (7) command -> . interations
    (8) command -> . IF LPAREN exp RPAREN if_statement
    (9) command -> . exp SEMICOLON
    (10) command -> . RETURN exp SEMICOLON
    (11) command -> . BREAK SEMICOLON
    (12) command -> . CONTINUE SEMICOLON
    (20) interations -> . FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (21) interations -> . DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN
    (22) interations -> . WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE
    (23) interations -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (32) exp -> . ID_SC EQUALS exp_lor
    (33) exp -> . ID_LI EQUALS exp_lor
    (34) exp -> . ID_SC MINUSEQUAL exp_lor
    (35) exp -> . ID_SC PLUSEQUAL exp_lor
    (36) exp -> . ID_SC MODEQUAL exp_lor
    (37) exp -> . ID_SC DIVEQUAL exp_lor
    (38) exp -> . ID_SC TIMESEQUAL exp_lor
    (39) exp -> . exp_lor
    (40) exp_lor -> . exp_lor LOR exp_land
    (41) exp_lor -> . exp_land
    (42) exp_land -> . exp_land LAND exp_or
    (43) exp_land -> . exp_or
    (44) exp_or -> . exp_or OR exp_and
    (45) exp_or -> . exp_and
    (46) exp_and -> . exp_and AND exp_comp
    (47) exp_and -> . exp_comp_eq
    (48) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (49) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (50) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (51) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (52) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (53) exp_comp_eq -> . exp_comp
    (54) exp_comp -> . exp_comp GT exp_plusminus
    (55) exp_comp -> . exp_comp LT exp_plusminus
    (56) exp_comp -> . exp_comp GE exp_plusminus
    (57) exp_comp -> . exp_comp LE exp_plusminus
    (58) exp_comp -> . exp_comp SLT exp_plusminus
    (59) exp_comp -> . exp_comp SGT exp_plusminus
    (60) exp_comp -> . exp_comp SGE exp_plusminus
    (61) exp_comp -> . exp_comp SLE exp_plusminus
    (62) exp_comp -> . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    IF              shift and go to state 5
    RETURN          shift and go to state 8
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    FOR             shift and go to state 13
    DO              shift and go to state 14
    WHILE           shift and go to state 15
    ID_SC           shift and go to state 16
    ID_LI           shift and go to state 18
    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    blockcode                      shift and go to state 145
    command                        shift and go to state 95
    interations                    shift and go to state 4
    exp                            shift and go to state 7
    exp_lor                        shift and go to state 17
    exp_land                       shift and go to state 19
    exp_or                         shift and go to state 20
    exp_and                        shift and go to state 21
    exp_comp                       shift and go to state 22
    exp_comp_eq                    shift and go to state 23
    exp_plusminus                  shift and go to state 24
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 138

    (26) function -> SUB ID LPAREN RPAREN LBRACE . blockcode RBRACE
    (5) blockcode -> . command
    (6) blockcode -> . blockcode command
    (7) command -> . interations
    (8) command -> . IF LPAREN exp RPAREN if_statement
    (9) command -> . exp SEMICOLON
    (10) command -> . RETURN exp SEMICOLON
    (11) command -> . BREAK SEMICOLON
    (12) command -> . CONTINUE SEMICOLON
    (20) interations -> . FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (21) interations -> . DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN
    (22) interations -> . WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE
    (23) interations -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (32) exp -> . ID_SC EQUALS exp_lor
    (33) exp -> . ID_LI EQUALS exp_lor
    (34) exp -> . ID_SC MINUSEQUAL exp_lor
    (35) exp -> . ID_SC PLUSEQUAL exp_lor
    (36) exp -> . ID_SC MODEQUAL exp_lor
    (37) exp -> . ID_SC DIVEQUAL exp_lor
    (38) exp -> . ID_SC TIMESEQUAL exp_lor
    (39) exp -> . exp_lor
    (40) exp_lor -> . exp_lor LOR exp_land
    (41) exp_lor -> . exp_land
    (42) exp_land -> . exp_land LAND exp_or
    (43) exp_land -> . exp_or
    (44) exp_or -> . exp_or OR exp_and
    (45) exp_or -> . exp_and
    (46) exp_and -> . exp_and AND exp_comp
    (47) exp_and -> . exp_comp_eq
    (48) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (49) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (50) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (51) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (52) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (53) exp_comp_eq -> . exp_comp
    (54) exp_comp -> . exp_comp GT exp_plusminus
    (55) exp_comp -> . exp_comp LT exp_plusminus
    (56) exp_comp -> . exp_comp GE exp_plusminus
    (57) exp_comp -> . exp_comp LE exp_plusminus
    (58) exp_comp -> . exp_comp SLT exp_plusminus
    (59) exp_comp -> . exp_comp SGT exp_plusminus
    (60) exp_comp -> . exp_comp SGE exp_plusminus
    (61) exp_comp -> . exp_comp SLE exp_plusminus
    (62) exp_comp -> . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    IF              shift and go to state 5
    RETURN          shift and go to state 8
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    FOR             shift and go to state 13
    DO              shift and go to state 14
    WHILE           shift and go to state 15
    ID_SC           shift and go to state 16
    ID_LI           shift and go to state 18
    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    blockcode                      shift and go to state 146
    command                        shift and go to state 95
    interations                    shift and go to state 4
    exp                            shift and go to state 7
    exp_lor                        shift and go to state 17
    exp_land                       shift and go to state 19
    exp_or                         shift and go to state 20
    exp_and                        shift and go to state 21
    exp_comp                       shift and go to state 22
    exp_comp_eq                    shift and go to state 23
    exp_plusminus                  shift and go to state 24
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 139

    (27) function -> SUB ID LPAREN function_assignments RPAREN . LBRACE blockcode RBRACE

    LBRACE          shift and go to state 147


state 140

    (29) function_assignments -> exp COMMA function_assignments .

    RPAREN          reduce using rule 29 (function_assignments -> exp COMMA function_assignments .)


state 141

    (20) interations -> FOR LPAREN for_assignments SEMICOLON exp . SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE

    SEMICOLON       shift and go to state 148


state 142

    (25) for_assignments -> exp COMMA for_assignments .

    SEMICOLON       reduce using rule 25 (for_assignments -> exp COMMA for_assignments .)
    RPAREN          reduce using rule 25 (for_assignments -> exp COMMA for_assignments .)


state 143

    (21) interations -> DO LBRACE blockcode RBRACE WHILE . LPAREN exp RPAREN

    LPAREN          shift and go to state 149


state 144

    (22) interations -> WHILE LPAREN exp RPAREN LBRACE . blockcode RBRACE
    (23) interations -> WHILE LPAREN exp RPAREN LBRACE . RBRACE
    (5) blockcode -> . command
    (6) blockcode -> . blockcode command
    (7) command -> . interations
    (8) command -> . IF LPAREN exp RPAREN if_statement
    (9) command -> . exp SEMICOLON
    (10) command -> . RETURN exp SEMICOLON
    (11) command -> . BREAK SEMICOLON
    (12) command -> . CONTINUE SEMICOLON
    (20) interations -> . FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (21) interations -> . DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN
    (22) interations -> . WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE
    (23) interations -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (32) exp -> . ID_SC EQUALS exp_lor
    (33) exp -> . ID_LI EQUALS exp_lor
    (34) exp -> . ID_SC MINUSEQUAL exp_lor
    (35) exp -> . ID_SC PLUSEQUAL exp_lor
    (36) exp -> . ID_SC MODEQUAL exp_lor
    (37) exp -> . ID_SC DIVEQUAL exp_lor
    (38) exp -> . ID_SC TIMESEQUAL exp_lor
    (39) exp -> . exp_lor
    (40) exp_lor -> . exp_lor LOR exp_land
    (41) exp_lor -> . exp_land
    (42) exp_land -> . exp_land LAND exp_or
    (43) exp_land -> . exp_or
    (44) exp_or -> . exp_or OR exp_and
    (45) exp_or -> . exp_and
    (46) exp_and -> . exp_and AND exp_comp
    (47) exp_and -> . exp_comp_eq
    (48) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (49) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (50) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (51) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (52) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (53) exp_comp_eq -> . exp_comp
    (54) exp_comp -> . exp_comp GT exp_plusminus
    (55) exp_comp -> . exp_comp LT exp_plusminus
    (56) exp_comp -> . exp_comp GE exp_plusminus
    (57) exp_comp -> . exp_comp LE exp_plusminus
    (58) exp_comp -> . exp_comp SLT exp_plusminus
    (59) exp_comp -> . exp_comp SGT exp_plusminus
    (60) exp_comp -> . exp_comp SGE exp_plusminus
    (61) exp_comp -> . exp_comp SLE exp_plusminus
    (62) exp_comp -> . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    RBRACE          shift and go to state 151
    IF              shift and go to state 5
    RETURN          shift and go to state 8
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    FOR             shift and go to state 13
    DO              shift and go to state 14
    WHILE           shift and go to state 15
    ID_SC           shift and go to state 16
    ID_LI           shift and go to state 18
    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    exp                            shift and go to state 7
    blockcode                      shift and go to state 150
    command                        shift and go to state 95
    interations                    shift and go to state 4
    exp_lor                        shift and go to state 17
    exp_land                       shift and go to state 19
    exp_or                         shift and go to state 20
    exp_and                        shift and go to state 21
    exp_comp                       shift and go to state 22
    exp_comp_eq                    shift and go to state 23
    exp_plusminus                  shift and go to state 24
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 145

    (13) if_statement -> LBRACE blockcode . RBRACE
    (14) if_statement -> LBRACE blockcode . RBRACE ELSE LBRACE blockcode RBRACE
    (15) if_statement -> LBRACE blockcode . RBRACE elsif
    (6) blockcode -> blockcode . command
    (7) command -> . interations
    (8) command -> . IF LPAREN exp RPAREN if_statement
    (9) command -> . exp SEMICOLON
    (10) command -> . RETURN exp SEMICOLON
    (11) command -> . BREAK SEMICOLON
    (12) command -> . CONTINUE SEMICOLON
    (20) interations -> . FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (21) interations -> . DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN
    (22) interations -> . WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE
    (23) interations -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (32) exp -> . ID_SC EQUALS exp_lor
    (33) exp -> . ID_LI EQUALS exp_lor
    (34) exp -> . ID_SC MINUSEQUAL exp_lor
    (35) exp -> . ID_SC PLUSEQUAL exp_lor
    (36) exp -> . ID_SC MODEQUAL exp_lor
    (37) exp -> . ID_SC DIVEQUAL exp_lor
    (38) exp -> . ID_SC TIMESEQUAL exp_lor
    (39) exp -> . exp_lor
    (40) exp_lor -> . exp_lor LOR exp_land
    (41) exp_lor -> . exp_land
    (42) exp_land -> . exp_land LAND exp_or
    (43) exp_land -> . exp_or
    (44) exp_or -> . exp_or OR exp_and
    (45) exp_or -> . exp_and
    (46) exp_and -> . exp_and AND exp_comp
    (47) exp_and -> . exp_comp_eq
    (48) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (49) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (50) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (51) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (52) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (53) exp_comp_eq -> . exp_comp
    (54) exp_comp -> . exp_comp GT exp_plusminus
    (55) exp_comp -> . exp_comp LT exp_plusminus
    (56) exp_comp -> . exp_comp GE exp_plusminus
    (57) exp_comp -> . exp_comp LE exp_plusminus
    (58) exp_comp -> . exp_comp SLT exp_plusminus
    (59) exp_comp -> . exp_comp SGT exp_plusminus
    (60) exp_comp -> . exp_comp SGE exp_plusminus
    (61) exp_comp -> . exp_comp SLE exp_plusminus
    (62) exp_comp -> . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    RBRACE          shift and go to state 152
    IF              shift and go to state 5
    RETURN          shift and go to state 8
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    FOR             shift and go to state 13
    DO              shift and go to state 14
    WHILE           shift and go to state 15
    ID_SC           shift and go to state 16
    ID_LI           shift and go to state 18
    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    command                        shift and go to state 134
    interations                    shift and go to state 4
    exp                            shift and go to state 7
    exp_lor                        shift and go to state 17
    exp_land                       shift and go to state 19
    exp_or                         shift and go to state 20
    exp_and                        shift and go to state 21
    exp_comp                       shift and go to state 22
    exp_comp_eq                    shift and go to state 23
    exp_plusminus                  shift and go to state 24
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 146

    (26) function -> SUB ID LPAREN RPAREN LBRACE blockcode . RBRACE
    (6) blockcode -> blockcode . command
    (7) command -> . interations
    (8) command -> . IF LPAREN exp RPAREN if_statement
    (9) command -> . exp SEMICOLON
    (10) command -> . RETURN exp SEMICOLON
    (11) command -> . BREAK SEMICOLON
    (12) command -> . CONTINUE SEMICOLON
    (20) interations -> . FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (21) interations -> . DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN
    (22) interations -> . WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE
    (23) interations -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (32) exp -> . ID_SC EQUALS exp_lor
    (33) exp -> . ID_LI EQUALS exp_lor
    (34) exp -> . ID_SC MINUSEQUAL exp_lor
    (35) exp -> . ID_SC PLUSEQUAL exp_lor
    (36) exp -> . ID_SC MODEQUAL exp_lor
    (37) exp -> . ID_SC DIVEQUAL exp_lor
    (38) exp -> . ID_SC TIMESEQUAL exp_lor
    (39) exp -> . exp_lor
    (40) exp_lor -> . exp_lor LOR exp_land
    (41) exp_lor -> . exp_land
    (42) exp_land -> . exp_land LAND exp_or
    (43) exp_land -> . exp_or
    (44) exp_or -> . exp_or OR exp_and
    (45) exp_or -> . exp_and
    (46) exp_and -> . exp_and AND exp_comp
    (47) exp_and -> . exp_comp_eq
    (48) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (49) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (50) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (51) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (52) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (53) exp_comp_eq -> . exp_comp
    (54) exp_comp -> . exp_comp GT exp_plusminus
    (55) exp_comp -> . exp_comp LT exp_plusminus
    (56) exp_comp -> . exp_comp GE exp_plusminus
    (57) exp_comp -> . exp_comp LE exp_plusminus
    (58) exp_comp -> . exp_comp SLT exp_plusminus
    (59) exp_comp -> . exp_comp SGT exp_plusminus
    (60) exp_comp -> . exp_comp SGE exp_plusminus
    (61) exp_comp -> . exp_comp SLE exp_plusminus
    (62) exp_comp -> . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    RBRACE          shift and go to state 153
    IF              shift and go to state 5
    RETURN          shift and go to state 8
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    FOR             shift and go to state 13
    DO              shift and go to state 14
    WHILE           shift and go to state 15
    ID_SC           shift and go to state 16
    ID_LI           shift and go to state 18
    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    command                        shift and go to state 134
    interations                    shift and go to state 4
    exp                            shift and go to state 7
    exp_lor                        shift and go to state 17
    exp_land                       shift and go to state 19
    exp_or                         shift and go to state 20
    exp_and                        shift and go to state 21
    exp_comp                       shift and go to state 22
    exp_comp_eq                    shift and go to state 23
    exp_plusminus                  shift and go to state 24
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 147

    (27) function -> SUB ID LPAREN function_assignments RPAREN LBRACE . blockcode RBRACE
    (5) blockcode -> . command
    (6) blockcode -> . blockcode command
    (7) command -> . interations
    (8) command -> . IF LPAREN exp RPAREN if_statement
    (9) command -> . exp SEMICOLON
    (10) command -> . RETURN exp SEMICOLON
    (11) command -> . BREAK SEMICOLON
    (12) command -> . CONTINUE SEMICOLON
    (20) interations -> . FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (21) interations -> . DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN
    (22) interations -> . WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE
    (23) interations -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (32) exp -> . ID_SC EQUALS exp_lor
    (33) exp -> . ID_LI EQUALS exp_lor
    (34) exp -> . ID_SC MINUSEQUAL exp_lor
    (35) exp -> . ID_SC PLUSEQUAL exp_lor
    (36) exp -> . ID_SC MODEQUAL exp_lor
    (37) exp -> . ID_SC DIVEQUAL exp_lor
    (38) exp -> . ID_SC TIMESEQUAL exp_lor
    (39) exp -> . exp_lor
    (40) exp_lor -> . exp_lor LOR exp_land
    (41) exp_lor -> . exp_land
    (42) exp_land -> . exp_land LAND exp_or
    (43) exp_land -> . exp_or
    (44) exp_or -> . exp_or OR exp_and
    (45) exp_or -> . exp_and
    (46) exp_and -> . exp_and AND exp_comp
    (47) exp_and -> . exp_comp_eq
    (48) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (49) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (50) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (51) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (52) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (53) exp_comp_eq -> . exp_comp
    (54) exp_comp -> . exp_comp GT exp_plusminus
    (55) exp_comp -> . exp_comp LT exp_plusminus
    (56) exp_comp -> . exp_comp GE exp_plusminus
    (57) exp_comp -> . exp_comp LE exp_plusminus
    (58) exp_comp -> . exp_comp SLT exp_plusminus
    (59) exp_comp -> . exp_comp SGT exp_plusminus
    (60) exp_comp -> . exp_comp SGE exp_plusminus
    (61) exp_comp -> . exp_comp SLE exp_plusminus
    (62) exp_comp -> . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    IF              shift and go to state 5
    RETURN          shift and go to state 8
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    FOR             shift and go to state 13
    DO              shift and go to state 14
    WHILE           shift and go to state 15
    ID_SC           shift and go to state 16
    ID_LI           shift and go to state 18
    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    blockcode                      shift and go to state 154
    command                        shift and go to state 95
    interations                    shift and go to state 4
    exp                            shift and go to state 7
    exp_lor                        shift and go to state 17
    exp_land                       shift and go to state 19
    exp_or                         shift and go to state 20
    exp_and                        shift and go to state 21
    exp_comp                       shift and go to state 22
    exp_comp_eq                    shift and go to state 23
    exp_plusminus                  shift and go to state 24
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 148

    (20) interations -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON . for_assignments RPAREN LBRACE blockcode RBRACE
    (24) for_assignments -> . exp
    (25) for_assignments -> . exp COMMA for_assignments
    (32) exp -> . ID_SC EQUALS exp_lor
    (33) exp -> . ID_LI EQUALS exp_lor
    (34) exp -> . ID_SC MINUSEQUAL exp_lor
    (35) exp -> . ID_SC PLUSEQUAL exp_lor
    (36) exp -> . ID_SC MODEQUAL exp_lor
    (37) exp -> . ID_SC DIVEQUAL exp_lor
    (38) exp -> . ID_SC TIMESEQUAL exp_lor
    (39) exp -> . exp_lor
    (40) exp_lor -> . exp_lor LOR exp_land
    (41) exp_lor -> . exp_land
    (42) exp_land -> . exp_land LAND exp_or
    (43) exp_land -> . exp_or
    (44) exp_or -> . exp_or OR exp_and
    (45) exp_or -> . exp_and
    (46) exp_and -> . exp_and AND exp_comp
    (47) exp_and -> . exp_comp_eq
    (48) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (49) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (50) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (51) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (52) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (53) exp_comp_eq -> . exp_comp
    (54) exp_comp -> . exp_comp GT exp_plusminus
    (55) exp_comp -> . exp_comp LT exp_plusminus
    (56) exp_comp -> . exp_comp GE exp_plusminus
    (57) exp_comp -> . exp_comp LE exp_plusminus
    (58) exp_comp -> . exp_comp SLT exp_plusminus
    (59) exp_comp -> . exp_comp SGT exp_plusminus
    (60) exp_comp -> . exp_comp SGE exp_plusminus
    (61) exp_comp -> . exp_comp SLE exp_plusminus
    (62) exp_comp -> . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    ID_SC           shift and go to state 16
    ID_LI           shift and go to state 18
    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    for_assignments                shift and go to state 155
    exp                            shift and go to state 93
    exp_lor                        shift and go to state 17
    exp_land                       shift and go to state 19
    exp_or                         shift and go to state 20
    exp_and                        shift and go to state 21
    exp_comp                       shift and go to state 22
    exp_comp_eq                    shift and go to state 23
    exp_plusminus                  shift and go to state 24
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 149

    (21) interations -> DO LBRACE blockcode RBRACE WHILE LPAREN . exp RPAREN
    (32) exp -> . ID_SC EQUALS exp_lor
    (33) exp -> . ID_LI EQUALS exp_lor
    (34) exp -> . ID_SC MINUSEQUAL exp_lor
    (35) exp -> . ID_SC PLUSEQUAL exp_lor
    (36) exp -> . ID_SC MODEQUAL exp_lor
    (37) exp -> . ID_SC DIVEQUAL exp_lor
    (38) exp -> . ID_SC TIMESEQUAL exp_lor
    (39) exp -> . exp_lor
    (40) exp_lor -> . exp_lor LOR exp_land
    (41) exp_lor -> . exp_land
    (42) exp_land -> . exp_land LAND exp_or
    (43) exp_land -> . exp_or
    (44) exp_or -> . exp_or OR exp_and
    (45) exp_or -> . exp_and
    (46) exp_and -> . exp_and AND exp_comp
    (47) exp_and -> . exp_comp_eq
    (48) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (49) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (50) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (51) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (52) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (53) exp_comp_eq -> . exp_comp
    (54) exp_comp -> . exp_comp GT exp_plusminus
    (55) exp_comp -> . exp_comp LT exp_plusminus
    (56) exp_comp -> . exp_comp GE exp_plusminus
    (57) exp_comp -> . exp_comp LE exp_plusminus
    (58) exp_comp -> . exp_comp SLT exp_plusminus
    (59) exp_comp -> . exp_comp SGT exp_plusminus
    (60) exp_comp -> . exp_comp SGE exp_plusminus
    (61) exp_comp -> . exp_comp SLE exp_plusminus
    (62) exp_comp -> . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    ID_SC           shift and go to state 16
    ID_LI           shift and go to state 18
    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    exp                            shift and go to state 156
    exp_lor                        shift and go to state 17
    exp_land                       shift and go to state 19
    exp_or                         shift and go to state 20
    exp_and                        shift and go to state 21
    exp_comp                       shift and go to state 22
    exp_comp_eq                    shift and go to state 23
    exp_plusminus                  shift and go to state 24
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 150

    (22) interations -> WHILE LPAREN exp RPAREN LBRACE blockcode . RBRACE
    (6) blockcode -> blockcode . command
    (7) command -> . interations
    (8) command -> . IF LPAREN exp RPAREN if_statement
    (9) command -> . exp SEMICOLON
    (10) command -> . RETURN exp SEMICOLON
    (11) command -> . BREAK SEMICOLON
    (12) command -> . CONTINUE SEMICOLON
    (20) interations -> . FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (21) interations -> . DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN
    (22) interations -> . WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE
    (23) interations -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (32) exp -> . ID_SC EQUALS exp_lor
    (33) exp -> . ID_LI EQUALS exp_lor
    (34) exp -> . ID_SC MINUSEQUAL exp_lor
    (35) exp -> . ID_SC PLUSEQUAL exp_lor
    (36) exp -> . ID_SC MODEQUAL exp_lor
    (37) exp -> . ID_SC DIVEQUAL exp_lor
    (38) exp -> . ID_SC TIMESEQUAL exp_lor
    (39) exp -> . exp_lor
    (40) exp_lor -> . exp_lor LOR exp_land
    (41) exp_lor -> . exp_land
    (42) exp_land -> . exp_land LAND exp_or
    (43) exp_land -> . exp_or
    (44) exp_or -> . exp_or OR exp_and
    (45) exp_or -> . exp_and
    (46) exp_and -> . exp_and AND exp_comp
    (47) exp_and -> . exp_comp_eq
    (48) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (49) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (50) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (51) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (52) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (53) exp_comp_eq -> . exp_comp
    (54) exp_comp -> . exp_comp GT exp_plusminus
    (55) exp_comp -> . exp_comp LT exp_plusminus
    (56) exp_comp -> . exp_comp GE exp_plusminus
    (57) exp_comp -> . exp_comp LE exp_plusminus
    (58) exp_comp -> . exp_comp SLT exp_plusminus
    (59) exp_comp -> . exp_comp SGT exp_plusminus
    (60) exp_comp -> . exp_comp SGE exp_plusminus
    (61) exp_comp -> . exp_comp SLE exp_plusminus
    (62) exp_comp -> . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    RBRACE          shift and go to state 157
    IF              shift and go to state 5
    RETURN          shift and go to state 8
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    FOR             shift and go to state 13
    DO              shift and go to state 14
    WHILE           shift and go to state 15
    ID_SC           shift and go to state 16
    ID_LI           shift and go to state 18
    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    exp                            shift and go to state 7
    command                        shift and go to state 134
    interations                    shift and go to state 4
    exp_lor                        shift and go to state 17
    exp_land                       shift and go to state 19
    exp_or                         shift and go to state 20
    exp_and                        shift and go to state 21
    exp_comp                       shift and go to state 22
    exp_comp_eq                    shift and go to state 23
    exp_plusminus                  shift and go to state 24
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 151

    (23) interations -> WHILE LPAREN exp RPAREN LBRACE RBRACE .

    IF              reduce using rule 23 (interations -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    RETURN          reduce using rule 23 (interations -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    BREAK           reduce using rule 23 (interations -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    CONTINUE        reduce using rule 23 (interations -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    SUB             reduce using rule 23 (interations -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    FOR             reduce using rule 23 (interations -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    DO              reduce using rule 23 (interations -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    WHILE           reduce using rule 23 (interations -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    ID_SC           reduce using rule 23 (interations -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    ID_LI           reduce using rule 23 (interations -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    XOR             reduce using rule 23 (interations -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    INCREMENT       reduce using rule 23 (interations -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    DECREMENT       reduce using rule 23 (interations -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    LPAREN          reduce using rule 23 (interations -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    NUMBER          reduce using rule 23 (interations -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    TRUE            reduce using rule 23 (interations -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    FALSE           reduce using rule 23 (interations -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    ID              reduce using rule 23 (interations -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    $end            reduce using rule 23 (interations -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)
    RBRACE          reduce using rule 23 (interations -> WHILE LPAREN exp RPAREN LBRACE RBRACE .)


state 152

    (13) if_statement -> LBRACE blockcode RBRACE .
    (14) if_statement -> LBRACE blockcode RBRACE . ELSE LBRACE blockcode RBRACE
    (15) if_statement -> LBRACE blockcode RBRACE . elsif
    (16) elsif -> . ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE
    (17) elsif -> . ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2

    IF              reduce using rule 13 (if_statement -> LBRACE blockcode RBRACE .)
    RETURN          reduce using rule 13 (if_statement -> LBRACE blockcode RBRACE .)
    BREAK           reduce using rule 13 (if_statement -> LBRACE blockcode RBRACE .)
    CONTINUE        reduce using rule 13 (if_statement -> LBRACE blockcode RBRACE .)
    SUB             reduce using rule 13 (if_statement -> LBRACE blockcode RBRACE .)
    FOR             reduce using rule 13 (if_statement -> LBRACE blockcode RBRACE .)
    DO              reduce using rule 13 (if_statement -> LBRACE blockcode RBRACE .)
    WHILE           reduce using rule 13 (if_statement -> LBRACE blockcode RBRACE .)
    ID_SC           reduce using rule 13 (if_statement -> LBRACE blockcode RBRACE .)
    ID_LI           reduce using rule 13 (if_statement -> LBRACE blockcode RBRACE .)
    XOR             reduce using rule 13 (if_statement -> LBRACE blockcode RBRACE .)
    INCREMENT       reduce using rule 13 (if_statement -> LBRACE blockcode RBRACE .)
    DECREMENT       reduce using rule 13 (if_statement -> LBRACE blockcode RBRACE .)
    LPAREN          reduce using rule 13 (if_statement -> LBRACE blockcode RBRACE .)
    NUMBER          reduce using rule 13 (if_statement -> LBRACE blockcode RBRACE .)
    TRUE            reduce using rule 13 (if_statement -> LBRACE blockcode RBRACE .)
    FALSE           reduce using rule 13 (if_statement -> LBRACE blockcode RBRACE .)
    ID              reduce using rule 13 (if_statement -> LBRACE blockcode RBRACE .)
    $end            reduce using rule 13 (if_statement -> LBRACE blockcode RBRACE .)
    RBRACE          reduce using rule 13 (if_statement -> LBRACE blockcode RBRACE .)
    ELSE            shift and go to state 158
    ELSIF           shift and go to state 160

    elsif                          shift and go to state 159

state 153

    (26) function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .

    IF              reduce using rule 26 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    RETURN          reduce using rule 26 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    BREAK           reduce using rule 26 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    CONTINUE        reduce using rule 26 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    SUB             reduce using rule 26 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    FOR             reduce using rule 26 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    DO              reduce using rule 26 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    WHILE           reduce using rule 26 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    ID_SC           reduce using rule 26 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    ID_LI           reduce using rule 26 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    XOR             reduce using rule 26 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    INCREMENT       reduce using rule 26 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    DECREMENT       reduce using rule 26 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    LPAREN          reduce using rule 26 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    NUMBER          reduce using rule 26 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    TRUE            reduce using rule 26 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    FALSE           reduce using rule 26 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    ID              reduce using rule 26 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)
    $end            reduce using rule 26 (function -> SUB ID LPAREN RPAREN LBRACE blockcode RBRACE .)


state 154

    (27) function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode . RBRACE
    (6) blockcode -> blockcode . command
    (7) command -> . interations
    (8) command -> . IF LPAREN exp RPAREN if_statement
    (9) command -> . exp SEMICOLON
    (10) command -> . RETURN exp SEMICOLON
    (11) command -> . BREAK SEMICOLON
    (12) command -> . CONTINUE SEMICOLON
    (20) interations -> . FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (21) interations -> . DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN
    (22) interations -> . WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE
    (23) interations -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (32) exp -> . ID_SC EQUALS exp_lor
    (33) exp -> . ID_LI EQUALS exp_lor
    (34) exp -> . ID_SC MINUSEQUAL exp_lor
    (35) exp -> . ID_SC PLUSEQUAL exp_lor
    (36) exp -> . ID_SC MODEQUAL exp_lor
    (37) exp -> . ID_SC DIVEQUAL exp_lor
    (38) exp -> . ID_SC TIMESEQUAL exp_lor
    (39) exp -> . exp_lor
    (40) exp_lor -> . exp_lor LOR exp_land
    (41) exp_lor -> . exp_land
    (42) exp_land -> . exp_land LAND exp_or
    (43) exp_land -> . exp_or
    (44) exp_or -> . exp_or OR exp_and
    (45) exp_or -> . exp_and
    (46) exp_and -> . exp_and AND exp_comp
    (47) exp_and -> . exp_comp_eq
    (48) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (49) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (50) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (51) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (52) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (53) exp_comp_eq -> . exp_comp
    (54) exp_comp -> . exp_comp GT exp_plusminus
    (55) exp_comp -> . exp_comp LT exp_plusminus
    (56) exp_comp -> . exp_comp GE exp_plusminus
    (57) exp_comp -> . exp_comp LE exp_plusminus
    (58) exp_comp -> . exp_comp SLT exp_plusminus
    (59) exp_comp -> . exp_comp SGT exp_plusminus
    (60) exp_comp -> . exp_comp SGE exp_plusminus
    (61) exp_comp -> . exp_comp SLE exp_plusminus
    (62) exp_comp -> . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    RBRACE          shift and go to state 161
    IF              shift and go to state 5
    RETURN          shift and go to state 8
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    FOR             shift and go to state 13
    DO              shift and go to state 14
    WHILE           shift and go to state 15
    ID_SC           shift and go to state 16
    ID_LI           shift and go to state 18
    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    command                        shift and go to state 134
    interations                    shift and go to state 4
    exp                            shift and go to state 7
    exp_lor                        shift and go to state 17
    exp_land                       shift and go to state 19
    exp_or                         shift and go to state 20
    exp_and                        shift and go to state 21
    exp_comp                       shift and go to state 22
    exp_comp_eq                    shift and go to state 23
    exp_plusminus                  shift and go to state 24
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 155

    (20) interations -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments . RPAREN LBRACE blockcode RBRACE

    RPAREN          shift and go to state 162


state 156

    (21) interations -> DO LBRACE blockcode RBRACE WHILE LPAREN exp . RPAREN

    RPAREN          shift and go to state 163


state 157

    (22) interations -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .

    IF              reduce using rule 22 (interations -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    RETURN          reduce using rule 22 (interations -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    BREAK           reduce using rule 22 (interations -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    CONTINUE        reduce using rule 22 (interations -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    SUB             reduce using rule 22 (interations -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    FOR             reduce using rule 22 (interations -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    DO              reduce using rule 22 (interations -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    WHILE           reduce using rule 22 (interations -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    ID_SC           reduce using rule 22 (interations -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    ID_LI           reduce using rule 22 (interations -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    XOR             reduce using rule 22 (interations -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    INCREMENT       reduce using rule 22 (interations -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    DECREMENT       reduce using rule 22 (interations -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    LPAREN          reduce using rule 22 (interations -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    NUMBER          reduce using rule 22 (interations -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    TRUE            reduce using rule 22 (interations -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    FALSE           reduce using rule 22 (interations -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    ID              reduce using rule 22 (interations -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    $end            reduce using rule 22 (interations -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    RBRACE          reduce using rule 22 (interations -> WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE .)


state 158

    (14) if_statement -> LBRACE blockcode RBRACE ELSE . LBRACE blockcode RBRACE

    LBRACE          shift and go to state 164


state 159

    (15) if_statement -> LBRACE blockcode RBRACE elsif .

    IF              reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE elsif .)
    RETURN          reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE elsif .)
    BREAK           reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE elsif .)
    CONTINUE        reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE elsif .)
    SUB             reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE elsif .)
    FOR             reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE elsif .)
    DO              reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE elsif .)
    WHILE           reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE elsif .)
    ID_SC           reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE elsif .)
    ID_LI           reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE elsif .)
    XOR             reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE elsif .)
    INCREMENT       reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE elsif .)
    DECREMENT       reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE elsif .)
    LPAREN          reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE elsif .)
    NUMBER          reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE elsif .)
    TRUE            reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE elsif .)
    FALSE           reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE elsif .)
    ID              reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE elsif .)
    $end            reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE elsif .)
    RBRACE          reduce using rule 15 (if_statement -> LBRACE blockcode RBRACE elsif .)


state 160

    (16) elsif -> ELSIF . LPAREN exp RPAREN LBRACE blockcode RBRACE
    (17) elsif -> ELSIF . LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2

    LPAREN          shift and go to state 165


state 161

    (27) function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .

    IF              reduce using rule 27 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    RETURN          reduce using rule 27 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    BREAK           reduce using rule 27 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    CONTINUE        reduce using rule 27 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    SUB             reduce using rule 27 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    FOR             reduce using rule 27 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    DO              reduce using rule 27 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    WHILE           reduce using rule 27 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    ID_SC           reduce using rule 27 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    ID_LI           reduce using rule 27 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    XOR             reduce using rule 27 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    INCREMENT       reduce using rule 27 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    DECREMENT       reduce using rule 27 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    LPAREN          reduce using rule 27 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    NUMBER          reduce using rule 27 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    TRUE            reduce using rule 27 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    FALSE           reduce using rule 27 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    ID              reduce using rule 27 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)
    $end            reduce using rule 27 (function -> SUB ID LPAREN function_assignments RPAREN LBRACE blockcode RBRACE .)


state 162

    (20) interations -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN . LBRACE blockcode RBRACE

    LBRACE          shift and go to state 166


state 163

    (21) interations -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .

    IF              reduce using rule 21 (interations -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    RETURN          reduce using rule 21 (interations -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    BREAK           reduce using rule 21 (interations -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    CONTINUE        reduce using rule 21 (interations -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    SUB             reduce using rule 21 (interations -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    FOR             reduce using rule 21 (interations -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    DO              reduce using rule 21 (interations -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    WHILE           reduce using rule 21 (interations -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    ID_SC           reduce using rule 21 (interations -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    ID_LI           reduce using rule 21 (interations -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    XOR             reduce using rule 21 (interations -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    INCREMENT       reduce using rule 21 (interations -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    DECREMENT       reduce using rule 21 (interations -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    LPAREN          reduce using rule 21 (interations -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    NUMBER          reduce using rule 21 (interations -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    TRUE            reduce using rule 21 (interations -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    FALSE           reduce using rule 21 (interations -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    ID              reduce using rule 21 (interations -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    $end            reduce using rule 21 (interations -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)
    RBRACE          reduce using rule 21 (interations -> DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN .)


state 164

    (14) if_statement -> LBRACE blockcode RBRACE ELSE LBRACE . blockcode RBRACE
    (5) blockcode -> . command
    (6) blockcode -> . blockcode command
    (7) command -> . interations
    (8) command -> . IF LPAREN exp RPAREN if_statement
    (9) command -> . exp SEMICOLON
    (10) command -> . RETURN exp SEMICOLON
    (11) command -> . BREAK SEMICOLON
    (12) command -> . CONTINUE SEMICOLON
    (20) interations -> . FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (21) interations -> . DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN
    (22) interations -> . WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE
    (23) interations -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (32) exp -> . ID_SC EQUALS exp_lor
    (33) exp -> . ID_LI EQUALS exp_lor
    (34) exp -> . ID_SC MINUSEQUAL exp_lor
    (35) exp -> . ID_SC PLUSEQUAL exp_lor
    (36) exp -> . ID_SC MODEQUAL exp_lor
    (37) exp -> . ID_SC DIVEQUAL exp_lor
    (38) exp -> . ID_SC TIMESEQUAL exp_lor
    (39) exp -> . exp_lor
    (40) exp_lor -> . exp_lor LOR exp_land
    (41) exp_lor -> . exp_land
    (42) exp_land -> . exp_land LAND exp_or
    (43) exp_land -> . exp_or
    (44) exp_or -> . exp_or OR exp_and
    (45) exp_or -> . exp_and
    (46) exp_and -> . exp_and AND exp_comp
    (47) exp_and -> . exp_comp_eq
    (48) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (49) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (50) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (51) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (52) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (53) exp_comp_eq -> . exp_comp
    (54) exp_comp -> . exp_comp GT exp_plusminus
    (55) exp_comp -> . exp_comp LT exp_plusminus
    (56) exp_comp -> . exp_comp GE exp_plusminus
    (57) exp_comp -> . exp_comp LE exp_plusminus
    (58) exp_comp -> . exp_comp SLT exp_plusminus
    (59) exp_comp -> . exp_comp SGT exp_plusminus
    (60) exp_comp -> . exp_comp SGE exp_plusminus
    (61) exp_comp -> . exp_comp SLE exp_plusminus
    (62) exp_comp -> . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    IF              shift and go to state 5
    RETURN          shift and go to state 8
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    FOR             shift and go to state 13
    DO              shift and go to state 14
    WHILE           shift and go to state 15
    ID_SC           shift and go to state 16
    ID_LI           shift and go to state 18
    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    blockcode                      shift and go to state 167
    command                        shift and go to state 95
    interations                    shift and go to state 4
    exp                            shift and go to state 7
    exp_lor                        shift and go to state 17
    exp_land                       shift and go to state 19
    exp_or                         shift and go to state 20
    exp_and                        shift and go to state 21
    exp_comp                       shift and go to state 22
    exp_comp_eq                    shift and go to state 23
    exp_plusminus                  shift and go to state 24
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 165

    (16) elsif -> ELSIF LPAREN . exp RPAREN LBRACE blockcode RBRACE
    (17) elsif -> ELSIF LPAREN . exp RPAREN LBRACE blockcode RBRACE elsif2
    (32) exp -> . ID_SC EQUALS exp_lor
    (33) exp -> . ID_LI EQUALS exp_lor
    (34) exp -> . ID_SC MINUSEQUAL exp_lor
    (35) exp -> . ID_SC PLUSEQUAL exp_lor
    (36) exp -> . ID_SC MODEQUAL exp_lor
    (37) exp -> . ID_SC DIVEQUAL exp_lor
    (38) exp -> . ID_SC TIMESEQUAL exp_lor
    (39) exp -> . exp_lor
    (40) exp_lor -> . exp_lor LOR exp_land
    (41) exp_lor -> . exp_land
    (42) exp_land -> . exp_land LAND exp_or
    (43) exp_land -> . exp_or
    (44) exp_or -> . exp_or OR exp_and
    (45) exp_or -> . exp_and
    (46) exp_and -> . exp_and AND exp_comp
    (47) exp_and -> . exp_comp_eq
    (48) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (49) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (50) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (51) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (52) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (53) exp_comp_eq -> . exp_comp
    (54) exp_comp -> . exp_comp GT exp_plusminus
    (55) exp_comp -> . exp_comp LT exp_plusminus
    (56) exp_comp -> . exp_comp GE exp_plusminus
    (57) exp_comp -> . exp_comp LE exp_plusminus
    (58) exp_comp -> . exp_comp SLT exp_plusminus
    (59) exp_comp -> . exp_comp SGT exp_plusminus
    (60) exp_comp -> . exp_comp SGE exp_plusminus
    (61) exp_comp -> . exp_comp SLE exp_plusminus
    (62) exp_comp -> . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    ID_SC           shift and go to state 16
    ID_LI           shift and go to state 18
    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    exp                            shift and go to state 168
    exp_lor                        shift and go to state 17
    exp_land                       shift and go to state 19
    exp_or                         shift and go to state 20
    exp_and                        shift and go to state 21
    exp_comp                       shift and go to state 22
    exp_comp_eq                    shift and go to state 23
    exp_plusminus                  shift and go to state 24
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 166

    (20) interations -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE . blockcode RBRACE
    (5) blockcode -> . command
    (6) blockcode -> . blockcode command
    (7) command -> . interations
    (8) command -> . IF LPAREN exp RPAREN if_statement
    (9) command -> . exp SEMICOLON
    (10) command -> . RETURN exp SEMICOLON
    (11) command -> . BREAK SEMICOLON
    (12) command -> . CONTINUE SEMICOLON
    (20) interations -> . FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (21) interations -> . DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN
    (22) interations -> . WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE
    (23) interations -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (32) exp -> . ID_SC EQUALS exp_lor
    (33) exp -> . ID_LI EQUALS exp_lor
    (34) exp -> . ID_SC MINUSEQUAL exp_lor
    (35) exp -> . ID_SC PLUSEQUAL exp_lor
    (36) exp -> . ID_SC MODEQUAL exp_lor
    (37) exp -> . ID_SC DIVEQUAL exp_lor
    (38) exp -> . ID_SC TIMESEQUAL exp_lor
    (39) exp -> . exp_lor
    (40) exp_lor -> . exp_lor LOR exp_land
    (41) exp_lor -> . exp_land
    (42) exp_land -> . exp_land LAND exp_or
    (43) exp_land -> . exp_or
    (44) exp_or -> . exp_or OR exp_and
    (45) exp_or -> . exp_and
    (46) exp_and -> . exp_and AND exp_comp
    (47) exp_and -> . exp_comp_eq
    (48) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (49) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (50) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (51) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (52) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (53) exp_comp_eq -> . exp_comp
    (54) exp_comp -> . exp_comp GT exp_plusminus
    (55) exp_comp -> . exp_comp LT exp_plusminus
    (56) exp_comp -> . exp_comp GE exp_plusminus
    (57) exp_comp -> . exp_comp LE exp_plusminus
    (58) exp_comp -> . exp_comp SLT exp_plusminus
    (59) exp_comp -> . exp_comp SGT exp_plusminus
    (60) exp_comp -> . exp_comp SGE exp_plusminus
    (61) exp_comp -> . exp_comp SLE exp_plusminus
    (62) exp_comp -> . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    IF              shift and go to state 5
    RETURN          shift and go to state 8
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    FOR             shift and go to state 13
    DO              shift and go to state 14
    WHILE           shift and go to state 15
    ID_SC           shift and go to state 16
    ID_LI           shift and go to state 18
    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    exp                            shift and go to state 7
    blockcode                      shift and go to state 169
    command                        shift and go to state 95
    interations                    shift and go to state 4
    exp_lor                        shift and go to state 17
    exp_land                       shift and go to state 19
    exp_or                         shift and go to state 20
    exp_and                        shift and go to state 21
    exp_comp                       shift and go to state 22
    exp_comp_eq                    shift and go to state 23
    exp_plusminus                  shift and go to state 24
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 167

    (14) if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode . RBRACE
    (6) blockcode -> blockcode . command
    (7) command -> . interations
    (8) command -> . IF LPAREN exp RPAREN if_statement
    (9) command -> . exp SEMICOLON
    (10) command -> . RETURN exp SEMICOLON
    (11) command -> . BREAK SEMICOLON
    (12) command -> . CONTINUE SEMICOLON
    (20) interations -> . FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (21) interations -> . DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN
    (22) interations -> . WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE
    (23) interations -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (32) exp -> . ID_SC EQUALS exp_lor
    (33) exp -> . ID_LI EQUALS exp_lor
    (34) exp -> . ID_SC MINUSEQUAL exp_lor
    (35) exp -> . ID_SC PLUSEQUAL exp_lor
    (36) exp -> . ID_SC MODEQUAL exp_lor
    (37) exp -> . ID_SC DIVEQUAL exp_lor
    (38) exp -> . ID_SC TIMESEQUAL exp_lor
    (39) exp -> . exp_lor
    (40) exp_lor -> . exp_lor LOR exp_land
    (41) exp_lor -> . exp_land
    (42) exp_land -> . exp_land LAND exp_or
    (43) exp_land -> . exp_or
    (44) exp_or -> . exp_or OR exp_and
    (45) exp_or -> . exp_and
    (46) exp_and -> . exp_and AND exp_comp
    (47) exp_and -> . exp_comp_eq
    (48) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (49) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (50) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (51) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (52) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (53) exp_comp_eq -> . exp_comp
    (54) exp_comp -> . exp_comp GT exp_plusminus
    (55) exp_comp -> . exp_comp LT exp_plusminus
    (56) exp_comp -> . exp_comp GE exp_plusminus
    (57) exp_comp -> . exp_comp LE exp_plusminus
    (58) exp_comp -> . exp_comp SLT exp_plusminus
    (59) exp_comp -> . exp_comp SGT exp_plusminus
    (60) exp_comp -> . exp_comp SGE exp_plusminus
    (61) exp_comp -> . exp_comp SLE exp_plusminus
    (62) exp_comp -> . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    RBRACE          shift and go to state 170
    IF              shift and go to state 5
    RETURN          shift and go to state 8
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    FOR             shift and go to state 13
    DO              shift and go to state 14
    WHILE           shift and go to state 15
    ID_SC           shift and go to state 16
    ID_LI           shift and go to state 18
    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    command                        shift and go to state 134
    interations                    shift and go to state 4
    exp                            shift and go to state 7
    exp_lor                        shift and go to state 17
    exp_land                       shift and go to state 19
    exp_or                         shift and go to state 20
    exp_and                        shift and go to state 21
    exp_comp                       shift and go to state 22
    exp_comp_eq                    shift and go to state 23
    exp_plusminus                  shift and go to state 24
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 168

    (16) elsif -> ELSIF LPAREN exp . RPAREN LBRACE blockcode RBRACE
    (17) elsif -> ELSIF LPAREN exp . RPAREN LBRACE blockcode RBRACE elsif2

    RPAREN          shift and go to state 171


state 169

    (20) interations -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode . RBRACE
    (6) blockcode -> blockcode . command
    (7) command -> . interations
    (8) command -> . IF LPAREN exp RPAREN if_statement
    (9) command -> . exp SEMICOLON
    (10) command -> . RETURN exp SEMICOLON
    (11) command -> . BREAK SEMICOLON
    (12) command -> . CONTINUE SEMICOLON
    (20) interations -> . FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (21) interations -> . DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN
    (22) interations -> . WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE
    (23) interations -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (32) exp -> . ID_SC EQUALS exp_lor
    (33) exp -> . ID_LI EQUALS exp_lor
    (34) exp -> . ID_SC MINUSEQUAL exp_lor
    (35) exp -> . ID_SC PLUSEQUAL exp_lor
    (36) exp -> . ID_SC MODEQUAL exp_lor
    (37) exp -> . ID_SC DIVEQUAL exp_lor
    (38) exp -> . ID_SC TIMESEQUAL exp_lor
    (39) exp -> . exp_lor
    (40) exp_lor -> . exp_lor LOR exp_land
    (41) exp_lor -> . exp_land
    (42) exp_land -> . exp_land LAND exp_or
    (43) exp_land -> . exp_or
    (44) exp_or -> . exp_or OR exp_and
    (45) exp_or -> . exp_and
    (46) exp_and -> . exp_and AND exp_comp
    (47) exp_and -> . exp_comp_eq
    (48) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (49) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (50) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (51) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (52) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (53) exp_comp_eq -> . exp_comp
    (54) exp_comp -> . exp_comp GT exp_plusminus
    (55) exp_comp -> . exp_comp LT exp_plusminus
    (56) exp_comp -> . exp_comp GE exp_plusminus
    (57) exp_comp -> . exp_comp LE exp_plusminus
    (58) exp_comp -> . exp_comp SLT exp_plusminus
    (59) exp_comp -> . exp_comp SGT exp_plusminus
    (60) exp_comp -> . exp_comp SGE exp_plusminus
    (61) exp_comp -> . exp_comp SLE exp_plusminus
    (62) exp_comp -> . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    RBRACE          shift and go to state 172
    IF              shift and go to state 5
    RETURN          shift and go to state 8
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    FOR             shift and go to state 13
    DO              shift and go to state 14
    WHILE           shift and go to state 15
    ID_SC           shift and go to state 16
    ID_LI           shift and go to state 18
    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    exp                            shift and go to state 7
    command                        shift and go to state 134
    interations                    shift and go to state 4
    exp_lor                        shift and go to state 17
    exp_land                       shift and go to state 19
    exp_or                         shift and go to state 20
    exp_and                        shift and go to state 21
    exp_comp                       shift and go to state 22
    exp_comp_eq                    shift and go to state 23
    exp_plusminus                  shift and go to state 24
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 170

    (14) if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .

    IF              reduce using rule 14 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    RETURN          reduce using rule 14 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    BREAK           reduce using rule 14 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    CONTINUE        reduce using rule 14 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    SUB             reduce using rule 14 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    FOR             reduce using rule 14 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    DO              reduce using rule 14 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    WHILE           reduce using rule 14 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    ID_SC           reduce using rule 14 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    ID_LI           reduce using rule 14 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    XOR             reduce using rule 14 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    INCREMENT       reduce using rule 14 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    DECREMENT       reduce using rule 14 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    LPAREN          reduce using rule 14 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    NUMBER          reduce using rule 14 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    TRUE            reduce using rule 14 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    FALSE           reduce using rule 14 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    ID              reduce using rule 14 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    $end            reduce using rule 14 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)
    RBRACE          reduce using rule 14 (if_statement -> LBRACE blockcode RBRACE ELSE LBRACE blockcode RBRACE .)


state 171

    (16) elsif -> ELSIF LPAREN exp RPAREN . LBRACE blockcode RBRACE
    (17) elsif -> ELSIF LPAREN exp RPAREN . LBRACE blockcode RBRACE elsif2

    LBRACE          shift and go to state 173


state 172

    (20) interations -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .

    IF              reduce using rule 20 (interations -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    RETURN          reduce using rule 20 (interations -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    BREAK           reduce using rule 20 (interations -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    CONTINUE        reduce using rule 20 (interations -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    SUB             reduce using rule 20 (interations -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    FOR             reduce using rule 20 (interations -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    DO              reduce using rule 20 (interations -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    WHILE           reduce using rule 20 (interations -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    ID_SC           reduce using rule 20 (interations -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    ID_LI           reduce using rule 20 (interations -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    XOR             reduce using rule 20 (interations -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    INCREMENT       reduce using rule 20 (interations -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    DECREMENT       reduce using rule 20 (interations -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    LPAREN          reduce using rule 20 (interations -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    NUMBER          reduce using rule 20 (interations -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    TRUE            reduce using rule 20 (interations -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    FALSE           reduce using rule 20 (interations -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    ID              reduce using rule 20 (interations -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    $end            reduce using rule 20 (interations -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)
    RBRACE          reduce using rule 20 (interations -> FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE .)


state 173

    (16) elsif -> ELSIF LPAREN exp RPAREN LBRACE . blockcode RBRACE
    (17) elsif -> ELSIF LPAREN exp RPAREN LBRACE . blockcode RBRACE elsif2
    (5) blockcode -> . command
    (6) blockcode -> . blockcode command
    (7) command -> . interations
    (8) command -> . IF LPAREN exp RPAREN if_statement
    (9) command -> . exp SEMICOLON
    (10) command -> . RETURN exp SEMICOLON
    (11) command -> . BREAK SEMICOLON
    (12) command -> . CONTINUE SEMICOLON
    (20) interations -> . FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (21) interations -> . DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN
    (22) interations -> . WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE
    (23) interations -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (32) exp -> . ID_SC EQUALS exp_lor
    (33) exp -> . ID_LI EQUALS exp_lor
    (34) exp -> . ID_SC MINUSEQUAL exp_lor
    (35) exp -> . ID_SC PLUSEQUAL exp_lor
    (36) exp -> . ID_SC MODEQUAL exp_lor
    (37) exp -> . ID_SC DIVEQUAL exp_lor
    (38) exp -> . ID_SC TIMESEQUAL exp_lor
    (39) exp -> . exp_lor
    (40) exp_lor -> . exp_lor LOR exp_land
    (41) exp_lor -> . exp_land
    (42) exp_land -> . exp_land LAND exp_or
    (43) exp_land -> . exp_or
    (44) exp_or -> . exp_or OR exp_and
    (45) exp_or -> . exp_and
    (46) exp_and -> . exp_and AND exp_comp
    (47) exp_and -> . exp_comp_eq
    (48) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (49) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (50) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (51) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (52) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (53) exp_comp_eq -> . exp_comp
    (54) exp_comp -> . exp_comp GT exp_plusminus
    (55) exp_comp -> . exp_comp LT exp_plusminus
    (56) exp_comp -> . exp_comp GE exp_plusminus
    (57) exp_comp -> . exp_comp LE exp_plusminus
    (58) exp_comp -> . exp_comp SLT exp_plusminus
    (59) exp_comp -> . exp_comp SGT exp_plusminus
    (60) exp_comp -> . exp_comp SGE exp_plusminus
    (61) exp_comp -> . exp_comp SLE exp_plusminus
    (62) exp_comp -> . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    IF              shift and go to state 5
    RETURN          shift and go to state 8
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    FOR             shift and go to state 13
    DO              shift and go to state 14
    WHILE           shift and go to state 15
    ID_SC           shift and go to state 16
    ID_LI           shift and go to state 18
    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    exp                            shift and go to state 7
    blockcode                      shift and go to state 174
    command                        shift and go to state 95
    interations                    shift and go to state 4
    exp_lor                        shift and go to state 17
    exp_land                       shift and go to state 19
    exp_or                         shift and go to state 20
    exp_and                        shift and go to state 21
    exp_comp                       shift and go to state 22
    exp_comp_eq                    shift and go to state 23
    exp_plusminus                  shift and go to state 24
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 174

    (16) elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode . RBRACE
    (17) elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode . RBRACE elsif2
    (6) blockcode -> blockcode . command
    (7) command -> . interations
    (8) command -> . IF LPAREN exp RPAREN if_statement
    (9) command -> . exp SEMICOLON
    (10) command -> . RETURN exp SEMICOLON
    (11) command -> . BREAK SEMICOLON
    (12) command -> . CONTINUE SEMICOLON
    (20) interations -> . FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (21) interations -> . DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN
    (22) interations -> . WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE
    (23) interations -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (32) exp -> . ID_SC EQUALS exp_lor
    (33) exp -> . ID_LI EQUALS exp_lor
    (34) exp -> . ID_SC MINUSEQUAL exp_lor
    (35) exp -> . ID_SC PLUSEQUAL exp_lor
    (36) exp -> . ID_SC MODEQUAL exp_lor
    (37) exp -> . ID_SC DIVEQUAL exp_lor
    (38) exp -> . ID_SC TIMESEQUAL exp_lor
    (39) exp -> . exp_lor
    (40) exp_lor -> . exp_lor LOR exp_land
    (41) exp_lor -> . exp_land
    (42) exp_land -> . exp_land LAND exp_or
    (43) exp_land -> . exp_or
    (44) exp_or -> . exp_or OR exp_and
    (45) exp_or -> . exp_and
    (46) exp_and -> . exp_and AND exp_comp
    (47) exp_and -> . exp_comp_eq
    (48) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (49) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (50) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (51) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (52) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (53) exp_comp_eq -> . exp_comp
    (54) exp_comp -> . exp_comp GT exp_plusminus
    (55) exp_comp -> . exp_comp LT exp_plusminus
    (56) exp_comp -> . exp_comp GE exp_plusminus
    (57) exp_comp -> . exp_comp LE exp_plusminus
    (58) exp_comp -> . exp_comp SLT exp_plusminus
    (59) exp_comp -> . exp_comp SGT exp_plusminus
    (60) exp_comp -> . exp_comp SGE exp_plusminus
    (61) exp_comp -> . exp_comp SLE exp_plusminus
    (62) exp_comp -> . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    RBRACE          shift and go to state 175
    IF              shift and go to state 5
    RETURN          shift and go to state 8
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    FOR             shift and go to state 13
    DO              shift and go to state 14
    WHILE           shift and go to state 15
    ID_SC           shift and go to state 16
    ID_LI           shift and go to state 18
    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    exp                            shift and go to state 7
    command                        shift and go to state 134
    interations                    shift and go to state 4
    exp_lor                        shift and go to state 17
    exp_land                       shift and go to state 19
    exp_or                         shift and go to state 20
    exp_and                        shift and go to state 21
    exp_comp                       shift and go to state 22
    exp_comp_eq                    shift and go to state 23
    exp_plusminus                  shift and go to state 24
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 175

    (16) elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .
    (17) elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE . elsif2
    (18) elsif2 -> . elsif
    (19) elsif2 -> . ELSE LBRACE blockcode RBRACE
    (16) elsif -> . ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE
    (17) elsif -> . ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2

    IF              reduce using rule 16 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    RETURN          reduce using rule 16 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    BREAK           reduce using rule 16 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    CONTINUE        reduce using rule 16 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    SUB             reduce using rule 16 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    FOR             reduce using rule 16 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    DO              reduce using rule 16 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    WHILE           reduce using rule 16 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    ID_SC           reduce using rule 16 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    ID_LI           reduce using rule 16 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    XOR             reduce using rule 16 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    INCREMENT       reduce using rule 16 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    DECREMENT       reduce using rule 16 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    LPAREN          reduce using rule 16 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    NUMBER          reduce using rule 16 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    TRUE            reduce using rule 16 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    FALSE           reduce using rule 16 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    ID              reduce using rule 16 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    $end            reduce using rule 16 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    RBRACE          reduce using rule 16 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE .)
    ELSE            shift and go to state 178
    ELSIF           shift and go to state 160

    elsif2                         shift and go to state 176
    elsif                          shift and go to state 177

state 176

    (17) elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .

    IF              reduce using rule 17 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    RETURN          reduce using rule 17 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    BREAK           reduce using rule 17 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    CONTINUE        reduce using rule 17 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    SUB             reduce using rule 17 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    FOR             reduce using rule 17 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    DO              reduce using rule 17 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    WHILE           reduce using rule 17 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    ID_SC           reduce using rule 17 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    ID_LI           reduce using rule 17 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    XOR             reduce using rule 17 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    INCREMENT       reduce using rule 17 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    DECREMENT       reduce using rule 17 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    LPAREN          reduce using rule 17 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    NUMBER          reduce using rule 17 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    TRUE            reduce using rule 17 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    FALSE           reduce using rule 17 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    ID              reduce using rule 17 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    $end            reduce using rule 17 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)
    RBRACE          reduce using rule 17 (elsif -> ELSIF LPAREN exp RPAREN LBRACE blockcode RBRACE elsif2 .)


state 177

    (18) elsif2 -> elsif .

    IF              reduce using rule 18 (elsif2 -> elsif .)
    RETURN          reduce using rule 18 (elsif2 -> elsif .)
    BREAK           reduce using rule 18 (elsif2 -> elsif .)
    CONTINUE        reduce using rule 18 (elsif2 -> elsif .)
    SUB             reduce using rule 18 (elsif2 -> elsif .)
    FOR             reduce using rule 18 (elsif2 -> elsif .)
    DO              reduce using rule 18 (elsif2 -> elsif .)
    WHILE           reduce using rule 18 (elsif2 -> elsif .)
    ID_SC           reduce using rule 18 (elsif2 -> elsif .)
    ID_LI           reduce using rule 18 (elsif2 -> elsif .)
    XOR             reduce using rule 18 (elsif2 -> elsif .)
    INCREMENT       reduce using rule 18 (elsif2 -> elsif .)
    DECREMENT       reduce using rule 18 (elsif2 -> elsif .)
    LPAREN          reduce using rule 18 (elsif2 -> elsif .)
    NUMBER          reduce using rule 18 (elsif2 -> elsif .)
    TRUE            reduce using rule 18 (elsif2 -> elsif .)
    FALSE           reduce using rule 18 (elsif2 -> elsif .)
    ID              reduce using rule 18 (elsif2 -> elsif .)
    $end            reduce using rule 18 (elsif2 -> elsif .)
    RBRACE          reduce using rule 18 (elsif2 -> elsif .)


state 178

    (19) elsif2 -> ELSE . LBRACE blockcode RBRACE

    LBRACE          shift and go to state 179


state 179

    (19) elsif2 -> ELSE LBRACE . blockcode RBRACE
    (5) blockcode -> . command
    (6) blockcode -> . blockcode command
    (7) command -> . interations
    (8) command -> . IF LPAREN exp RPAREN if_statement
    (9) command -> . exp SEMICOLON
    (10) command -> . RETURN exp SEMICOLON
    (11) command -> . BREAK SEMICOLON
    (12) command -> . CONTINUE SEMICOLON
    (20) interations -> . FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (21) interations -> . DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN
    (22) interations -> . WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE
    (23) interations -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (32) exp -> . ID_SC EQUALS exp_lor
    (33) exp -> . ID_LI EQUALS exp_lor
    (34) exp -> . ID_SC MINUSEQUAL exp_lor
    (35) exp -> . ID_SC PLUSEQUAL exp_lor
    (36) exp -> . ID_SC MODEQUAL exp_lor
    (37) exp -> . ID_SC DIVEQUAL exp_lor
    (38) exp -> . ID_SC TIMESEQUAL exp_lor
    (39) exp -> . exp_lor
    (40) exp_lor -> . exp_lor LOR exp_land
    (41) exp_lor -> . exp_land
    (42) exp_land -> . exp_land LAND exp_or
    (43) exp_land -> . exp_or
    (44) exp_or -> . exp_or OR exp_and
    (45) exp_or -> . exp_and
    (46) exp_and -> . exp_and AND exp_comp
    (47) exp_and -> . exp_comp_eq
    (48) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (49) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (50) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (51) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (52) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (53) exp_comp_eq -> . exp_comp
    (54) exp_comp -> . exp_comp GT exp_plusminus
    (55) exp_comp -> . exp_comp LT exp_plusminus
    (56) exp_comp -> . exp_comp GE exp_plusminus
    (57) exp_comp -> . exp_comp LE exp_plusminus
    (58) exp_comp -> . exp_comp SLT exp_plusminus
    (59) exp_comp -> . exp_comp SGT exp_plusminus
    (60) exp_comp -> . exp_comp SGE exp_plusminus
    (61) exp_comp -> . exp_comp SLE exp_plusminus
    (62) exp_comp -> . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    IF              shift and go to state 5
    RETURN          shift and go to state 8
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    FOR             shift and go to state 13
    DO              shift and go to state 14
    WHILE           shift and go to state 15
    ID_SC           shift and go to state 16
    ID_LI           shift and go to state 18
    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    blockcode                      shift and go to state 180
    command                        shift and go to state 95
    interations                    shift and go to state 4
    exp                            shift and go to state 7
    exp_lor                        shift and go to state 17
    exp_land                       shift and go to state 19
    exp_or                         shift and go to state 20
    exp_and                        shift and go to state 21
    exp_comp                       shift and go to state 22
    exp_comp_eq                    shift and go to state 23
    exp_plusminus                  shift and go to state 24
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 180

    (19) elsif2 -> ELSE LBRACE blockcode . RBRACE
    (6) blockcode -> blockcode . command
    (7) command -> . interations
    (8) command -> . IF LPAREN exp RPAREN if_statement
    (9) command -> . exp SEMICOLON
    (10) command -> . RETURN exp SEMICOLON
    (11) command -> . BREAK SEMICOLON
    (12) command -> . CONTINUE SEMICOLON
    (20) interations -> . FOR LPAREN for_assignments SEMICOLON exp SEMICOLON for_assignments RPAREN LBRACE blockcode RBRACE
    (21) interations -> . DO LBRACE blockcode RBRACE WHILE LPAREN exp RPAREN
    (22) interations -> . WHILE LPAREN exp RPAREN LBRACE blockcode RBRACE
    (23) interations -> . WHILE LPAREN exp RPAREN LBRACE RBRACE
    (32) exp -> . ID_SC EQUALS exp_lor
    (33) exp -> . ID_LI EQUALS exp_lor
    (34) exp -> . ID_SC MINUSEQUAL exp_lor
    (35) exp -> . ID_SC PLUSEQUAL exp_lor
    (36) exp -> . ID_SC MODEQUAL exp_lor
    (37) exp -> . ID_SC DIVEQUAL exp_lor
    (38) exp -> . ID_SC TIMESEQUAL exp_lor
    (39) exp -> . exp_lor
    (40) exp_lor -> . exp_lor LOR exp_land
    (41) exp_lor -> . exp_land
    (42) exp_land -> . exp_land LAND exp_or
    (43) exp_land -> . exp_or
    (44) exp_or -> . exp_or OR exp_and
    (45) exp_or -> . exp_and
    (46) exp_and -> . exp_and AND exp_comp
    (47) exp_and -> . exp_comp_eq
    (48) exp_comp_eq -> . exp_comp_eq EQ exp_comp
    (49) exp_comp_eq -> . exp_comp_eq NE exp_comp
    (50) exp_comp_eq -> . exp_comp_eq SEQ exp_comp
    (51) exp_comp_eq -> . exp_comp_eq SNE exp_comp
    (52) exp_comp_eq -> . exp_comp_eq CMP exp_comp
    (53) exp_comp_eq -> . exp_comp
    (54) exp_comp -> . exp_comp GT exp_plusminus
    (55) exp_comp -> . exp_comp LT exp_plusminus
    (56) exp_comp -> . exp_comp GE exp_plusminus
    (57) exp_comp -> . exp_comp LE exp_plusminus
    (58) exp_comp -> . exp_comp SLT exp_plusminus
    (59) exp_comp -> . exp_comp SGT exp_plusminus
    (60) exp_comp -> . exp_comp SGE exp_plusminus
    (61) exp_comp -> . exp_comp SLE exp_plusminus
    (62) exp_comp -> . exp_plusminus
    (63) exp_plusminus -> . exp_plusminus PLUS exp_times_divides
    (64) exp_plusminus -> . exp_plusminus MINUS exp_times_divides
    (65) exp_plusminus -> . exp_times_divides
    (66) exp_times_divides -> . exp_times_divides TIMES exp_lnot
    (67) exp_times_divides -> . exp_times_divides DIVIDE exp_lnot
    (68) exp_times_divides -> . exp_times_divides MODULO exp_lnot
    (69) exp_times_divides -> . exp_lnot
    (70) exp_lnot -> . XOR exp_lnot
    (71) exp_lnot -> . exp_decrement_increment
    (72) exp_decrement_increment -> . INCREMENT ID_SC
    (73) exp_decrement_increment -> . DECREMENT ID_SC
    (74) exp_decrement_increment -> . ID_SC INCREMENT
    (75) exp_decrement_increment -> . ID_SC DECREMENT
    (76) exp_decrement_increment -> . exp_lastlayer
    (77) exp_lastlayer -> . LPAREN exp RPAREN
    (78) exp_lastlayer -> . ID_SC
    (79) exp_lastlayer -> . ID_LI
    (80) exp_lastlayer -> . NUMBER
    (81) exp_lastlayer -> . call
    (82) exp_lastlayer -> . TRUE
    (83) exp_lastlayer -> . FALSE
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID LPAREN function_assignments RPAREN

    RBRACE          shift and go to state 181
    IF              shift and go to state 5
    RETURN          shift and go to state 8
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    FOR             shift and go to state 13
    DO              shift and go to state 14
    WHILE           shift and go to state 15
    ID_SC           shift and go to state 16
    ID_LI           shift and go to state 18
    XOR             shift and go to state 27
    INCREMENT       shift and go to state 29
    DECREMENT       shift and go to state 30
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 32
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    ID              shift and go to state 12

    command                        shift and go to state 134
    interations                    shift and go to state 4
    exp                            shift and go to state 7
    exp_lor                        shift and go to state 17
    exp_land                       shift and go to state 19
    exp_or                         shift and go to state 20
    exp_and                        shift and go to state 21
    exp_comp                       shift and go to state 22
    exp_comp_eq                    shift and go to state 23
    exp_plusminus                  shift and go to state 24
    exp_times_divides              shift and go to state 25
    exp_lnot                       shift and go to state 26
    exp_decrement_increment        shift and go to state 28
    exp_lastlayer                  shift and go to state 31
    call                           shift and go to state 33

state 181

    (19) elsif2 -> ELSE LBRACE blockcode RBRACE .

    IF              reduce using rule 19 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    RETURN          reduce using rule 19 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    BREAK           reduce using rule 19 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    CONTINUE        reduce using rule 19 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    SUB             reduce using rule 19 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    FOR             reduce using rule 19 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    DO              reduce using rule 19 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    WHILE           reduce using rule 19 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    ID_SC           reduce using rule 19 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    ID_LI           reduce using rule 19 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    XOR             reduce using rule 19 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    INCREMENT       reduce using rule 19 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    DECREMENT       reduce using rule 19 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    LPAREN          reduce using rule 19 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    NUMBER          reduce using rule 19 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    TRUE            reduce using rule 19 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    FALSE           reduce using rule 19 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    ID              reduce using rule 19 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    $end            reduce using rule 19 (elsif2 -> ELSE LBRACE blockcode RBRACE .)
    RBRACE          reduce using rule 19 (elsif2 -> ELSE LBRACE blockcode RBRACE .)


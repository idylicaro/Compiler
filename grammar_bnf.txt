** First version PERL**

INIT -> ASSIGNMENT | COMMAND | FUNCTION | CALL


COMMAND -> INTERATIONS | IF 


ASSIGNMENT -> TYPE IDENTIFIER = ARITHMETIC; |
                TYPE IDENTIFIER; | IDENTIFIER = ARITHMETIC; |
                IDENTIFIER | ++IDENTIFIER(;)+ |
                --IDENTIFIER(;)+ | IDENTIFIER++(;)+ |
                IDENTIFIER--(;)+

ASSIGNMENT -> TYPE IDENTIFIER = ARITHMETIC |
                TYPE IDENTIFIER | IDENTIFIER = ARITHMETIC |
                IDENTIFIER | ++IDENTIFIER |
                --IDENTIFIER | IDENTIFIER++ |
                IDENTIFIER-- | ASSIGNMENT2 

ASSIGNMENT2 -> TYPE IDENTIFIER = ARITHMETIC ASSI_END |
                TYPE IDENTIFIER ASSI_END | IDENTIFIER = ARITHMETIC ASSI_END |
                IDENTIFIER | ++IDENTIFIER ASSI_END |
                --IDENTIFIER ASSI_END | IDENTIFIER++ ASSI_END |
                IDENTIFIER-- ASSI_END

ASSI_END -> ; | ; ASSIGNMENT | , ASSIGNMENT 

IDENTIFIER -> [a-zA-Z][a-zA-Z0-9]*
TYPE -> $ | @

IF -> if(CONDITION){BLOCKCODE} || if(CONDITION){BLOCKCODE}else{BLOCKCODE} | if(CONDITION){BLOCKCODE}ELSIF
ELSIF -> elsif(CONDITION){BLOCKCODE} | elsif(CONDITION){BLOCKCODE}ELSIF2 
ELSIF2 -> ELSIF | else{BLOCKCODE}

INTERATIONS -> FOR | DOWHILE | WHILE 
FOR -> for(ASSIGNMENT [, ASSIGNMENT]*; [CONDITION]; [ASSIGNMENT]){BLOCKCODE}
DOWHILE -> do{BLOCKCODE}WHILE
WHILE -> while(CONDITION){BLOCKCODE}

FUNCTION -> sub IDENTIFIER(){BLOCKCODE} | sub IDENTIFIER(ASSIGNMENT[, ASSIGNMENT]*){BLOCKCODE}

CONDITION -> ATTCOND > ATTCOND | ATTCOND < ATTCOND |
            ATTCOND == ATTCOND | ATTCOND >= ATTCOND |
            ATTCOND <= ATTCOND | ATTCOND != ATTCOND |
            ATTCOND | ((CONDITION) [LOGIC (CONDITION)]*) |
            ATTCOND cmp ATTCOND | ATTCOND eq ATTCOND | 
            ATTCOND ne ATTCOND | ATTCOND lt ATTCOND |
            ATTCOND gt ATTCOND | ATTCOND le ATTCOND |
            ATTCOND ge ATTCOND 



LOGIC -> && | || | ! |

ATTCOND -> ASSIGNMENT | NUMBER | true | false

BLOCKCODE -> COMMAND | ASSIGNMENT; | CALL; | return RETURN; | break; | continue;

RETURN -> ATTCOND | ARITHMETIC
EXP -> NUMBER | ASSIGNMENT | CALL
ARITHMETIC -> EXP + EXP | EXP - EXP | EXP * EXP | EXP / EXP | EXP | ( ARITHMETIC )

ARITHMETIC -> EXP
EXP -> EXP + EXP1 | EXP - EXP1 | EXP1
EXP1 -> EXP1 * EXP2 | EXP1 / EXP2 | EXP2
EXP2 -> EXP3 ^ EXP2 | EXP3
EXP3 -> ( ARITHMETIC ) | NUMBER | ASSIGNMENT | CALL | EXP 




NUMBER -> CINTEGER | CFLOAT | CDOUBLE
